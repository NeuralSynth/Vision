"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/ogl";
exports.ids = ["vendor-chunks/ogl"];
exports.modules = {

/***/ "(ssr)/./node_modules/ogl/src/core/Geometry.js":
/*!***********************************************!*\
  !*** ./node_modules/ogl/src/core/Geometry.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Geometry: () => (/* binding */ Geometry)\n/* harmony export */ });\n/* harmony import */ var _math_Vec3_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../math/Vec3.js */ \"(ssr)/./node_modules/ogl/src/math/Vec3.js\");\n// attribute params\n// {\n//     data - typed array eg UInt16Array for indices, Float32Array\n//     size - int default 1\n//     instanced - default null. Pass divisor amount\n//     type - gl enum default gl.UNSIGNED_SHORT for 'index', gl.FLOAT for others\n//     normalized - boolean default false\n//     buffer - gl buffer, if buffer exists, don't need to provide data - although needs position data for bounds calculation\n//     stride - default 0 - for when passing in buffer\n//     offset - default 0 - for when passing in buffer\n//     count - default null - for when passing in buffer\n//     min - array - for when passing in buffer\n//     max - array - for when passing in buffer\n// }\n// TODO: fit in transform feedback\n\nconst tempVec3 = /* @__PURE__ */ new _math_Vec3_js__WEBPACK_IMPORTED_MODULE_0__.Vec3();\nlet ID = 1;\nlet ATTR_ID = 1;\n// To stop inifinite warnings\nlet isBoundsWarned = false;\nclass Geometry {\n    constructor(gl, attributes = {}){\n        if (!gl.canvas) console.error(\"gl not passed as first argument to Geometry\");\n        this.gl = gl;\n        this.attributes = attributes;\n        this.id = ID++;\n        // Store one VAO per program attribute locations order\n        this.VAOs = {};\n        this.drawRange = {\n            start: 0,\n            count: 0\n        };\n        this.instancedCount = 0;\n        // Unbind current VAO so that new buffers don't get added to active mesh\n        this.gl.renderer.bindVertexArray(null);\n        this.gl.renderer.currentGeometry = null;\n        // Alias for state store to avoid redundant calls for global state\n        this.glState = this.gl.renderer.state;\n        // create the buffers\n        for(let key in attributes){\n            this.addAttribute(key, attributes[key]);\n        }\n    }\n    addAttribute(key, attr) {\n        this.attributes[key] = attr;\n        // Set options\n        attr.id = ATTR_ID++; // TODO: currently unused, remove?\n        attr.size = attr.size || 1;\n        attr.type = attr.type || (attr.data.constructor === Float32Array ? this.gl.FLOAT : attr.data.constructor === Uint16Array ? this.gl.UNSIGNED_SHORT : this.gl.UNSIGNED_INT); // Uint32Array\n        attr.target = key === \"index\" ? this.gl.ELEMENT_ARRAY_BUFFER : this.gl.ARRAY_BUFFER;\n        attr.normalized = attr.normalized || false;\n        attr.stride = attr.stride || 0;\n        attr.offset = attr.offset || 0;\n        attr.count = attr.count || (attr.stride ? attr.data.byteLength / attr.stride : attr.data.length / attr.size);\n        attr.divisor = attr.instanced || 0;\n        attr.needsUpdate = false;\n        attr.usage = attr.usage || this.gl.STATIC_DRAW;\n        if (!attr.buffer) {\n            // Push data to buffer\n            this.updateAttribute(attr);\n        }\n        // Update geometry counts. If indexed, ignore regular attributes\n        if (attr.divisor) {\n            this.isInstanced = true;\n            if (this.instancedCount && this.instancedCount !== attr.count * attr.divisor) {\n                console.warn(\"geometry has multiple instanced buffers of different length\");\n                return this.instancedCount = Math.min(this.instancedCount, attr.count * attr.divisor);\n            }\n            this.instancedCount = attr.count * attr.divisor;\n        } else if (key === \"index\") {\n            this.drawRange.count = attr.count;\n        } else if (!this.attributes.index) {\n            this.drawRange.count = Math.max(this.drawRange.count, attr.count);\n        }\n    }\n    updateAttribute(attr) {\n        const isNewBuffer = !attr.buffer;\n        if (isNewBuffer) attr.buffer = this.gl.createBuffer();\n        if (this.glState.boundBuffer !== attr.buffer) {\n            this.gl.bindBuffer(attr.target, attr.buffer);\n            this.glState.boundBuffer = attr.buffer;\n        }\n        if (isNewBuffer) {\n            this.gl.bufferData(attr.target, attr.data, attr.usage);\n        } else {\n            this.gl.bufferSubData(attr.target, 0, attr.data);\n        }\n        attr.needsUpdate = false;\n    }\n    setIndex(value) {\n        this.addAttribute(\"index\", value);\n    }\n    setDrawRange(start, count) {\n        this.drawRange.start = start;\n        this.drawRange.count = count;\n    }\n    setInstancedCount(value) {\n        this.instancedCount = value;\n    }\n    createVAO(program) {\n        this.VAOs[program.attributeOrder] = this.gl.renderer.createVertexArray();\n        this.gl.renderer.bindVertexArray(this.VAOs[program.attributeOrder]);\n        this.bindAttributes(program);\n    }\n    bindAttributes(program) {\n        // Link all attributes to program using gl.vertexAttribPointer\n        program.attributeLocations.forEach((location, { name, type })=>{\n            // If geometry missing a required shader attribute\n            if (!this.attributes[name]) {\n                console.warn(`active attribute ${name} not being supplied`);\n                return;\n            }\n            const attr = this.attributes[name];\n            this.gl.bindBuffer(attr.target, attr.buffer);\n            this.glState.boundBuffer = attr.buffer;\n            // For matrix attributes, buffer needs to be defined per column\n            let numLoc = 1;\n            if (type === 35674) numLoc = 2; // mat2\n            if (type === 35675) numLoc = 3; // mat3\n            if (type === 35676) numLoc = 4; // mat4\n            const size = attr.size / numLoc;\n            const stride = numLoc === 1 ? 0 : numLoc * numLoc * 4;\n            const offset = numLoc === 1 ? 0 : numLoc * 4;\n            for(let i = 0; i < numLoc; i++){\n                this.gl.vertexAttribPointer(location + i, size, attr.type, attr.normalized, attr.stride + stride, attr.offset + i * offset);\n                this.gl.enableVertexAttribArray(location + i);\n                // For instanced attributes, divisor needs to be set.\n                // For firefox, need to set back to 0 if non-instanced drawn after instanced. Else won't render\n                this.gl.renderer.vertexAttribDivisor(location + i, attr.divisor);\n            }\n        });\n        // Bind indices if geometry indexed\n        if (this.attributes.index) this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.attributes.index.buffer);\n    }\n    draw({ program, mode = this.gl.TRIANGLES }) {\n        if (this.gl.renderer.currentGeometry !== `${this.id}_${program.attributeOrder}`) {\n            if (!this.VAOs[program.attributeOrder]) this.createVAO(program);\n            this.gl.renderer.bindVertexArray(this.VAOs[program.attributeOrder]);\n            this.gl.renderer.currentGeometry = `${this.id}_${program.attributeOrder}`;\n        }\n        // Check if any attributes need updating\n        program.attributeLocations.forEach((location, { name })=>{\n            const attr = this.attributes[name];\n            if (attr.needsUpdate) this.updateAttribute(attr);\n        });\n        // For drawElements, offset needs to be multiple of type size\n        let indexBytesPerElement = 2;\n        if (this.attributes.index?.type === this.gl.UNSIGNED_INT) indexBytesPerElement = 4;\n        if (this.isInstanced) {\n            if (this.attributes.index) {\n                this.gl.renderer.drawElementsInstanced(mode, this.drawRange.count, this.attributes.index.type, this.attributes.index.offset + this.drawRange.start * indexBytesPerElement, this.instancedCount);\n            } else {\n                this.gl.renderer.drawArraysInstanced(mode, this.drawRange.start, this.drawRange.count, this.instancedCount);\n            }\n        } else {\n            if (this.attributes.index) {\n                this.gl.drawElements(mode, this.drawRange.count, this.attributes.index.type, this.attributes.index.offset + this.drawRange.start * indexBytesPerElement);\n            } else {\n                this.gl.drawArrays(mode, this.drawRange.start, this.drawRange.count);\n            }\n        }\n    }\n    getPosition() {\n        // Use position buffer, or min/max if available\n        const attr = this.attributes.position;\n        // if (attr.min) return [...attr.min, ...attr.max];\n        if (attr.data) return attr;\n        if (isBoundsWarned) return;\n        console.warn(\"No position buffer data found to compute bounds\");\n        return isBoundsWarned = true;\n    }\n    computeBoundingBox(attr) {\n        if (!attr) attr = this.getPosition();\n        const array = attr.data;\n        // Data loaded shouldn't haave stride, only buffers\n        // const stride = attr.stride ? attr.stride / array.BYTES_PER_ELEMENT : attr.size;\n        const stride = attr.size;\n        if (!this.bounds) {\n            this.bounds = {\n                min: new _math_Vec3_js__WEBPACK_IMPORTED_MODULE_0__.Vec3(),\n                max: new _math_Vec3_js__WEBPACK_IMPORTED_MODULE_0__.Vec3(),\n                center: new _math_Vec3_js__WEBPACK_IMPORTED_MODULE_0__.Vec3(),\n                scale: new _math_Vec3_js__WEBPACK_IMPORTED_MODULE_0__.Vec3(),\n                radius: Infinity\n            };\n        }\n        const min = this.bounds.min;\n        const max = this.bounds.max;\n        const center = this.bounds.center;\n        const scale = this.bounds.scale;\n        min.set(+Infinity);\n        max.set(-Infinity);\n        // TODO: check size of position (eg triangle with Vec2)\n        for(let i = 0, l = array.length; i < l; i += stride){\n            const x = array[i];\n            const y = array[i + 1];\n            const z = array[i + 2];\n            min.x = Math.min(x, min.x);\n            min.y = Math.min(y, min.y);\n            min.z = Math.min(z, min.z);\n            max.x = Math.max(x, max.x);\n            max.y = Math.max(y, max.y);\n            max.z = Math.max(z, max.z);\n        }\n        scale.sub(max, min);\n        center.add(min, max).divide(2);\n    }\n    computeBoundingSphere(attr) {\n        if (!attr) attr = this.getPosition();\n        const array = attr.data;\n        // Data loaded shouldn't haave stride, only buffers\n        // const stride = attr.stride ? attr.stride / array.BYTES_PER_ELEMENT : attr.size;\n        const stride = attr.size;\n        if (!this.bounds) this.computeBoundingBox(attr);\n        let maxRadiusSq = 0;\n        for(let i = 0, l = array.length; i < l; i += stride){\n            tempVec3.fromArray(array, i);\n            maxRadiusSq = Math.max(maxRadiusSq, this.bounds.center.squaredDistance(tempVec3));\n        }\n        this.bounds.radius = Math.sqrt(maxRadiusSq);\n    }\n    remove() {\n        for(let key in this.VAOs){\n            this.gl.renderer.deleteVertexArray(this.VAOs[key]);\n            delete this.VAOs[key];\n        }\n        for(let key in this.attributes){\n            this.gl.deleteBuffer(this.attributes[key].buffer);\n            delete this.attributes[key];\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ogl/src/core/Geometry.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ogl/src/core/Mesh.js":
/*!*******************************************!*\
  !*** ./node_modules/ogl/src/core/Mesh.js ***!
  \*******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Mesh: () => (/* binding */ Mesh)\n/* harmony export */ });\n/* harmony import */ var _Transform_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Transform.js */ \"(ssr)/./node_modules/ogl/src/core/Transform.js\");\n/* harmony import */ var _math_Mat3_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../math/Mat3.js */ \"(ssr)/./node_modules/ogl/src/math/Mat3.js\");\n/* harmony import */ var _math_Mat4_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../math/Mat4.js */ \"(ssr)/./node_modules/ogl/src/math/Mat4.js\");\n\n\n\nlet ID = 0;\nclass Mesh extends _Transform_js__WEBPACK_IMPORTED_MODULE_0__.Transform {\n    constructor(gl, { geometry, program, mode = gl.TRIANGLES, frustumCulled = true, renderOrder = 0 } = {}){\n        super();\n        if (!gl.canvas) console.error(\"gl not passed as first argument to Mesh\");\n        this.gl = gl;\n        this.id = ID++;\n        this.geometry = geometry;\n        this.program = program;\n        this.mode = mode;\n        // Used to skip frustum culling\n        this.frustumCulled = frustumCulled;\n        // Override sorting to force an order\n        this.renderOrder = renderOrder;\n        this.modelViewMatrix = new _math_Mat4_js__WEBPACK_IMPORTED_MODULE_1__.Mat4();\n        this.normalMatrix = new _math_Mat3_js__WEBPACK_IMPORTED_MODULE_2__.Mat3();\n        this.beforeRenderCallbacks = [];\n        this.afterRenderCallbacks = [];\n    }\n    onBeforeRender(f) {\n        this.beforeRenderCallbacks.push(f);\n        return this;\n    }\n    onAfterRender(f) {\n        this.afterRenderCallbacks.push(f);\n        return this;\n    }\n    draw({ camera } = {}) {\n        if (camera) {\n            // Add empty matrix uniforms to program if unset\n            if (!this.program.uniforms.modelMatrix) {\n                Object.assign(this.program.uniforms, {\n                    modelMatrix: {\n                        value: null\n                    },\n                    viewMatrix: {\n                        value: null\n                    },\n                    modelViewMatrix: {\n                        value: null\n                    },\n                    normalMatrix: {\n                        value: null\n                    },\n                    projectionMatrix: {\n                        value: null\n                    },\n                    cameraPosition: {\n                        value: null\n                    }\n                });\n            }\n            // Set the matrix uniforms\n            this.program.uniforms.projectionMatrix.value = camera.projectionMatrix;\n            this.program.uniforms.cameraPosition.value = camera.worldPosition;\n            this.program.uniforms.viewMatrix.value = camera.viewMatrix;\n            this.modelViewMatrix.multiply(camera.viewMatrix, this.worldMatrix);\n            this.normalMatrix.getNormalMatrix(this.modelViewMatrix);\n            this.program.uniforms.modelMatrix.value = this.worldMatrix;\n            this.program.uniforms.modelViewMatrix.value = this.modelViewMatrix;\n            this.program.uniforms.normalMatrix.value = this.normalMatrix;\n        }\n        this.beforeRenderCallbacks.forEach((f)=>f && f({\n                mesh: this,\n                camera\n            }));\n        // determine if faces need to be flipped - when mesh scaled negatively\n        let flipFaces = this.program.cullFace && this.worldMatrix.determinant() < 0;\n        this.program.use({\n            flipFaces\n        });\n        this.geometry.draw({\n            mode: this.mode,\n            program: this.program\n        });\n        this.afterRenderCallbacks.forEach((f)=>f && f({\n                mesh: this,\n                camera\n            }));\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Q0FBQ1QsT0FBTyxDQUFDbUIsUUFBUSxDQUFDVCxZQUFZLENBQUNhLEtBQUssR0FBRyxJQUFJLENBQUNiLFlBQVk7UUFDaEU7UUFDQSxJQUFJLENBQUNDLHFCQUFxQixDQUFDb0IsT0FBTyxDQUFDLENBQUNqQixJQUFNQSxLQUFLQSxFQUFFO2dCQUFFa0IsTUFBTSxJQUFJO2dCQUFFZDtZQUFPO1FBRXRFLHNFQUFzRTtRQUN0RSxJQUFJZSxZQUFZLElBQUksQ0FBQ2pDLE9BQU8sQ0FBQ2tDLFFBQVEsSUFBSSxJQUFJLENBQUNMLFdBQVcsQ0FBQ00sV0FBVyxLQUFLO1FBQzFFLElBQUksQ0FBQ25DLE9BQU8sQ0FBQ29DLEdBQUcsQ0FBQztZQUFFSDtRQUFVO1FBQzdCLElBQUksQ0FBQ2xDLFFBQVEsQ0FBQ2tCLElBQUksQ0FBQztZQUFFaEIsTUFBTSxJQUFJLENBQUNBLElBQUk7WUFBRUQsU0FBUyxJQUFJLENBQUNBLE9BQU87UUFBQztRQUM1RCxJQUFJLENBQUNZLG9CQUFvQixDQUFDbUIsT0FBTyxDQUFDLENBQUNqQixJQUFNQSxLQUFLQSxFQUFFO2dCQUFFa0IsTUFBTSxJQUFJO2dCQUFFZDtZQUFPO0lBQ3pFO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wZXJjZXZpYS8uL25vZGVfbW9kdWxlcy9vZ2wvc3JjL2NvcmUvTWVzaC5qcz8yOWYyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRyYW5zZm9ybSB9IGZyb20gJy4vVHJhbnNmb3JtLmpzJztcbmltcG9ydCB7IE1hdDMgfSBmcm9tICcuLi9tYXRoL01hdDMuanMnO1xuaW1wb3J0IHsgTWF0NCB9IGZyb20gJy4uL21hdGgvTWF0NC5qcyc7XG5cbmxldCBJRCA9IDA7XG5cbmV4cG9ydCBjbGFzcyBNZXNoIGV4dGVuZHMgVHJhbnNmb3JtIHtcbiAgICBjb25zdHJ1Y3RvcihnbCwgeyBnZW9tZXRyeSwgcHJvZ3JhbSwgbW9kZSA9IGdsLlRSSUFOR0xFUywgZnJ1c3R1bUN1bGxlZCA9IHRydWUsIHJlbmRlck9yZGVyID0gMCB9ID0ge30pIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgaWYgKCFnbC5jYW52YXMpIGNvbnNvbGUuZXJyb3IoJ2dsIG5vdCBwYXNzZWQgYXMgZmlyc3QgYXJndW1lbnQgdG8gTWVzaCcpO1xuICAgICAgICB0aGlzLmdsID0gZ2w7XG4gICAgICAgIHRoaXMuaWQgPSBJRCsrO1xuICAgICAgICB0aGlzLmdlb21ldHJ5ID0gZ2VvbWV0cnk7XG4gICAgICAgIHRoaXMucHJvZ3JhbSA9IHByb2dyYW07XG4gICAgICAgIHRoaXMubW9kZSA9IG1vZGU7XG5cbiAgICAgICAgLy8gVXNlZCB0byBza2lwIGZydXN0dW0gY3VsbGluZ1xuICAgICAgICB0aGlzLmZydXN0dW1DdWxsZWQgPSBmcnVzdHVtQ3VsbGVkO1xuXG4gICAgICAgIC8vIE92ZXJyaWRlIHNvcnRpbmcgdG8gZm9yY2UgYW4gb3JkZXJcbiAgICAgICAgdGhpcy5yZW5kZXJPcmRlciA9IHJlbmRlck9yZGVyO1xuICAgICAgICB0aGlzLm1vZGVsVmlld01hdHJpeCA9IG5ldyBNYXQ0KCk7XG4gICAgICAgIHRoaXMubm9ybWFsTWF0cml4ID0gbmV3IE1hdDMoKTtcbiAgICAgICAgdGhpcy5iZWZvcmVSZW5kZXJDYWxsYmFja3MgPSBbXTtcbiAgICAgICAgdGhpcy5hZnRlclJlbmRlckNhbGxiYWNrcyA9IFtdO1xuICAgIH1cblxuICAgIG9uQmVmb3JlUmVuZGVyKGYpIHtcbiAgICAgICAgdGhpcy5iZWZvcmVSZW5kZXJDYWxsYmFja3MucHVzaChmKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgb25BZnRlclJlbmRlcihmKSB7XG4gICAgICAgIHRoaXMuYWZ0ZXJSZW5kZXJDYWxsYmFja3MucHVzaChmKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZHJhdyh7IGNhbWVyYSB9ID0ge30pIHtcbiAgICAgICAgaWYgKGNhbWVyYSkge1xuICAgICAgICAgICAgLy8gQWRkIGVtcHR5IG1hdHJpeCB1bmlmb3JtcyB0byBwcm9ncmFtIGlmIHVuc2V0XG4gICAgICAgICAgICBpZiAoIXRoaXMucHJvZ3JhbS51bmlmb3Jtcy5tb2RlbE1hdHJpeCkge1xuICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24odGhpcy5wcm9ncmFtLnVuaWZvcm1zLCB7XG4gICAgICAgICAgICAgICAgICAgIG1vZGVsTWF0cml4OiB7IHZhbHVlOiBudWxsIH0sXG4gICAgICAgICAgICAgICAgICAgIHZpZXdNYXRyaXg6IHsgdmFsdWU6IG51bGwgfSxcbiAgICAgICAgICAgICAgICAgICAgbW9kZWxWaWV3TWF0cml4OiB7IHZhbHVlOiBudWxsIH0sXG4gICAgICAgICAgICAgICAgICAgIG5vcm1hbE1hdHJpeDogeyB2YWx1ZTogbnVsbCB9LFxuICAgICAgICAgICAgICAgICAgICBwcm9qZWN0aW9uTWF0cml4OiB7IHZhbHVlOiBudWxsIH0sXG4gICAgICAgICAgICAgICAgICAgIGNhbWVyYVBvc2l0aW9uOiB7IHZhbHVlOiBudWxsIH0sXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFNldCB0aGUgbWF0cml4IHVuaWZvcm1zXG4gICAgICAgICAgICB0aGlzLnByb2dyYW0udW5pZm9ybXMucHJvamVjdGlvbk1hdHJpeC52YWx1ZSA9IGNhbWVyYS5wcm9qZWN0aW9uTWF0cml4O1xuICAgICAgICAgICAgdGhpcy5wcm9ncmFtLnVuaWZvcm1zLmNhbWVyYVBvc2l0aW9uLnZhbHVlID0gY2FtZXJhLndvcmxkUG9zaXRpb247XG4gICAgICAgICAgICB0aGlzLnByb2dyYW0udW5pZm9ybXMudmlld01hdHJpeC52YWx1ZSA9IGNhbWVyYS52aWV3TWF0cml4O1xuICAgICAgICAgICAgdGhpcy5tb2RlbFZpZXdNYXRyaXgubXVsdGlwbHkoY2FtZXJhLnZpZXdNYXRyaXgsIHRoaXMud29ybGRNYXRyaXgpO1xuICAgICAgICAgICAgdGhpcy5ub3JtYWxNYXRyaXguZ2V0Tm9ybWFsTWF0cml4KHRoaXMubW9kZWxWaWV3TWF0cml4KTtcbiAgICAgICAgICAgIHRoaXMucHJvZ3JhbS51bmlmb3Jtcy5tb2RlbE1hdHJpeC52YWx1ZSA9IHRoaXMud29ybGRNYXRyaXg7XG4gICAgICAgICAgICB0aGlzLnByb2dyYW0udW5pZm9ybXMubW9kZWxWaWV3TWF0cml4LnZhbHVlID0gdGhpcy5tb2RlbFZpZXdNYXRyaXg7XG4gICAgICAgICAgICB0aGlzLnByb2dyYW0udW5pZm9ybXMubm9ybWFsTWF0cml4LnZhbHVlID0gdGhpcy5ub3JtYWxNYXRyaXg7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5iZWZvcmVSZW5kZXJDYWxsYmFja3MuZm9yRWFjaCgoZikgPT4gZiAmJiBmKHsgbWVzaDogdGhpcywgY2FtZXJhIH0pKTtcblxuICAgICAgICAvLyBkZXRlcm1pbmUgaWYgZmFjZXMgbmVlZCB0byBiZSBmbGlwcGVkIC0gd2hlbiBtZXNoIHNjYWxlZCBuZWdhdGl2ZWx5XG4gICAgICAgIGxldCBmbGlwRmFjZXMgPSB0aGlzLnByb2dyYW0uY3VsbEZhY2UgJiYgdGhpcy53b3JsZE1hdHJpeC5kZXRlcm1pbmFudCgpIDwgMDtcbiAgICAgICAgdGhpcy5wcm9ncmFtLnVzZSh7IGZsaXBGYWNlcyB9KTtcbiAgICAgICAgdGhpcy5nZW9tZXRyeS5kcmF3KHsgbW9kZTogdGhpcy5tb2RlLCBwcm9ncmFtOiB0aGlzLnByb2dyYW0gfSk7XG4gICAgICAgIHRoaXMuYWZ0ZXJSZW5kZXJDYWxsYmFja3MuZm9yRWFjaCgoZikgPT4gZiAmJiBmKHsgbWVzaDogdGhpcywgY2FtZXJhIH0pKTtcbiAgICB9XG59XG4iXSwibmFtZXMiOlsiVHJhbnNmb3JtIiwiTWF0MyIsIk1hdDQiLCJJRCIsIk1lc2giLCJjb25zdHJ1Y3RvciIsImdsIiwiZ2VvbWV0cnkiLCJwcm9ncmFtIiwibW9kZSIsIlRSSUFOR0xFUyIsImZydXN0dW1DdWxsZWQiLCJyZW5kZXJPcmRlciIsImNhbnZhcyIsImNvbnNvbGUiLCJlcnJvciIsImlkIiwibW9kZWxWaWV3TWF0cml4Iiwibm9ybWFsTWF0cml4IiwiYmVmb3JlUmVuZGVyQ2FsbGJhY2tzIiwiYWZ0ZXJSZW5kZXJDYWxsYmFja3MiLCJvbkJlZm9yZVJlbmRlciIsImYiLCJwdXNoIiwib25BZnRlclJlbmRlciIsImRyYXciLCJjYW1lcmEiLCJ1bmlmb3JtcyIsIm1vZGVsTWF0cml4IiwiT2JqZWN0IiwiYXNzaWduIiwidmFsdWUiLCJ2aWV3TWF0cml4IiwicHJvamVjdGlvbk1hdHJpeCIsImNhbWVyYVBvc2l0aW9uIiwid29ybGRQb3NpdGlvbiIsIm11bHRpcGx5Iiwid29ybGRNYXRyaXgiLCJnZXROb3JtYWxNYXRyaXgiLCJmb3JFYWNoIiwibWVzaCIsImZsaXBGYWNlcyIsImN1bGxGYWNlIiwiZGV0ZXJtaW5hbnQiLCJ1c2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ogl/src/core/Mesh.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ogl/src/core/Program.js":
/*!**********************************************!*\
  !*** ./node_modules/ogl/src/core/Program.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Program: () => (/* binding */ Program)\n/* harmony export */ });\n// TODO: upload empty texture if null ? maybe not\n// TODO: upload identity matrix if null ?\n// TODO: sampler Cube\nlet ID = 1;\n// cache of typed arrays used to flatten uniform arrays\nconst arrayCacheF32 = {};\nclass Program {\n    constructor(gl, { vertex, fragment, uniforms = {}, transparent = false, cullFace = gl.BACK, frontFace = gl.CCW, depthTest = true, depthWrite = true, depthFunc = gl.LEQUAL } = {}){\n        if (!gl.canvas) console.error(\"gl not passed as first argument to Program\");\n        this.gl = gl;\n        this.uniforms = uniforms;\n        this.id = ID++;\n        if (!vertex) console.warn(\"vertex shader not supplied\");\n        if (!fragment) console.warn(\"fragment shader not supplied\");\n        // Store program state\n        this.transparent = transparent;\n        this.cullFace = cullFace;\n        this.frontFace = frontFace;\n        this.depthTest = depthTest;\n        this.depthWrite = depthWrite;\n        this.depthFunc = depthFunc;\n        this.blendFunc = {};\n        this.blendEquation = {};\n        this.stencilFunc = {};\n        this.stencilOp = {};\n        // set default blendFunc if transparent flagged\n        if (this.transparent && !this.blendFunc.src) {\n            if (this.gl.renderer.premultipliedAlpha) this.setBlendFunc(this.gl.ONE, this.gl.ONE_MINUS_SRC_ALPHA);\n            else this.setBlendFunc(this.gl.SRC_ALPHA, this.gl.ONE_MINUS_SRC_ALPHA);\n        }\n        // Create empty shaders and attach to program\n        this.vertexShader = gl.createShader(gl.VERTEX_SHADER);\n        this.fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n        this.program = gl.createProgram();\n        gl.attachShader(this.program, this.vertexShader);\n        gl.attachShader(this.program, this.fragmentShader);\n        // Compile shaders with source\n        this.setShaders({\n            vertex,\n            fragment\n        });\n    }\n    setShaders({ vertex, fragment }) {\n        if (vertex) {\n            // compile vertex shader and log errors\n            this.gl.shaderSource(this.vertexShader, vertex);\n            this.gl.compileShader(this.vertexShader);\n            if (this.gl.getShaderInfoLog(this.vertexShader) !== \"\") {\n                console.warn(`${this.gl.getShaderInfoLog(this.vertexShader)}\\nVertex Shader\\n${addLineNumbers(vertex)}`);\n            }\n        }\n        if (fragment) {\n            // compile fragment shader and log errors\n            this.gl.shaderSource(this.fragmentShader, fragment);\n            this.gl.compileShader(this.fragmentShader);\n            if (this.gl.getShaderInfoLog(this.fragmentShader) !== \"\") {\n                console.warn(`${this.gl.getShaderInfoLog(this.fragmentShader)}\\nFragment Shader\\n${addLineNumbers(fragment)}`);\n            }\n        }\n        // compile program and log errors\n        this.gl.linkProgram(this.program);\n        if (!this.gl.getProgramParameter(this.program, this.gl.LINK_STATUS)) {\n            return console.warn(this.gl.getProgramInfoLog(this.program));\n        }\n        // Get active uniform locations\n        this.uniformLocations = new Map();\n        let numUniforms = this.gl.getProgramParameter(this.program, this.gl.ACTIVE_UNIFORMS);\n        for(let uIndex = 0; uIndex < numUniforms; uIndex++){\n            let uniform = this.gl.getActiveUniform(this.program, uIndex);\n            this.uniformLocations.set(uniform, this.gl.getUniformLocation(this.program, uniform.name));\n            // split uniforms' names to separate array and struct declarations\n            const split = uniform.name.match(/(\\w+)/g);\n            uniform.uniformName = split[0];\n            uniform.nameComponents = split.slice(1);\n        }\n        // Get active attribute locations\n        this.attributeLocations = new Map();\n        const locations = [];\n        const numAttribs = this.gl.getProgramParameter(this.program, this.gl.ACTIVE_ATTRIBUTES);\n        for(let aIndex = 0; aIndex < numAttribs; aIndex++){\n            const attribute = this.gl.getActiveAttrib(this.program, aIndex);\n            const location = this.gl.getAttribLocation(this.program, attribute.name);\n            // Ignore special built-in inputs. eg gl_VertexID, gl_InstanceID\n            if (location === -1) continue;\n            locations[location] = attribute.name;\n            this.attributeLocations.set(attribute, location);\n        }\n        this.attributeOrder = locations.join(\"\");\n    }\n    setBlendFunc(src, dst, srcAlpha, dstAlpha) {\n        this.blendFunc.src = src;\n        this.blendFunc.dst = dst;\n        this.blendFunc.srcAlpha = srcAlpha;\n        this.blendFunc.dstAlpha = dstAlpha;\n        if (src) this.transparent = true;\n    }\n    setBlendEquation(modeRGB, modeAlpha) {\n        this.blendEquation.modeRGB = modeRGB;\n        this.blendEquation.modeAlpha = modeAlpha;\n    }\n    setStencilFunc(func, ref, mask) {\n        this.stencilRef = ref;\n        this.stencilFunc.func = func;\n        this.stencilFunc.ref = ref;\n        this.stencilFunc.mask = mask;\n    }\n    setStencilOp(stencilFail, depthFail, depthPass) {\n        this.stencilOp.stencilFail = stencilFail;\n        this.stencilOp.depthFail = depthFail;\n        this.stencilOp.depthPass = depthPass;\n    }\n    applyState() {\n        if (this.depthTest) this.gl.renderer.enable(this.gl.DEPTH_TEST);\n        else this.gl.renderer.disable(this.gl.DEPTH_TEST);\n        if (this.cullFace) this.gl.renderer.enable(this.gl.CULL_FACE);\n        else this.gl.renderer.disable(this.gl.CULL_FACE);\n        if (this.blendFunc.src) this.gl.renderer.enable(this.gl.BLEND);\n        else this.gl.renderer.disable(this.gl.BLEND);\n        if (this.cullFace) this.gl.renderer.setCullFace(this.cullFace);\n        this.gl.renderer.setFrontFace(this.frontFace);\n        this.gl.renderer.setDepthMask(this.depthWrite);\n        this.gl.renderer.setDepthFunc(this.depthFunc);\n        if (this.blendFunc.src) this.gl.renderer.setBlendFunc(this.blendFunc.src, this.blendFunc.dst, this.blendFunc.srcAlpha, this.blendFunc.dstAlpha);\n        this.gl.renderer.setBlendEquation(this.blendEquation.modeRGB, this.blendEquation.modeAlpha);\n        if (this.stencilFunc.func || this.stencilOp.stencilFail) this.gl.renderer.enable(this.gl.STENCIL_TEST);\n        else this.gl.renderer.disable(this.gl.STENCIL_TEST);\n        this.gl.renderer.setStencilFunc(this.stencilFunc.func, this.stencilFunc.ref, this.stencilFunc.mask);\n        this.gl.renderer.setStencilOp(this.stencilOp.stencilFail, this.stencilOp.depthFail, this.stencilOp.depthPass);\n    }\n    use({ flipFaces = false } = {}) {\n        let textureUnit = -1;\n        const programActive = this.gl.renderer.state.currentProgram === this.id;\n        // Avoid gl call if program already in use\n        if (!programActive) {\n            this.gl.useProgram(this.program);\n            this.gl.renderer.state.currentProgram = this.id;\n        }\n        // Set only the active uniforms found in the shader\n        this.uniformLocations.forEach((location, activeUniform)=>{\n            let uniform = this.uniforms[activeUniform.uniformName];\n            for (const component of activeUniform.nameComponents){\n                if (!uniform) break;\n                if (component in uniform) {\n                    uniform = uniform[component];\n                } else if (Array.isArray(uniform.value)) {\n                    break;\n                } else {\n                    uniform = undefined;\n                    break;\n                }\n            }\n            if (!uniform) {\n                return warn(`Active uniform ${activeUniform.name} has not been supplied`);\n            }\n            if (uniform && uniform.value === undefined) {\n                return warn(`${activeUniform.name} uniform is missing a value parameter`);\n            }\n            if (uniform.value.texture) {\n                textureUnit = textureUnit + 1;\n                // Check if texture needs to be updated\n                uniform.value.update(textureUnit);\n                return setUniform(this.gl, activeUniform.type, location, textureUnit);\n            }\n            // For texture arrays, set uniform as an array of texture units instead of just one\n            if (uniform.value.length && uniform.value[0].texture) {\n                const textureUnits = [];\n                uniform.value.forEach((value)=>{\n                    textureUnit = textureUnit + 1;\n                    value.update(textureUnit);\n                    textureUnits.push(textureUnit);\n                });\n                return setUniform(this.gl, activeUniform.type, location, textureUnits);\n            }\n            setUniform(this.gl, activeUniform.type, location, uniform.value);\n        });\n        this.applyState();\n        if (flipFaces) this.gl.renderer.setFrontFace(this.frontFace === this.gl.CCW ? this.gl.CW : this.gl.CCW);\n    }\n    remove() {\n        this.gl.deleteProgram(this.program);\n    }\n}\nfunction setUniform(gl, type, location, value) {\n    value = value.length ? flatten(value) : value;\n    const setValue = gl.renderer.state.uniformLocations.get(location);\n    // Avoid redundant uniform commands\n    if (value.length) {\n        if (setValue === undefined || setValue.length !== value.length) {\n            // clone array to store as cache\n            gl.renderer.state.uniformLocations.set(location, value.slice(0));\n        } else {\n            if (arraysEqual(setValue, value)) return;\n            // Update cached array values\n            setValue.set ? setValue.set(value) : setArray(setValue, value);\n            gl.renderer.state.uniformLocations.set(location, setValue);\n        }\n    } else {\n        if (setValue === value) return;\n        gl.renderer.state.uniformLocations.set(location, value);\n    }\n    switch(type){\n        case 5126:\n            return value.length ? gl.uniform1fv(location, value) : gl.uniform1f(location, value); // FLOAT\n        case 35664:\n            return gl.uniform2fv(location, value); // FLOAT_VEC2\n        case 35665:\n            return gl.uniform3fv(location, value); // FLOAT_VEC3\n        case 35666:\n            return gl.uniform4fv(location, value); // FLOAT_VEC4\n        case 35670:\n        case 5124:\n        case 35678:\n        case 36306:\n        case 35680:\n        case 36289:\n            return value.length ? gl.uniform1iv(location, value) : gl.uniform1i(location, value); // SAMPLER_CUBE\n        case 35671:\n        case 35667:\n            return gl.uniform2iv(location, value); // INT_VEC2\n        case 35672:\n        case 35668:\n            return gl.uniform3iv(location, value); // INT_VEC3\n        case 35673:\n        case 35669:\n            return gl.uniform4iv(location, value); // INT_VEC4\n        case 35674:\n            return gl.uniformMatrix2fv(location, false, value); // FLOAT_MAT2\n        case 35675:\n            return gl.uniformMatrix3fv(location, false, value); // FLOAT_MAT3\n        case 35676:\n            return gl.uniformMatrix4fv(location, false, value); // FLOAT_MAT4\n    }\n}\nfunction addLineNumbers(string) {\n    let lines = string.split(\"\\n\");\n    for(let i = 0; i < lines.length; i++){\n        lines[i] = i + 1 + \": \" + lines[i];\n    }\n    return lines.join(\"\\n\");\n}\nfunction flatten(a) {\n    const arrayLen = a.length;\n    const valueLen = a[0].length;\n    if (valueLen === undefined) return a;\n    const length = arrayLen * valueLen;\n    let value = arrayCacheF32[length];\n    if (!value) arrayCacheF32[length] = value = new Float32Array(length);\n    for(let i = 0; i < arrayLen; i++)value.set(a[i], i * valueLen);\n    return value;\n}\nfunction arraysEqual(a, b) {\n    if (a.length !== b.length) return false;\n    for(let i = 0, l = a.length; i < l; i++){\n        if (a[i] !== b[i]) return false;\n    }\n    return true;\n}\nfunction setArray(a, b) {\n    for(let i = 0, l = a.length; i < l; i++){\n        a[i] = b[i];\n    }\n}\nlet warnCount = 0;\nfunction warn(message) {\n    if (warnCount > 100) return;\n    console.warn(message);\n    warnCount++;\n    if (warnCount > 100) console.warn(\"More than 100 program warnings - stopping logs.\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ogl/src/core/Program.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ogl/src/core/Renderer.js":
/*!***********************************************!*\
  !*** ./node_modules/ogl/src/core/Renderer.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Renderer: () => (/* binding */ Renderer)\n/* harmony export */ });\n/* harmony import */ var _math_Vec3_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../math/Vec3.js */ \"(ssr)/./node_modules/ogl/src/math/Vec3.js\");\n\n// TODO: Handle context loss https://www.khronos.org/webgl/wiki/HandlingContextLost\n// Not automatic - devs to use these methods manually\n// gl.colorMask( colorMask, colorMask, colorMask, colorMask );\n// gl.clearColor( r, g, b, a );\n// gl.stencilMask( stencilMask );\n// gl.stencilFunc( stencilFunc, stencilRef, stencilMask );\n// gl.stencilOp( stencilFail, stencilZFail, stencilZPass );\n// gl.clearStencil( stencil );\nconst tempVec3 = /* @__PURE__ */ new _math_Vec3_js__WEBPACK_IMPORTED_MODULE_0__.Vec3();\nlet ID = 1;\nclass Renderer {\n    constructor({ canvas = document.createElement(\"canvas\"), width = 300, height = 150, dpr = 1, alpha = false, depth = true, stencil = false, antialias = false, premultipliedAlpha = false, preserveDrawingBuffer = false, powerPreference = \"default\", autoClear = true, webgl = 2 } = {}){\n        const attributes = {\n            alpha,\n            depth,\n            stencil,\n            antialias,\n            premultipliedAlpha,\n            preserveDrawingBuffer,\n            powerPreference\n        };\n        this.dpr = dpr;\n        this.alpha = alpha;\n        this.color = true;\n        this.depth = depth;\n        this.stencil = stencil;\n        this.premultipliedAlpha = premultipliedAlpha;\n        this.autoClear = autoClear;\n        this.id = ID++;\n        // Attempt WebGL2 unless forced to 1, if not supported fallback to WebGL1\n        if (webgl === 2) this.gl = canvas.getContext(\"webgl2\", attributes);\n        this.isWebgl2 = !!this.gl;\n        if (!this.gl) this.gl = canvas.getContext(\"webgl\", attributes);\n        if (!this.gl) console.error(\"unable to create webgl context\");\n        // Attach renderer to gl so that all classes have access to internal state functions\n        this.gl.renderer = this;\n        // initialise size values\n        this.setSize(width, height);\n        // gl state stores to avoid redundant calls on methods used internally\n        this.state = {};\n        this.state.blendFunc = {\n            src: this.gl.ONE,\n            dst: this.gl.ZERO\n        };\n        this.state.blendEquation = {\n            modeRGB: this.gl.FUNC_ADD\n        };\n        this.state.cullFace = false;\n        this.state.frontFace = this.gl.CCW;\n        this.state.depthMask = true;\n        this.state.depthFunc = this.gl.LEQUAL;\n        this.state.premultiplyAlpha = false;\n        this.state.flipY = false;\n        this.state.unpackAlignment = 4;\n        this.state.framebuffer = null;\n        this.state.viewport = {\n            x: 0,\n            y: 0,\n            width: null,\n            height: null\n        };\n        this.state.textureUnits = [];\n        this.state.activeTextureUnit = 0;\n        this.state.boundBuffer = null;\n        this.state.uniformLocations = new Map();\n        this.state.currentProgram = null;\n        // store requested extensions\n        this.extensions = {};\n        // Initialise extra format types\n        if (this.isWebgl2) {\n            this.getExtension(\"EXT_color_buffer_float\");\n            this.getExtension(\"OES_texture_float_linear\");\n        } else {\n            this.getExtension(\"OES_texture_float\");\n            this.getExtension(\"OES_texture_float_linear\");\n            this.getExtension(\"OES_texture_half_float\");\n            this.getExtension(\"OES_texture_half_float_linear\");\n            this.getExtension(\"OES_element_index_uint\");\n            this.getExtension(\"OES_standard_derivatives\");\n            this.getExtension(\"EXT_sRGB\");\n            this.getExtension(\"WEBGL_depth_texture\");\n            this.getExtension(\"WEBGL_draw_buffers\");\n        }\n        this.getExtension(\"WEBGL_compressed_texture_astc\");\n        this.getExtension(\"EXT_texture_compression_bptc\");\n        this.getExtension(\"WEBGL_compressed_texture_s3tc\");\n        this.getExtension(\"WEBGL_compressed_texture_etc1\");\n        this.getExtension(\"WEBGL_compressed_texture_pvrtc\");\n        this.getExtension(\"WEBKIT_WEBGL_compressed_texture_pvrtc\");\n        // Create method aliases using extension (WebGL1) or native if available (WebGL2)\n        this.vertexAttribDivisor = this.getExtension(\"ANGLE_instanced_arrays\", \"vertexAttribDivisor\", \"vertexAttribDivisorANGLE\");\n        this.drawArraysInstanced = this.getExtension(\"ANGLE_instanced_arrays\", \"drawArraysInstanced\", \"drawArraysInstancedANGLE\");\n        this.drawElementsInstanced = this.getExtension(\"ANGLE_instanced_arrays\", \"drawElementsInstanced\", \"drawElementsInstancedANGLE\");\n        this.createVertexArray = this.getExtension(\"OES_vertex_array_object\", \"createVertexArray\", \"createVertexArrayOES\");\n        this.bindVertexArray = this.getExtension(\"OES_vertex_array_object\", \"bindVertexArray\", \"bindVertexArrayOES\");\n        this.deleteVertexArray = this.getExtension(\"OES_vertex_array_object\", \"deleteVertexArray\", \"deleteVertexArrayOES\");\n        this.drawBuffers = this.getExtension(\"WEBGL_draw_buffers\", \"drawBuffers\", \"drawBuffersWEBGL\");\n        // Store device parameters\n        this.parameters = {};\n        this.parameters.maxTextureUnits = this.gl.getParameter(this.gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);\n        this.parameters.maxAnisotropy = this.getExtension(\"EXT_texture_filter_anisotropic\") ? this.gl.getParameter(this.getExtension(\"EXT_texture_filter_anisotropic\").MAX_TEXTURE_MAX_ANISOTROPY_EXT) : 0;\n    }\n    setSize(width, height) {\n        this.width = width;\n        this.height = height;\n        this.gl.canvas.width = width * this.dpr;\n        this.gl.canvas.height = height * this.dpr;\n        if (!this.gl.canvas.style) return;\n        Object.assign(this.gl.canvas.style, {\n            width: width + \"px\",\n            height: height + \"px\"\n        });\n    }\n    setViewport(width, height, x = 0, y = 0) {\n        if (this.state.viewport.width === width && this.state.viewport.height === height) return;\n        this.state.viewport.width = width;\n        this.state.viewport.height = height;\n        this.state.viewport.x = x;\n        this.state.viewport.y = y;\n        this.gl.viewport(x, y, width, height);\n    }\n    setScissor(width, height, x = 0, y = 0) {\n        this.gl.scissor(x, y, width, height);\n    }\n    enable(id) {\n        if (this.state[id] === true) return;\n        this.gl.enable(id);\n        this.state[id] = true;\n    }\n    disable(id) {\n        if (this.state[id] === false) return;\n        this.gl.disable(id);\n        this.state[id] = false;\n    }\n    setBlendFunc(src, dst, srcAlpha, dstAlpha) {\n        if (this.state.blendFunc.src === src && this.state.blendFunc.dst === dst && this.state.blendFunc.srcAlpha === srcAlpha && this.state.blendFunc.dstAlpha === dstAlpha) return;\n        this.state.blendFunc.src = src;\n        this.state.blendFunc.dst = dst;\n        this.state.blendFunc.srcAlpha = srcAlpha;\n        this.state.blendFunc.dstAlpha = dstAlpha;\n        if (srcAlpha !== undefined) this.gl.blendFuncSeparate(src, dst, srcAlpha, dstAlpha);\n        else this.gl.blendFunc(src, dst);\n    }\n    setBlendEquation(modeRGB, modeAlpha) {\n        modeRGB = modeRGB || this.gl.FUNC_ADD;\n        if (this.state.blendEquation.modeRGB === modeRGB && this.state.blendEquation.modeAlpha === modeAlpha) return;\n        this.state.blendEquation.modeRGB = modeRGB;\n        this.state.blendEquation.modeAlpha = modeAlpha;\n        if (modeAlpha !== undefined) this.gl.blendEquationSeparate(modeRGB, modeAlpha);\n        else this.gl.blendEquation(modeRGB);\n    }\n    setCullFace(value) {\n        if (this.state.cullFace === value) return;\n        this.state.cullFace = value;\n        this.gl.cullFace(value);\n    }\n    setFrontFace(value) {\n        if (this.state.frontFace === value) return;\n        this.state.frontFace = value;\n        this.gl.frontFace(value);\n    }\n    setDepthMask(value) {\n        if (this.state.depthMask === value) return;\n        this.state.depthMask = value;\n        this.gl.depthMask(value);\n    }\n    setDepthFunc(value) {\n        if (this.state.depthFunc === value) return;\n        this.state.depthFunc = value;\n        this.gl.depthFunc(value);\n    }\n    setStencilMask(value) {\n        if (this.state.stencilMask === value) return;\n        this.state.stencilMask = value;\n        this.gl.stencilMask(value);\n    }\n    setStencilFunc(func, ref, mask) {\n        if (this.state.stencilFunc === func && this.state.stencilRef === ref && this.state.stencilFuncMask === mask) return;\n        this.state.stencilFunc = func || this.gl.ALWAYS;\n        this.state.stencilRef = ref || 0;\n        this.state.stencilFuncMask = mask || 0;\n        this.gl.stencilFunc(func || this.gl.ALWAYS, ref || 0, mask || 0);\n    }\n    setStencilOp(stencilFail, depthFail, depthPass) {\n        if (this.state.stencilFail === stencilFail && this.state.stencilDepthFail === depthFail && this.state.stencilDepthPass === depthPass) return;\n        this.state.stencilFail = stencilFail;\n        this.state.stencilDepthFail = depthFail;\n        this.state.stencilDepthPass = depthPass;\n        this.gl.stencilOp(stencilFail, depthFail, depthPass);\n    }\n    activeTexture(value) {\n        if (this.state.activeTextureUnit === value) return;\n        this.state.activeTextureUnit = value;\n        this.gl.activeTexture(this.gl.TEXTURE0 + value);\n    }\n    bindFramebuffer({ target = this.gl.FRAMEBUFFER, buffer = null } = {}) {\n        if (this.state.framebuffer === buffer) return;\n        this.state.framebuffer = buffer;\n        this.gl.bindFramebuffer(target, buffer);\n    }\n    getExtension(extension, webgl2Func, extFunc) {\n        // if webgl2 function supported, return func bound to gl context\n        if (webgl2Func && this.gl[webgl2Func]) return this.gl[webgl2Func].bind(this.gl);\n        // fetch extension once only\n        if (!this.extensions[extension]) {\n            this.extensions[extension] = this.gl.getExtension(extension);\n        }\n        // return extension if no function requested\n        if (!webgl2Func) return this.extensions[extension];\n        // Return null if extension not supported\n        if (!this.extensions[extension]) return null;\n        // return extension function, bound to extension\n        return this.extensions[extension][extFunc].bind(this.extensions[extension]);\n    }\n    sortOpaque(a, b) {\n        if (a.renderOrder !== b.renderOrder) {\n            return a.renderOrder - b.renderOrder;\n        } else if (a.program.id !== b.program.id) {\n            return a.program.id - b.program.id;\n        } else if (a.zDepth !== b.zDepth) {\n            return a.zDepth - b.zDepth;\n        } else {\n            return b.id - a.id;\n        }\n    }\n    sortTransparent(a, b) {\n        if (a.renderOrder !== b.renderOrder) {\n            return a.renderOrder - b.renderOrder;\n        }\n        if (a.zDepth !== b.zDepth) {\n            return b.zDepth - a.zDepth;\n        } else {\n            return b.id - a.id;\n        }\n    }\n    sortUI(a, b) {\n        if (a.renderOrder !== b.renderOrder) {\n            return a.renderOrder - b.renderOrder;\n        } else if (a.program.id !== b.program.id) {\n            return a.program.id - b.program.id;\n        } else {\n            return b.id - a.id;\n        }\n    }\n    getRenderList({ scene, camera, frustumCull, sort }) {\n        let renderList = [];\n        if (camera && frustumCull) camera.updateFrustum();\n        // Get visible\n        scene.traverse((node)=>{\n            if (!node.visible) return true;\n            if (!node.draw) return;\n            if (frustumCull && node.frustumCulled && camera) {\n                if (!camera.frustumIntersectsMesh(node)) return;\n            }\n            renderList.push(node);\n        });\n        if (sort) {\n            const opaque = [];\n            const transparent = []; // depthTest true\n            const ui = []; // depthTest false\n            renderList.forEach((node)=>{\n                // Split into the 3 render groups\n                if (!node.program.transparent) {\n                    opaque.push(node);\n                } else if (node.program.depthTest) {\n                    transparent.push(node);\n                } else {\n                    ui.push(node);\n                }\n                node.zDepth = 0;\n                // Only calculate z-depth if renderOrder unset and depthTest is true\n                if (node.renderOrder !== 0 || !node.program.depthTest || !camera) return;\n                // update z-depth\n                node.worldMatrix.getTranslation(tempVec3);\n                tempVec3.applyMatrix4(camera.projectionViewMatrix);\n                node.zDepth = tempVec3.z;\n            });\n            opaque.sort(this.sortOpaque);\n            transparent.sort(this.sortTransparent);\n            ui.sort(this.sortUI);\n            renderList = opaque.concat(transparent, ui);\n        }\n        return renderList;\n    }\n    render({ scene, camera, target = null, update = true, sort = true, frustumCull = true, clear }) {\n        if (target === null) {\n            // make sure no render target bound so draws to canvas\n            this.bindFramebuffer();\n            this.setViewport(this.width * this.dpr, this.height * this.dpr);\n        } else {\n            // bind supplied render target and update viewport\n            this.bindFramebuffer(target);\n            this.setViewport(target.width, target.height);\n        }\n        if (clear || this.autoClear && clear !== false) {\n            // Ensure depth buffer writing is enabled so it can be cleared\n            if (this.depth && (!target || target.depth)) {\n                this.enable(this.gl.DEPTH_TEST);\n                this.setDepthMask(true);\n            }\n            // Same for stencil\n            if (this.stencil || !target || target.stencil) {\n                this.enable(this.gl.STENCIL_TEST);\n                this.setStencilMask(0xff);\n            }\n            this.gl.clear((this.color ? this.gl.COLOR_BUFFER_BIT : 0) | (this.depth ? this.gl.DEPTH_BUFFER_BIT : 0) | (this.stencil ? this.gl.STENCIL_BUFFER_BIT : 0));\n        }\n        // updates all scene graph matrices\n        if (update) scene.updateMatrixWorld();\n        // Update camera separately, in case not in scene graph\n        if (camera) camera.updateMatrixWorld();\n        // Get render list - entails culling and sorting\n        const renderList = this.getRenderList({\n            scene,\n            camera,\n            frustumCull,\n            sort\n        });\n        renderList.forEach((node)=>{\n            node.draw({\n                camera\n            });\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb2dsL3NyYy9jb3JlL1JlbmRlcmVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXVDO0FBRXZDLG1GQUFtRjtBQUVuRixxREFBcUQ7QUFDckQsOERBQThEO0FBQzlELCtCQUErQjtBQUMvQixpQ0FBaUM7QUFDakMsMERBQTBEO0FBQzFELDJEQUEyRDtBQUMzRCw4QkFBOEI7QUFFOUIsTUFBTUMsV0FBVyxhQUFhLEdBQUcsSUFBSUQsK0NBQUlBO0FBQ3pDLElBQUlFLEtBQUs7QUFFRixNQUFNQztJQUNUQyxZQUFZLEVBQ1JDLFNBQVNDLFNBQVNDLGFBQWEsQ0FBQyxTQUFTLEVBQ3pDQyxRQUFRLEdBQUcsRUFDWEMsU0FBUyxHQUFHLEVBQ1pDLE1BQU0sQ0FBQyxFQUNQQyxRQUFRLEtBQUssRUFDYkMsUUFBUSxJQUFJLEVBQ1pDLFVBQVUsS0FBSyxFQUNmQyxZQUFZLEtBQUssRUFDakJDLHFCQUFxQixLQUFLLEVBQzFCQyx3QkFBd0IsS0FBSyxFQUM3QkMsa0JBQWtCLFNBQVMsRUFDM0JDLFlBQVksSUFBSSxFQUNoQkMsUUFBUSxDQUFDLEVBQ1osR0FBRyxDQUFDLENBQUMsQ0FBRTtRQUNKLE1BQU1DLGFBQWE7WUFBRVQ7WUFBT0M7WUFBT0M7WUFBU0M7WUFBV0M7WUFBb0JDO1lBQXVCQztRQUFnQjtRQUNsSCxJQUFJLENBQUNQLEdBQUcsR0FBR0E7UUFDWCxJQUFJLENBQUNDLEtBQUssR0FBR0E7UUFDYixJQUFJLENBQUNVLEtBQUssR0FBRztRQUNiLElBQUksQ0FBQ1QsS0FBSyxHQUFHQTtRQUNiLElBQUksQ0FBQ0MsT0FBTyxHQUFHQTtRQUNmLElBQUksQ0FBQ0Usa0JBQWtCLEdBQUdBO1FBQzFCLElBQUksQ0FBQ0csU0FBUyxHQUFHQTtRQUNqQixJQUFJLENBQUNJLEVBQUUsR0FBR3BCO1FBRVYseUVBQXlFO1FBQ3pFLElBQUlpQixVQUFVLEdBQUcsSUFBSSxDQUFDSSxFQUFFLEdBQUdsQixPQUFPbUIsVUFBVSxDQUFDLFVB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WUFBRUM7WUFBT0M7WUFBUUM7WUFBYUM7UUFBSztRQUV6RUMsV0FBV1ksT0FBTyxDQUFDLENBQUNUO1lBQ2hCQSxLQUFLRSxJQUFJLENBQUM7Z0JBQUVSO1lBQU87UUFDdkI7SUFDSjtBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcGVyY2V2aWEvLi9ub2RlX21vZHVsZXMvb2dsL3NyYy9jb3JlL1JlbmRlcmVyLmpzPzFlYzkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVmVjMyB9IGZyb20gJy4uL21hdGgvVmVjMy5qcyc7XG5cbi8vIFRPRE86IEhhbmRsZSBjb250ZXh0IGxvc3MgaHR0cHM6Ly93d3cua2hyb25vcy5vcmcvd2ViZ2wvd2lraS9IYW5kbGluZ0NvbnRleHRMb3N0XG5cbi8vIE5vdCBhdXRvbWF0aWMgLSBkZXZzIHRvIHVzZSB0aGVzZSBtZXRob2RzIG1hbnVhbGx5XG4vLyBnbC5jb2xvck1hc2soIGNvbG9yTWFzaywgY29sb3JNYXNrLCBjb2xvck1hc2ssIGNvbG9yTWFzayApO1xuLy8gZ2wuY2xlYXJDb2xvciggciwgZywgYiwgYSApO1xuLy8gZ2wuc3RlbmNpbE1hc2soIHN0ZW5jaWxNYXNrICk7XG4vLyBnbC5zdGVuY2lsRnVuYyggc3RlbmNpbEZ1bmMsIHN0ZW5jaWxSZWYsIHN0ZW5jaWxNYXNrICk7XG4vLyBnbC5zdGVuY2lsT3AoIHN0ZW5jaWxGYWlsLCBzdGVuY2lsWkZhaWwsIHN0ZW5jaWxaUGFzcyApO1xuLy8gZ2wuY2xlYXJTdGVuY2lsKCBzdGVuY2lsICk7XG5cbmNvbnN0IHRlbXBWZWMzID0gLyogQF9fUFVSRV9fICovIG5ldyBWZWMzKCk7XG5sZXQgSUQgPSAxO1xuXG5leHBvcnQgY2xhc3MgUmVuZGVyZXIge1xuICAgIGNvbnN0cnVjdG9yKHtcbiAgICAgICAgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyksXG4gICAgICAgIHdpZHRoID0gMzAwLFxuICAgICAgICBoZWlnaHQgPSAxNTAsXG4gICAgICAgIGRwciA9IDEsXG4gICAgICAgIGFscGhhID0gZmFsc2UsXG4gICAgICAgIGRlcHRoID0gdHJ1ZSxcbiAgICAgICAgc3RlbmNpbCA9IGZhbHNlLFxuICAgICAgICBhbnRpYWxpYXMgPSBmYWxzZSxcbiAgICAgICAgcHJlbXVsdGlwbGllZEFscGhhID0gZmFsc2UsXG4gICAgICAgIHByZXNlcnZlRHJhd2luZ0J1ZmZlciA9IGZhbHNlLFxuICAgICAgICBwb3dlclByZWZlcmVuY2UgPSAnZGVmYXVsdCcsXG4gICAgICAgIGF1dG9DbGVhciA9IHRydWUsXG4gICAgICAgIHdlYmdsID0gMixcbiAgICB9ID0ge30pIHtcbiAgICAgICAgY29uc3QgYXR0cmlidXRlcyA9IHsgYWxwaGEsIGRlcHRoLCBzdGVuY2lsLCBhbnRpYWxpYXMsIHByZW11bHRpcGxpZWRBbHBoYSwgcHJlc2VydmVEcmF3aW5nQnVmZmVyLCBwb3dlclByZWZlcmVuY2UgfTtcbiAgICAgICAgdGhpcy5kcHIgPSBkcHI7XG4gICAgICAgIHRoaXMuYWxwaGEgPSBhbHBoYTtcbiAgICAgICAgdGhpcy5jb2xvciA9IHRydWU7XG4gICAgICAgIHRoaXMuZGVwdGggPSBkZXB0aDtcbiAgICAgICAgdGhpcy5zdGVuY2lsID0gc3RlbmNpbDtcbiAgICAgICAgdGhpcy5wcmVtdWx0aXBsaWVkQWxwaGEgPSBwcmVtdWx0aXBsaWVkQWxwaGE7XG4gICAgICAgIHRoaXMuYXV0b0NsZWFyID0gYXV0b0NsZWFyO1xuICAgICAgICB0aGlzLmlkID0gSUQrKztcblxuICAgICAgICAvLyBBdHRlbXB0IFdlYkdMMiB1bmxlc3MgZm9yY2VkIHRvIDEsIGlmIG5vdCBzdXBwb3J0ZWQgZmFsbGJhY2sgdG8gV2ViR0wxXG4gICAgICAgIGlmICh3ZWJnbCA9PT0gMikgdGhpcy5nbCA9IGNhbnZhcy5nZXRDb250ZXh0KCd3ZWJnbDInLCBhdHRyaWJ1dGVzKTtcbiAgICAgICAgdGhpcy5pc1dlYmdsMiA9ICEhdGhpcy5nbDtcbiAgICAgICAgaWYgKCF0aGlzLmdsKSB0aGlzLmdsID0gY2FudmFzLmdldENvbnRleHQoJ3dlYmdsJywgYXR0cmlidXRlcyk7XG4gICAgICAgIGlmICghdGhpcy5nbCkgY29uc29sZS5lcnJvcigndW5hYmxlIHRvIGNyZWF0ZSB3ZWJnbCBjb250ZXh0Jyk7XG5cbiAgICAgICAgLy8gQXR0YWNoIHJlbmRlcmVyIHRvIGdsIHNvIHRoYXQgYWxsIGNsYXNzZXMgaGF2ZSBhY2Nlc3MgdG8gaW50ZXJuYWwgc3RhdGUgZnVuY3Rpb25zXG4gICAgICAgIHRoaXMuZ2wucmVuZGVyZXIgPSB0aGlzO1xuXG4gICAgICAgIC8vIGluaXRpYWxpc2Ugc2l6ZSB2YWx1ZXNcbiAgICAgICAgdGhpcy5zZXRTaXplKHdpZHRoLCBoZWlnaHQpO1xuXG4gICAgICAgIC8vIGdsIHN0YXRlIHN0b3JlcyB0byBhdm9pZCByZWR1bmRhbnQgY2FsbHMgb24gbWV0aG9kcyB1c2VkIGludGVybmFsbHlcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHt9O1xuICAgICAgICB0aGlzLnN0YXRlLmJsZW5kRnVuYyA9IHsgc3JjOiB0aGlzLmdsLk9ORSwgZHN0OiB0aGlzLmdsLlpFUk8gfTtcbiAgICAgICAgdGhpcy5zdGF0ZS5ibGVuZEVxdWF0aW9uID0geyBtb2RlUkdCOiB0aGlzLmdsLkZVTkNfQUREIH07XG4gICAgICAgIHRoaXMuc3RhdGUuY3VsbEZhY2UgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5zdGF0ZS5mcm9udEZhY2UgPSB0aGlzLmdsLkNDVztcbiAgICAgICAgdGhpcy5zdGF0ZS5kZXB0aE1hc2sgPSB0cnVlO1xuICAgICAgICB0aGlzLnN0YXRlLmRlcHRoRnVuYyA9IHRoaXMuZ2wuTEVRVUFMO1xuICAgICAgICB0aGlzLnN0YXRlLnByZW11bHRpcGx5QWxwaGEgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5zdGF0ZS5mbGlwWSA9IGZhbHNlO1xuICAgICAgICB0aGlzLnN0YXRlLnVucGFja0FsaWdubWVudCA9IDQ7XG4gICAgICAgIHRoaXMuc3RhdGUuZnJhbWVidWZmZXIgPSBudWxsO1xuICAgICAgICB0aGlzLnN0YXRlLnZpZXdwb3J0ID0geyB4OiAwLCB5OiAwLCB3aWR0aDogbnVsbCwgaGVpZ2h0OiBudWxsIH07XG4gICAgICAgIHRoaXMuc3RhdGUudGV4dHVyZVVuaXRzID0gW107XG4gICAgICAgIHRoaXMuc3RhdGUuYWN0aXZlVGV4dHVyZVVuaXQgPSAwO1xuICAgICAgICB0aGlzLnN0YXRlLmJvdW5kQnVmZmVyID0gbnVsbDtcbiAgICAgICAgdGhpcy5zdGF0ZS51bmlmb3JtTG9jYXRpb25zID0gbmV3IE1hcCgpO1xuICAgICAgICB0aGlzLnN0YXRlLmN1cnJlbnRQcm9ncmFtID0gbnVsbDtcblxuICAgICAgICAvLyBzdG9yZSByZXF1ZXN0ZWQgZXh0ZW5zaW9uc1xuICAgICAgICB0aGlzLmV4dGVuc2lvbnMgPSB7fTtcblxuICAgICAgICAvLyBJbml0aWFsaXNlIGV4dHJhIGZvcm1hdCB0eXBlc1xuICAgICAgICBpZiAodGhpcy5pc1dlYmdsMikge1xuICAgICAgICAgICAgdGhpcy5nZXRFeHRlbnNpb24oJ0VYVF9jb2xvcl9idWZmZXJfZmxvYXQnKTtcbiAgICAgICAgICAgIHRoaXMuZ2V0RXh0ZW5zaW9uKCdPRVNfdGV4dHVyZV9mbG9hdF9saW5lYXInKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZ2V0RXh0ZW5zaW9uKCdPRVNfdGV4dHVyZV9mbG9hdCcpO1xuICAgICAgICAgICAgdGhpcy5nZXRFeHRlbnNpb24oJ09FU190ZXh0dXJlX2Zsb2F0X2xpbmVhcicpO1xuICAgICAgICAgICAgdGhpcy5nZXRFeHRlbnNpb24oJ09FU190ZXh0dXJlX2hhbGZfZmxvYXQnKTtcbiAgICAgICAgICAgIHRoaXMuZ2V0RXh0ZW5zaW9uKCdPRVNfdGV4dHVyZV9oYWxmX2Zsb2F0X2xpbmVhcicpO1xuICAgICAgICAgICAgdGhpcy5nZXRFeHRlbnNpb24oJ09FU19lbGVtZW50X2luZGV4X3VpbnQnKTtcbiAgICAgICAgICAgIHRoaXMuZ2V0RXh0ZW5zaW9uKCdPRVNfc3RhbmRhcmRfZGVyaXZhdGl2ZXMnKTtcbiAgICAgICAgICAgIHRoaXMuZ2V0RXh0ZW5zaW9uKCdFWFRfc1JHQicpO1xuICAgICAgICAgICAgdGhpcy5nZXRFeHRlbnNpb24oJ1dFQkdMX2RlcHRoX3RleHR1cmUnKTtcbiAgICAgICAgICAgIHRoaXMuZ2V0RXh0ZW5zaW9uKCdXRUJHTF9kcmF3X2J1ZmZlcnMnKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmdldEV4dGVuc2lvbignV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX2FzdGMnKTtcbiAgICAgICAgdGhpcy5nZXRFeHRlbnNpb24oJ0VYVF90ZXh0dXJlX2NvbXByZXNzaW9uX2JwdGMnKTtcbiAgICAgICAgdGhpcy5nZXRFeHRlbnNpb24oJ1dFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9zM3RjJyk7XG4gICAgICAgIHRoaXMuZ2V0RXh0ZW5zaW9uKCdXRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfZXRjMScpO1xuICAgICAgICB0aGlzLmdldEV4dGVuc2lvbignV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3B2cnRjJyk7XG4gICAgICAgIHRoaXMuZ2V0RXh0ZW5zaW9uKCdXRUJLSVRfV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3B2cnRjJyk7XG5cbiAgICAgICAgLy8gQ3JlYXRlIG1ldGhvZCBhbGlhc2VzIHVzaW5nIGV4dGVuc2lvbiAoV2ViR0wxKSBvciBuYXRpdmUgaWYgYXZhaWxhYmxlIChXZWJHTDIpXG4gICAgICAgIHRoaXMudmVydGV4QXR0cmliRGl2aXNvciA9IHRoaXMuZ2V0RXh0ZW5zaW9uKCdBTkdMRV9pbnN0YW5jZWRfYXJyYXlzJywgJ3ZlcnRleEF0dHJpYkRpdmlzb3InLCAndmVydGV4QXR0cmliRGl2aXNvckFOR0xFJyk7XG4gICAgICAgIHRoaXMuZHJhd0FycmF5c0luc3RhbmNlZCA9IHRoaXMuZ2V0RXh0ZW5zaW9uKCdBTkdMRV9pbnN0YW5jZWRfYXJyYXlzJywgJ2RyYXdBcnJheXNJbnN0YW5jZWQnLCAnZHJhd0FycmF5c0luc3RhbmNlZEFOR0xFJyk7XG4gICAgICAgIHRoaXMuZHJhd0VsZW1lbnRzSW5zdGFuY2VkID0gdGhpcy5nZXRFeHRlbnNpb24oJ0FOR0xFX2luc3RhbmNlZF9hcnJheXMnLCAnZHJhd0VsZW1lbnRzSW5zdGFuY2VkJywgJ2RyYXdFbGVtZW50c0luc3RhbmNlZEFOR0xFJyk7XG4gICAgICAgIHRoaXMuY3JlYXRlVmVydGV4QXJyYXkgPSB0aGlzLmdldEV4dGVuc2lvbignT0VTX3ZlcnRleF9hcnJheV9vYmplY3QnLCAnY3JlYXRlVmVydGV4QXJyYXknLCAnY3JlYXRlVmVydGV4QXJyYXlPRVMnKTtcbiAgICAgICAgdGhpcy5iaW5kVmVydGV4QXJyYXkgPSB0aGlzLmdldEV4dGVuc2lvbignT0VTX3ZlcnRleF9hcnJheV9vYmplY3QnLCAnYmluZFZlcnRleEFycmF5JywgJ2JpbmRWZXJ0ZXhBcnJheU9FUycpO1xuICAgICAgICB0aGlzLmRlbGV0ZVZlcnRleEFycmF5ID0gdGhpcy5nZXRFeHRlbnNpb24oJ09FU192ZXJ0ZXhfYXJyYXlfb2JqZWN0JywgJ2RlbGV0ZVZlcnRleEFycmF5JywgJ2RlbGV0ZVZlcnRleEFycmF5T0VTJyk7XG4gICAgICAgIHRoaXMuZHJhd0J1ZmZlcnMgPSB0aGlzLmdldEV4dGVuc2lvbignV0VCR0xfZHJhd19idWZmZXJzJywgJ2RyYXdCdWZmZXJzJywgJ2RyYXdCdWZmZXJzV0VCR0wnKTtcblxuICAgICAgICAvLyBTdG9yZSBkZXZpY2UgcGFyYW1ldGVyc1xuICAgICAgICB0aGlzLnBhcmFtZXRlcnMgPSB7fTtcbiAgICAgICAgdGhpcy5wYXJhbWV0ZXJzLm1heFRleHR1cmVVbml0cyA9IHRoaXMuZ2wuZ2V0UGFyYW1ldGVyKHRoaXMuZ2wuTUFYX0NPTUJJTkVEX1RFWFRVUkVfSU1BR0VfVU5JVFMpO1xuICAgICAgICB0aGlzLnBhcmFtZXRlcnMubWF4QW5pc290cm9weSA9IHRoaXMuZ2V0RXh0ZW5zaW9uKCdFWFRfdGV4dHVyZV9maWx0ZXJfYW5pc290cm9waWMnKVxuICAgICAgICAgICAgPyB0aGlzLmdsLmdldFBhcmFtZXRlcih0aGlzLmdldEV4dGVuc2lvbignRVhUX3RleHR1cmVfZmlsdGVyX2FuaXNvdHJvcGljJykuTUFYX1RFWFRVUkVfTUFYX0FOSVNPVFJPUFlfRVhUKVxuICAgICAgICAgICAgOiAwO1xuICAgIH1cblxuICAgIHNldFNpemUod2lkdGgsIGhlaWdodCkge1xuICAgICAgICB0aGlzLndpZHRoID0gd2lkdGg7XG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gaGVpZ2h0O1xuXG4gICAgICAgIHRoaXMuZ2wuY2FudmFzLndpZHRoID0gd2lkdGggKiB0aGlzLmRwcjtcbiAgICAgICAgdGhpcy5nbC5jYW52YXMuaGVpZ2h0ID0gaGVpZ2h0ICogdGhpcy5kcHI7XG5cbiAgICAgICAgaWYgKCF0aGlzLmdsLmNhbnZhcy5zdHlsZSkgcmV0dXJuO1xuICAgICAgICBPYmplY3QuYXNzaWduKHRoaXMuZ2wuY2FudmFzLnN0eWxlLCB7XG4gICAgICAgICAgICB3aWR0aDogd2lkdGggKyAncHgnLFxuICAgICAgICAgICAgaGVpZ2h0OiBoZWlnaHQgKyAncHgnLFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBzZXRWaWV3cG9ydCh3aWR0aCwgaGVpZ2h0LCB4ID0gMCwgeSA9IDApIHtcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUudmlld3BvcnQud2lkdGggPT09IHdpZHRoICYmIHRoaXMuc3RhdGUudmlld3BvcnQuaGVpZ2h0ID09PSBoZWlnaHQpIHJldHVybjtcbiAgICAgICAgdGhpcy5zdGF0ZS52aWV3cG9ydC53aWR0aCA9IHdpZHRoO1xuICAgICAgICB0aGlzLnN0YXRlLnZpZXdwb3J0LmhlaWdodCA9IGhlaWdodDtcbiAgICAgICAgdGhpcy5zdGF0ZS52aWV3cG9ydC54ID0geDtcbiAgICAgICAgdGhpcy5zdGF0ZS52aWV3cG9ydC55ID0geTtcbiAgICAgICAgdGhpcy5nbC52aWV3cG9ydCh4LCB5LCB3aWR0aCwgaGVpZ2h0KTtcbiAgICB9XG5cbiAgICBzZXRTY2lzc29yKHdpZHRoLCBoZWlnaHQsIHggPSAwLCB5ID0gMCkge1xuICAgICAgICB0aGlzLmdsLnNjaXNzb3IoeCwgeSwgd2lkdGgsIGhlaWdodCk7XG4gICAgfVxuXG4gICAgZW5hYmxlKGlkKSB7XG4gICAgICAgIGlmICh0aGlzLnN0YXRlW2lkXSA9PT0gdHJ1ZSkgcmV0dXJuO1xuICAgICAgICB0aGlzLmdsLmVuYWJsZShpZCk7XG4gICAgICAgIHRoaXMuc3RhdGVbaWRdID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBkaXNhYmxlKGlkKSB7XG4gICAgICAgIGlmICh0aGlzLnN0YXRlW2lkXSA9PT0gZmFsc2UpIHJldHVybjtcbiAgICAgICAgdGhpcy5nbC5kaXNhYmxlKGlkKTtcbiAgICAgICAgdGhpcy5zdGF0ZVtpZF0gPSBmYWxzZTtcbiAgICB9XG5cbiAgICBzZXRCbGVuZEZ1bmMoc3JjLCBkc3QsIHNyY0FscGhhLCBkc3RBbHBoYSkge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgICB0aGlzLnN0YXRlLmJsZW5kRnVuYy5zcmMgPT09IHNyYyAmJlxuICAgICAgICAgICAgdGhpcy5zdGF0ZS5ibGVuZEZ1bmMuZHN0ID09PSBkc3QgJiZcbiAgICAgICAgICAgIHRoaXMuc3RhdGUuYmxlbmRGdW5jLnNyY0FscGhhID09PSBzcmNBbHBoYSAmJlxuICAgICAgICAgICAgdGhpcy5zdGF0ZS5ibGVuZEZ1bmMuZHN0QWxwaGEgPT09IGRzdEFscGhhXG4gICAgICAgIClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdGhpcy5zdGF0ZS5ibGVuZEZ1bmMuc3JjID0gc3JjO1xuICAgICAgICB0aGlzLnN0YXRlLmJsZW5kRnVuYy5kc3QgPSBkc3Q7XG4gICAgICAgIHRoaXMuc3RhdGUuYmxlbmRGdW5jLnNyY0FscGhhID0gc3JjQWxwaGE7XG4gICAgICAgIHRoaXMuc3RhdGUuYmxlbmRGdW5jLmRzdEFscGhhID0gZHN0QWxwaGE7XG4gICAgICAgIGlmIChzcmNBbHBoYSAhPT0gdW5kZWZpbmVkKSB0aGlzLmdsLmJsZW5kRnVuY1NlcGFyYXRlKHNyYywgZHN0LCBzcmNBbHBoYSwgZHN0QWxwaGEpO1xuICAgICAgICBlbHNlIHRoaXMuZ2wuYmxlbmRGdW5jKHNyYywgZHN0KTtcbiAgICB9XG5cbiAgICBzZXRCbGVuZEVxdWF0aW9uKG1vZGVSR0IsIG1vZGVBbHBoYSkge1xuICAgICAgICBtb2RlUkdCID0gbW9kZVJHQiB8fCB0aGlzLmdsLkZVTkNfQUREO1xuICAgICAgICBpZiAodGhpcy5zdGF0ZS5ibGVuZEVxdWF0aW9uLm1vZGVSR0IgPT09IG1vZGVSR0IgJiYgdGhpcy5zdGF0ZS5ibGVuZEVxdWF0aW9uLm1vZGVBbHBoYSA9PT0gbW9kZUFscGhhKSByZXR1cm47XG4gICAgICAgIHRoaXMuc3RhdGUuYmxlbmRFcXVhdGlvbi5tb2RlUkdCID0gbW9kZVJHQjtcbiAgICAgICAgdGhpcy5zdGF0ZS5ibGVuZEVxdWF0aW9uLm1vZGVBbHBoYSA9IG1vZGVBbHBoYTtcbiAgICAgICAgaWYgKG1vZGVBbHBoYSAhPT0gdW5kZWZpbmVkKSB0aGlzLmdsLmJsZW5kRXF1YXRpb25TZXBhcmF0ZShtb2RlUkdCLCBtb2RlQWxwaGEpO1xuICAgICAgICBlbHNlIHRoaXMuZ2wuYmxlbmRFcXVhdGlvbihtb2RlUkdCKTtcbiAgICB9XG5cbiAgICBzZXRDdWxsRmFjZSh2YWx1ZSkge1xuICAgICAgICBpZiAodGhpcy5zdGF0ZS5jdWxsRmFjZSA9PT0gdmFsdWUpIHJldHVybjtcbiAgICAgICAgdGhpcy5zdGF0ZS5jdWxsRmFjZSA9IHZhbHVlO1xuICAgICAgICB0aGlzLmdsLmN1bGxGYWNlKHZhbHVlKTtcbiAgICB9XG5cbiAgICBzZXRGcm9udEZhY2UodmFsdWUpIHtcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUuZnJvbnRGYWNlID09PSB2YWx1ZSkgcmV0dXJuO1xuICAgICAgICB0aGlzLnN0YXRlLmZyb250RmFjZSA9IHZhbHVlO1xuICAgICAgICB0aGlzLmdsLmZyb250RmFjZSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgc2V0RGVwdGhNYXNrKHZhbHVlKSB7XG4gICAgICAgIGlmICh0aGlzLnN0YXRlLmRlcHRoTWFzayA9PT0gdmFsdWUpIHJldHVybjtcbiAgICAgICAgdGhpcy5zdGF0ZS5kZXB0aE1hc2sgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5nbC5kZXB0aE1hc2sodmFsdWUpO1xuICAgIH1cblxuICAgIHNldERlcHRoRnVuYyh2YWx1ZSkge1xuICAgICAgICBpZiAodGhpcy5zdGF0ZS5kZXB0aEZ1bmMgPT09IHZhbHVlKSByZXR1cm47XG4gICAgICAgIHRoaXMuc3RhdGUuZGVwdGhGdW5jID0gdmFsdWU7XG4gICAgICAgIHRoaXMuZ2wuZGVwdGhGdW5jKHZhbHVlKTtcbiAgICB9XG5cbiAgICBzZXRTdGVuY2lsTWFzayh2YWx1ZSkge1xuICAgICAgICBpZih0aGlzLnN0YXRlLnN0ZW5jaWxNYXNrID09PSB2YWx1ZSkgcmV0dXJuO1xuICAgICAgICB0aGlzLnN0YXRlLnN0ZW5jaWxNYXNrID0gdmFsdWU7XG4gICAgICAgIHRoaXMuZ2wuc3RlbmNpbE1hc2sodmFsdWUpXG4gICAgfVxuXG4gICAgc2V0U3RlbmNpbEZ1bmMoZnVuYywgcmVmLCBtYXNrKSB7XG5cbiAgICAgICAgaWYoKHRoaXMuc3RhdGUuc3RlbmNpbEZ1bmMgPT09IGZ1bmMpICYmXG4gICAgICAgICAgICAodGhpcy5zdGF0ZS5zdGVuY2lsUmVmID09PSByZWYpICYmXG4gICAgICAgICAgICAodGhpcy5zdGF0ZS5zdGVuY2lsRnVuY01hc2sgPT09IG1hc2spXG4gICAgICAgICkgcmV0dXJuO1xuXG4gICAgICAgIHRoaXMuc3RhdGUuc3RlbmNpbEZ1bmMgPSBmdW5jIHx8IHRoaXMuZ2wuQUxXQVlTO1xuICAgICAgICB0aGlzLnN0YXRlLnN0ZW5jaWxSZWYgPSByZWYgfHwgMDtcbiAgICAgICAgdGhpcy5zdGF0ZS5zdGVuY2lsRnVuY01hc2sgPSBtYXNrIHx8IDA7XG5cbiAgICAgICAgdGhpcy5nbC5zdGVuY2lsRnVuYyhmdW5jIHx8IHRoaXMuZ2wuQUxXQVlTLCByZWYgfHwgMCwgbWFzayB8fCAwKTtcbiAgICB9XG5cbiAgICBzZXRTdGVuY2lsT3Aoc3RlbmNpbEZhaWwsIGRlcHRoRmFpbCwgZGVwdGhQYXNzKSB7XG5cbiAgICAgICAgaWYodGhpcy5zdGF0ZS5zdGVuY2lsRmFpbCA9PT0gc3RlbmNpbEZhaWwgJiZcbiAgICAgICAgICAgIHRoaXMuc3RhdGUuc3RlbmNpbERlcHRoRmFpbCA9PT0gZGVwdGhGYWlsICYmXG4gICAgICAgICAgICB0aGlzLnN0YXRlLnN0ZW5jaWxEZXB0aFBhc3MgPT09IGRlcHRoUGFzc1xuICAgICAgICApIHJldHVybjtcblxuICAgICAgICB0aGlzLnN0YXRlLnN0ZW5jaWxGYWlsID0gc3RlbmNpbEZhaWw7XG4gICAgICAgIHRoaXMuc3RhdGUuc3RlbmNpbERlcHRoRmFpbCA9IGRlcHRoRmFpbDtcbiAgICAgICAgdGhpcy5zdGF0ZS5zdGVuY2lsRGVwdGhQYXNzID0gZGVwdGhQYXNzO1xuICAgICAgICBcbiAgICAgICAgdGhpcy5nbC5zdGVuY2lsT3Aoc3RlbmNpbEZhaWwsIGRlcHRoRmFpbCwgZGVwdGhQYXNzKTtcbiAgICAgICAgXG4gICAgfVxuXG4gICAgYWN0aXZlVGV4dHVyZSh2YWx1ZSkge1xuICAgICAgICBpZiAodGhpcy5zdGF0ZS5hY3RpdmVUZXh0dXJlVW5pdCA9PT0gdmFsdWUpIHJldHVybjtcbiAgICAgICAgdGhpcy5zdGF0ZS5hY3RpdmVUZXh0dXJlVW5pdCA9IHZhbHVlO1xuICAgICAgICB0aGlzLmdsLmFjdGl2ZVRleHR1cmUodGhpcy5nbC5URVhUVVJFMCArIHZhbHVlKTtcbiAgICB9XG5cbiAgICBiaW5kRnJhbWVidWZmZXIoeyB0YXJnZXQgPSB0aGlzLmdsLkZSQU1FQlVGRkVSLCBidWZmZXIgPSBudWxsIH0gPSB7fSkge1xuICAgICAgICBpZiAodGhpcy5zdGF0ZS5mcmFtZWJ1ZmZlciA9PT0gYnVmZmVyKSByZXR1cm47XG4gICAgICAgIHRoaXMuc3RhdGUuZnJhbWVidWZmZXIgPSBidWZmZXI7XG4gICAgICAgIHRoaXMuZ2wuYmluZEZyYW1lYnVmZmVyKHRhcmdldCwgYnVmZmVyKTtcbiAgICB9XG5cbiAgICBnZXRFeHRlbnNpb24oZXh0ZW5zaW9uLCB3ZWJnbDJGdW5jLCBleHRGdW5jKSB7XG4gICAgICAgIC8vIGlmIHdlYmdsMiBmdW5jdGlvbiBzdXBwb3J0ZWQsIHJldHVybiBmdW5jIGJvdW5kIHRvIGdsIGNvbnRleHRcbiAgICAgICAgaWYgKHdlYmdsMkZ1bmMgJiYgdGhpcy5nbFt3ZWJnbDJGdW5jXSkgcmV0dXJuIHRoaXMuZ2xbd2ViZ2wyRnVuY10uYmluZCh0aGlzLmdsKTtcblxuICAgICAgICAvLyBmZXRjaCBleHRlbnNpb24gb25jZSBvbmx5XG4gICAgICAgIGlmICghdGhpcy5leHRlbnNpb25zW2V4dGVuc2lvbl0pIHtcbiAgICAgICAgICAgIHRoaXMuZXh0ZW5zaW9uc1tleHRlbnNpb25dID0gdGhpcy5nbC5nZXRFeHRlbnNpb24oZXh0ZW5zaW9uKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHJldHVybiBleHRlbnNpb24gaWYgbm8gZnVuY3Rpb24gcmVxdWVzdGVkXG4gICAgICAgIGlmICghd2ViZ2wyRnVuYykgcmV0dXJuIHRoaXMuZXh0ZW5zaW9uc1tleHRlbnNpb25dO1xuXG4gICAgICAgIC8vIFJldHVybiBudWxsIGlmIGV4dGVuc2lvbiBub3Qgc3VwcG9ydGVkXG4gICAgICAgIGlmICghdGhpcy5leHRlbnNpb25zW2V4dGVuc2lvbl0pIHJldHVybiBudWxsO1xuXG4gICAgICAgIC8vIHJldHVybiBleHRlbnNpb24gZnVuY3Rpb24sIGJvdW5kIHRvIGV4dGVuc2lvblxuICAgICAgICByZXR1cm4gdGhpcy5leHRlbnNpb25zW2V4dGVuc2lvbl1bZXh0RnVuY10uYmluZCh0aGlzLmV4dGVuc2lvbnNbZXh0ZW5zaW9uXSk7XG4gICAgfVxuXG4gICAgc29ydE9wYXF1ZShhLCBiKSB7XG4gICAgICAgIGlmIChhLnJlbmRlck9yZGVyICE9PSBiLnJlbmRlck9yZGVyKSB7XG4gICAgICAgICAgICByZXR1cm4gYS5yZW5kZXJPcmRlciAtIGIucmVuZGVyT3JkZXI7XG4gICAgICAgIH0gZWxzZSBpZiAoYS5wcm9ncmFtLmlkICE9PSBiLnByb2dyYW0uaWQpIHtcbiAgICAgICAgICAgIHJldHVybiBhLnByb2dyYW0uaWQgLSBiLnByb2dyYW0uaWQ7XG4gICAgICAgIH0gZWxzZSBpZiAoYS56RGVwdGggIT09IGIuekRlcHRoKSB7XG4gICAgICAgICAgICByZXR1cm4gYS56RGVwdGggLSBiLnpEZXB0aDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBiLmlkIC0gYS5pZDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHNvcnRUcmFuc3BhcmVudChhLCBiKSB7XG4gICAgICAgIGlmIChhLnJlbmRlck9yZGVyICE9PSBiLnJlbmRlck9yZGVyKSB7XG4gICAgICAgICAgICByZXR1cm4gYS5yZW5kZXJPcmRlciAtIGIucmVuZGVyT3JkZXI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGEuekRlcHRoICE9PSBiLnpEZXB0aCkge1xuICAgICAgICAgICAgcmV0dXJuIGIuekRlcHRoIC0gYS56RGVwdGg7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gYi5pZCAtIGEuaWQ7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzb3J0VUkoYSwgYikge1xuICAgICAgICBpZiAoYS5yZW5kZXJPcmRlciAhPT0gYi5yZW5kZXJPcmRlcikge1xuICAgICAgICAgICAgcmV0dXJuIGEucmVuZGVyT3JkZXIgLSBiLnJlbmRlck9yZGVyO1xuICAgICAgICB9IGVsc2UgaWYgKGEucHJvZ3JhbS5pZCAhPT0gYi5wcm9ncmFtLmlkKSB7XG4gICAgICAgICAgICByZXR1cm4gYS5wcm9ncmFtLmlkIC0gYi5wcm9ncmFtLmlkO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGIuaWQgLSBhLmlkO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0UmVuZGVyTGlzdCh7IHNjZW5lLCBjYW1lcmEsIGZydXN0dW1DdWxsLCBzb3J0IH0pIHtcbiAgICAgICAgbGV0IHJlbmRlckxpc3QgPSBbXTtcblxuICAgICAgICBpZiAoY2FtZXJhICYmIGZydXN0dW1DdWxsKSBjYW1lcmEudXBkYXRlRnJ1c3R1bSgpO1xuXG4gICAgICAgIC8vIEdldCB2aXNpYmxlXG4gICAgICAgIHNjZW5lLnRyYXZlcnNlKChub2RlKSA9PiB7XG4gICAgICAgICAgICBpZiAoIW5vZGUudmlzaWJsZSkgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICBpZiAoIW5vZGUuZHJhdykgcmV0dXJuO1xuXG4gICAgICAgICAgICBpZiAoZnJ1c3R1bUN1bGwgJiYgbm9kZS5mcnVzdHVtQ3VsbGVkICYmIGNhbWVyYSkge1xuICAgICAgICAgICAgICAgIGlmICghY2FtZXJhLmZydXN0dW1JbnRlcnNlY3RzTWVzaChub2RlKSkgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZW5kZXJMaXN0LnB1c2gobm9kZSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChzb3J0KSB7XG4gICAgICAgICAgICBjb25zdCBvcGFxdWUgPSBbXTtcbiAgICAgICAgICAgIGNvbnN0IHRyYW5zcGFyZW50ID0gW107IC8vIGRlcHRoVGVzdCB0cnVlXG4gICAgICAgICAgICBjb25zdCB1aSA9IFtdOyAvLyBkZXB0aFRlc3QgZmFsc2VcblxuICAgICAgICAgICAgcmVuZGVyTGlzdC5mb3JFYWNoKChub2RlKSA9PiB7XG4gICAgICAgICAgICAgICAgLy8gU3BsaXQgaW50byB0aGUgMyByZW5kZXIgZ3JvdXBzXG4gICAgICAgICAgICAgICAgaWYgKCFub2RlLnByb2dyYW0udHJhbnNwYXJlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgb3BhcXVlLnB1c2gobm9kZSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChub2RlLnByb2dyYW0uZGVwdGhUZXN0KSB7XG4gICAgICAgICAgICAgICAgICAgIHRyYW5zcGFyZW50LnB1c2gobm9kZSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdWkucHVzaChub2RlKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBub2RlLnpEZXB0aCA9IDA7XG5cbiAgICAgICAgICAgICAgICAvLyBPbmx5IGNhbGN1bGF0ZSB6LWRlcHRoIGlmIHJlbmRlck9yZGVyIHVuc2V0IGFuZCBkZXB0aFRlc3QgaXMgdHJ1ZVxuICAgICAgICAgICAgICAgIGlmIChub2RlLnJlbmRlck9yZGVyICE9PSAwIHx8ICFub2RlLnByb2dyYW0uZGVwdGhUZXN0IHx8ICFjYW1lcmEpIHJldHVybjtcblxuICAgICAgICAgICAgICAgIC8vIHVwZGF0ZSB6LWRlcHRoXG4gICAgICAgICAgICAgICAgbm9kZS53b3JsZE1hdHJpeC5nZXRUcmFuc2xhdGlvbih0ZW1wVmVjMyk7XG4gICAgICAgICAgICAgICAgdGVtcFZlYzMuYXBwbHlNYXRyaXg0KGNhbWVyYS5wcm9qZWN0aW9uVmlld01hdHJpeCk7XG4gICAgICAgICAgICAgICAgbm9kZS56RGVwdGggPSB0ZW1wVmVjMy56O1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIG9wYXF1ZS5zb3J0KHRoaXMuc29ydE9wYXF1ZSk7XG4gICAgICAgICAgICB0cmFuc3BhcmVudC5zb3J0KHRoaXMuc29ydFRyYW5zcGFyZW50KTtcbiAgICAgICAgICAgIHVpLnNvcnQodGhpcy5zb3J0VUkpO1xuXG4gICAgICAgICAgICByZW5kZXJMaXN0ID0gb3BhcXVlLmNvbmNhdCh0cmFuc3BhcmVudCwgdWkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlbmRlckxpc3Q7XG4gICAgfVxuXG4gICAgcmVuZGVyKHsgc2NlbmUsIGNhbWVyYSwgdGFyZ2V0ID0gbnVsbCwgdXBkYXRlID0gdHJ1ZSwgc29ydCA9IHRydWUsIGZydXN0dW1DdWxsID0gdHJ1ZSwgY2xlYXIgfSkge1xuICAgICAgICBpZiAodGFyZ2V0ID09PSBudWxsKSB7XG4gICAgICAgICAgICAvLyBtYWtlIHN1cmUgbm8gcmVuZGVyIHRhcmdldCBib3VuZCBzbyBkcmF3cyB0byBjYW52YXNcbiAgICAgICAgICAgIHRoaXMuYmluZEZyYW1lYnVmZmVyKCk7XG4gICAgICAgICAgICB0aGlzLnNldFZpZXdwb3J0KHRoaXMud2lkdGggKiB0aGlzLmRwciwgdGhpcy5oZWlnaHQgKiB0aGlzLmRwcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBiaW5kIHN1cHBsaWVkIHJlbmRlciB0YXJnZXQgYW5kIHVwZGF0ZSB2aWV3cG9ydFxuICAgICAgICAgICAgdGhpcy5iaW5kRnJhbWVidWZmZXIodGFyZ2V0KTtcbiAgICAgICAgICAgIHRoaXMuc2V0Vmlld3BvcnQodGFyZ2V0LndpZHRoLCB0YXJnZXQuaGVpZ2h0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjbGVhciB8fCAodGhpcy5hdXRvQ2xlYXIgJiYgY2xlYXIgIT09IGZhbHNlKSkge1xuICAgICAgICAgICAgLy8gRW5zdXJlIGRlcHRoIGJ1ZmZlciB3cml0aW5nIGlzIGVuYWJsZWQgc28gaXQgY2FuIGJlIGNsZWFyZWRcbiAgICAgICAgICAgIGlmICh0aGlzLmRlcHRoICYmICghdGFyZ2V0IHx8IHRhcmdldC5kZXB0aCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVuYWJsZSh0aGlzLmdsLkRFUFRIX1RFU1QpO1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0RGVwdGhNYXNrKHRydWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBTYW1lIGZvciBzdGVuY2lsXG4gICAgICAgICAgICBpZih0aGlzLnN0ZW5jaWwgfHwgKCF0YXJnZXQgfHwgdGFyZ2V0LnN0ZW5jaWwpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lbmFibGUodGhpcy5nbC5TVEVOQ0lMX1RFU1QpO1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RlbmNpbE1hc2soMHhmZilcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5nbC5jbGVhcihcbiAgICAgICAgICAgICAgICAodGhpcy5jb2xvciA/IHRoaXMuZ2wuQ09MT1JfQlVGRkVSX0JJVCA6IDApIHxcbiAgICAgICAgICAgICAgICAgICAgKHRoaXMuZGVwdGggPyB0aGlzLmdsLkRFUFRIX0JVRkZFUl9CSVQgOiAwKSB8XG4gICAgICAgICAgICAgICAgICAgICh0aGlzLnN0ZW5jaWwgPyB0aGlzLmdsLlNURU5DSUxfQlVGRkVSX0JJVCA6IDApXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gdXBkYXRlcyBhbGwgc2NlbmUgZ3JhcGggbWF0cmljZXNcbiAgICAgICAgaWYgKHVwZGF0ZSkgc2NlbmUudXBkYXRlTWF0cml4V29ybGQoKTtcblxuICAgICAgICAvLyBVcGRhdGUgY2FtZXJhIHNlcGFyYXRlbHksIGluIGNhc2Ugbm90IGluIHNjZW5lIGdyYXBoXG4gICAgICAgIGlmIChjYW1lcmEpIGNhbWVyYS51cGRhdGVNYXRyaXhXb3JsZCgpO1xuXG4gICAgICAgIC8vIEdldCByZW5kZXIgbGlzdCAtIGVudGFpbHMgY3VsbGluZyBhbmQgc29ydGluZ1xuICAgICAgICBjb25zdCByZW5kZXJMaXN0ID0gdGhpcy5nZXRSZW5kZXJMaXN0KHsgc2NlbmUsIGNhbWVyYSwgZnJ1c3R1bUN1bGwsIHNvcnQgfSk7XG5cbiAgICAgICAgcmVuZGVyTGlzdC5mb3JFYWNoKChub2RlKSA9PiB7XG4gICAgICAgICAgICBub2RlLmRyYXcoeyBjYW1lcmEgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbiJdLCJuYW1lcyI6WyJWZWMzIiwidGVtcFZlYzMiLCJJRCIsIlJlbmRlcmVyIiwiY29uc3RydWN0b3IiLCJjYW52YXMiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJ3aWR0aCIsImhlaWdodCIsImRwciIsImFscGhhIiwiZGVwdGgiLCJzdGVuY2lsIiwiYW50aWFsaWFzIiwicHJlbXVsdGlwbGllZEFscGhhIiwicHJlc2VydmVEcmF3aW5nQnVmZmVyIiwicG93ZXJQcmVmZXJlbmNlIiwiYXV0b0NsZWFyIiwid2ViZ2wiLCJhdHRyaWJ1dGVzIiwiY29sb3IiLCJpZCIsImdsIiwiZ2V0Q29udGV4dCIsImlzV2ViZ2wyIiwiY29uc29sZSIsImVycm9yIiwicmVuZGVyZXIiLCJzZXRTaXplIiwic3RhdGUiLCJibGVuZEZ1bmMiLCJzcmMiLCJPTkUiLCJkc3QiLCJaRVJPIiwiYmxlbmRFcXVhdGlvbiIsIm1vZGVSR0IiLCJGVU5DX0FERCIsImN1bGxGYWNlIiwiZnJvbnRGYWNlIiwiQ0NXIiwiZGVwdGhNYXNrIiwiZGVwdGhGdW5jIiwiTEVRVUFMIiwicHJlbXVsdGlwbHlBbHBoYSIsImZsaXBZIiwidW5wYWNrQWxpZ25tZW50IiwiZnJhbWVidWZmZXIiLCJ2aWV3cG9ydCIsIngiLCJ5IiwidGV4dHVyZVVuaXRzIiwiYWN0aXZlVGV4dHVyZVVuaXQiLCJib3VuZEJ1ZmZlciIsInVuaWZvcm1Mb2NhdGlvbnMiLCJNYXAiLCJjdXJyZW50UHJvZ3JhbSIsImV4dGVuc2lvbnMiLCJnZXRFeHRlbnNpb24iLCJ2ZXJ0ZXhBdHRyaWJEaXZpc29yIiwiZHJhd0FycmF5c0luc3RhbmNlZCIsImRyYXdFbGVtZW50c0luc3RhbmNlZCIsImNyZWF0ZVZlcnRleEFycmF5IiwiYmluZFZlcnRleEFycmF5IiwiZGVsZXRlVmVydGV4QXJyYXkiLCJkcmF3QnVmZmVycyIsInBhcmFtZXRlcnMiLCJtYXhUZXh0dXJlVW5pdHMiLCJnZXRQYXJhbWV0ZXIiLCJNQVhfQ09NQklORURfVEVYVFVSRV9JTUFHRV9VTklUUyIsIm1heEFuaXNvdHJvcHkiLCJNQVhfVEVYVFVSRV9NQVhfQU5JU09UUk9QWV9FWFQiLCJzdHlsZSIsIk9iamVjdCIsImFzc2lnbiIsInNldFZpZXdwb3J0Iiwic2V0U2Npc3NvciIsInNjaXNzb3IiLCJlbmFibGUiLCJkaXNhYmxlIiwic2V0QmxlbmRGdW5jIiwic3JjQWxwaGEiLCJkc3RBbHBoYSIsInVuZGVmaW5lZCIsImJsZW5kRnVuY1NlcGFyYXRlIiwic2V0QmxlbmRFcXVhdGlvbiIsIm1vZGVBbHBoYSIsImJsZW5kRXF1YXRpb25TZXBhcmF0ZSIsInNldEN1bGxGYWNlIiwidmFsdWUiLCJzZXRGcm9udEZhY2UiLCJzZXREZXB0aE1hc2siLCJzZXREZXB0aEZ1bmMiLCJzZXRTdGVuY2lsTWFzayIsInN0ZW5jaWxNYXNrIiwic2V0U3RlbmNpbEZ1bmMiLCJmdW5jIiwicmVmIiwibWFzayIsInN0ZW5jaWxGdW5jIiwic3RlbmNpbFJlZiIsInN0ZW5jaWxGdW5jTWFzayIsIkFMV0FZUyIsInNldFN0ZW5jaWxPcCIsInN0ZW5jaWxGYWlsIiwiZGVwdGhGYWlsIiwiZGVwdGhQYXNzIiwic3RlbmNpbERlcHRoRmFpbCIsInN0ZW5jaWxEZXB0aFBhc3MiLCJzdGVuY2lsT3AiLCJhY3RpdmVUZXh0dXJlIiwiVEVYVFVSRTAiLCJiaW5kRnJhbWVidWZmZXIiLCJ0YXJnZXQiLCJGUkFNRUJVRkZFUiIsImJ1ZmZlciIsImV4dGVuc2lvbiIsIndlYmdsMkZ1bmMiLCJleHRGdW5jIiwiYmluZCIsInNvcnRPcGFxdWUiLCJhIiwiYiIsInJlbmRlck9yZGVyIiwicHJvZ3JhbSIsInpEZXB0aCIsInNvcnRUcmFuc3BhcmVudCIsInNvcnRVSSIsImdldFJlbmRlckxpc3QiLCJzY2VuZSIsImNhbWVyYSIsImZydXN0dW1DdWxsIiwic29ydCIsInJlbmRlckxpc3QiLCJ1cGRhdGVGcnVzdHVtIiwidHJhdmVyc2UiLCJub2RlIiwidmlzaWJsZSIsImRyYXciLCJmcnVzdHVtQ3VsbGVkIiwiZnJ1c3R1bUludGVyc2VjdHNNZXNoIiwicHVzaCIsIm9wYXF1ZSIsInRyYW5zcGFyZW50IiwidWkiLCJmb3JFYWNoIiwiZGVwdGhUZXN0Iiwid29ybGRNYXRyaXgiLCJnZXRUcmFuc2xhdGlvbiIsImFwcGx5TWF0cml4NCIsInByb2plY3Rpb25WaWV3TWF0cml4IiwieiIsImNvbmNhdCIsInJlbmRlciIsInVwZGF0ZSIsImNsZWFyIiwiREVQVEhfVEVTVCIsIlNURU5DSUxfVEVTVCIsIkNPTE9SX0JVRkZFUl9CSVQiLCJERVBUSF9CVUZGRVJfQklUIiwiU1RFTkNJTF9CVUZGRVJfQklUIiwidXBkYXRlTWF0cml4V29ybGQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ogl/src/core/Renderer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ogl/src/core/Transform.js":
/*!************************************************!*\
  !*** ./node_modules/ogl/src/core/Transform.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Transform: () => (/* binding */ Transform)\n/* harmony export */ });\n/* harmony import */ var _math_Vec3_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../math/Vec3.js */ \"(ssr)/./node_modules/ogl/src/math/Vec3.js\");\n/* harmony import */ var _math_Quat_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../math/Quat.js */ \"(ssr)/./node_modules/ogl/src/math/Quat.js\");\n/* harmony import */ var _math_Mat4_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../math/Mat4.js */ \"(ssr)/./node_modules/ogl/src/math/Mat4.js\");\n/* harmony import */ var _math_Euler_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../math/Euler.js */ \"(ssr)/./node_modules/ogl/src/math/Euler.js\");\n\n\n\n\nclass Transform {\n    constructor(){\n        this.parent = null;\n        this.children = [];\n        this.visible = true;\n        this.matrix = new _math_Mat4_js__WEBPACK_IMPORTED_MODULE_0__.Mat4();\n        this.worldMatrix = new _math_Mat4_js__WEBPACK_IMPORTED_MODULE_0__.Mat4();\n        this.matrixAutoUpdate = true;\n        this.worldMatrixNeedsUpdate = false;\n        this.position = new _math_Vec3_js__WEBPACK_IMPORTED_MODULE_1__.Vec3();\n        this.quaternion = new _math_Quat_js__WEBPACK_IMPORTED_MODULE_2__.Quat();\n        this.scale = new _math_Vec3_js__WEBPACK_IMPORTED_MODULE_1__.Vec3(1);\n        this.rotation = new _math_Euler_js__WEBPACK_IMPORTED_MODULE_3__.Euler();\n        this.up = new _math_Vec3_js__WEBPACK_IMPORTED_MODULE_1__.Vec3(0, 1, 0);\n        this.rotation._target.onChange = ()=>this.quaternion.fromEuler(this.rotation, true);\n        this.quaternion._target.onChange = ()=>this.rotation.fromQuaternion(this.quaternion, undefined, true);\n    }\n    setParent(parent, notifyParent = true) {\n        if (this.parent && parent !== this.parent) this.parent.removeChild(this, false);\n        this.parent = parent;\n        if (notifyParent && parent) parent.addChild(this, false);\n    }\n    addChild(child, notifyChild = true) {\n        if (!~this.children.indexOf(child)) this.children.push(child);\n        if (notifyChild) child.setParent(this, false);\n    }\n    removeChild(child, notifyChild = true) {\n        if (!!~this.children.indexOf(child)) this.children.splice(this.children.indexOf(child), 1);\n        if (notifyChild) child.setParent(null, false);\n    }\n    updateMatrixWorld(force) {\n        if (this.matrixAutoUpdate) this.updateMatrix();\n        if (this.worldMatrixNeedsUpdate || force) {\n            if (this.parent === null) this.worldMatrix.copy(this.matrix);\n            else this.worldMatrix.multiply(this.parent.worldMatrix, this.matrix);\n            this.worldMatrixNeedsUpdate = false;\n            force = true;\n        }\n        for(let i = 0, l = this.children.length; i < l; i++){\n            this.children[i].updateMatrixWorld(force);\n        }\n    }\n    updateMatrix() {\n        this.matrix.compose(this.quaternion, this.position, this.scale);\n        this.worldMatrixNeedsUpdate = true;\n    }\n    traverse(callback) {\n        // Return true in callback to stop traversing children\n        if (callback(this)) return;\n        for(let i = 0, l = this.children.length; i < l; i++){\n            this.children[i].traverse(callback);\n        }\n    }\n    decompose() {\n        this.matrix.decompose(this.quaternion._target, this.position, this.scale);\n        this.rotation.fromQuaternion(this.quaternion);\n    }\n    lookAt(target, invert = false) {\n        if (invert) this.matrix.lookAt(this.position, target, this.up);\n        else this.matrix.lookAt(target, this.position, this.up);\n        this.matrix.getRotation(this.quaternion._target);\n        this.rotation.fromQuaternion(this.quaternion);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ogl/src/core/Transform.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ogl/src/extras/Triangle.js":
/*!*************************************************!*\
  !*** ./node_modules/ogl/src/extras/Triangle.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Triangle: () => (/* binding */ Triangle)\n/* harmony export */ });\n/* harmony import */ var _core_Geometry_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/Geometry.js */ \"(ssr)/./node_modules/ogl/src/core/Geometry.js\");\n\nclass Triangle extends _core_Geometry_js__WEBPACK_IMPORTED_MODULE_0__.Geometry {\n    constructor(gl, { attributes = {} } = {}){\n        Object.assign(attributes, {\n            position: {\n                size: 2,\n                data: new Float32Array([\n                    -1,\n                    -1,\n                    3,\n                    -1,\n                    -1,\n                    3\n                ])\n            },\n            uv: {\n                size: 2,\n                data: new Float32Array([\n                    0,\n                    0,\n                    2,\n                    0,\n                    0,\n                    2\n                ])\n            }\n        });\n        super(gl, attributes);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb2dsL3NyYy9leHRyYXMvVHJpYW5nbGUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBK0M7QUFFeEMsTUFBTUMsaUJBQWlCRCx1REFBUUE7SUFDbENFLFlBQVlDLEVBQUUsRUFBRSxFQUFFQyxhQUFhLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUU7UUFDdENDLE9BQU9DLE1BQU0sQ0FBQ0YsWUFBWTtZQUN0QkcsVUFBVTtnQkFBRUMsTUFBTTtnQkFBR0MsTUFBTSxJQUFJQyxhQUFhO29CQUFDLENBQUM7b0JBQUcsQ0FBQztvQkFBRztvQkFBRyxDQUFDO29CQUFHLENBQUM7b0JBQUc7aUJBQUU7WUFBRTtZQUNwRUMsSUFBSTtnQkFBRUgsTUFBTTtnQkFBR0MsTUFBTSxJQUFJQyxhQUFhO29CQUFDO29CQUFHO29CQUFHO29CQUFHO29CQUFHO29CQUFHO2lCQUFFO1lBQUU7UUFDOUQ7UUFFQSxLQUFLLENBQUNQLElBQUlDO0lBQ2Q7QUFDSiIsInNvdXJjZXMiOlsid2VicGFjazovL3BlcmNldmlhLy4vbm9kZV9tb2R1bGVzL29nbC9zcmMvZXh0cmFzL1RyaWFuZ2xlLmpzP2E5NWMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgR2VvbWV0cnkgfSBmcm9tICcuLi9jb3JlL0dlb21ldHJ5LmpzJztcblxuZXhwb3J0IGNsYXNzIFRyaWFuZ2xlIGV4dGVuZHMgR2VvbWV0cnkge1xuICAgIGNvbnN0cnVjdG9yKGdsLCB7IGF0dHJpYnV0ZXMgPSB7fSB9ID0ge30pIHtcbiAgICAgICAgT2JqZWN0LmFzc2lnbihhdHRyaWJ1dGVzLCB7XG4gICAgICAgICAgICBwb3NpdGlvbjogeyBzaXplOiAyLCBkYXRhOiBuZXcgRmxvYXQzMkFycmF5KFstMSwgLTEsIDMsIC0xLCAtMSwgM10pIH0sXG4gICAgICAgICAgICB1djogeyBzaXplOiAyLCBkYXRhOiBuZXcgRmxvYXQzMkFycmF5KFswLCAwLCAyLCAwLCAwLCAyXSkgfSxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgc3VwZXIoZ2wsIGF0dHJpYnV0ZXMpO1xuICAgIH1cbn1cbiJdLCJuYW1lcyI6WyJHZW9tZXRyeSIsIlRyaWFuZ2xlIiwiY29uc3RydWN0b3IiLCJnbCIsImF0dHJpYnV0ZXMiLCJPYmplY3QiLCJhc3NpZ24iLCJwb3NpdGlvbiIsInNpemUiLCJkYXRhIiwiRmxvYXQzMkFycmF5IiwidXYiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ogl/src/extras/Triangle.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ogl/src/math/Euler.js":
/*!********************************************!*\
  !*** ./node_modules/ogl/src/math/Euler.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Euler: () => (/* binding */ Euler)\n/* harmony export */ });\n/* harmony import */ var _functions_EulerFunc_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./functions/EulerFunc.js */ \"(ssr)/./node_modules/ogl/src/math/functions/EulerFunc.js\");\n/* harmony import */ var _Mat4_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Mat4.js */ \"(ssr)/./node_modules/ogl/src/math/Mat4.js\");\n\n\nconst tmpMat4 = /* @__PURE__ */ new _Mat4_js__WEBPACK_IMPORTED_MODULE_0__.Mat4();\nclass Euler extends Array {\n    constructor(x = 0, y = x, z = x, order = \"YXZ\"){\n        super(x, y, z);\n        this.order = order;\n        this.onChange = ()=>{};\n        // Keep reference to proxy target to avoid triggering onChange internally\n        this._target = this;\n        // Return a proxy to trigger onChange when array elements are edited directly\n        const triggerProps = [\n            \"0\",\n            \"1\",\n            \"2\"\n        ];\n        return new Proxy(this, {\n            set (target, property) {\n                const success = Reflect.set(...arguments);\n                if (success && triggerProps.includes(property)) target.onChange();\n                return success;\n            }\n        });\n    }\n    get x() {\n        return this[0];\n    }\n    get y() {\n        return this[1];\n    }\n    get z() {\n        return this[2];\n    }\n    set x(v) {\n        this._target[0] = v;\n        this.onChange();\n    }\n    set y(v) {\n        this._target[1] = v;\n        this.onChange();\n    }\n    set z(v) {\n        this._target[2] = v;\n        this.onChange();\n    }\n    set(x, y = x, z = x) {\n        if (x.length) return this.copy(x);\n        this._target[0] = x;\n        this._target[1] = y;\n        this._target[2] = z;\n        this.onChange();\n        return this;\n    }\n    copy(v) {\n        this._target[0] = v[0];\n        this._target[1] = v[1];\n        this._target[2] = v[2];\n        this.onChange();\n        return this;\n    }\n    reorder(order) {\n        this._target.order = order;\n        this.onChange();\n        return this;\n    }\n    fromRotationMatrix(m, order = this.order) {\n        _functions_EulerFunc_js__WEBPACK_IMPORTED_MODULE_1__.fromRotationMatrix(this._target, m, order);\n        this.onChange();\n        return this;\n    }\n    fromQuaternion(q, order = this.order, isInternal) {\n        tmpMat4.fromQuaternion(q);\n        this._target.fromRotationMatrix(tmpMat4, order);\n        // Avoid infinite recursion\n        if (!isInternal) this.onChange();\n        return this;\n    }\n    fromArray(a, o = 0) {\n        this._target[0] = a[o];\n        this._target[1] = a[o + 1];\n        this._target[2] = a[o + 2];\n        return this;\n    }\n    toArray(a = [], o = 0) {\n        a[o] = this[0];\n        a[o + 1] = this[1];\n        a[o + 2] = this[2];\n        return a;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb2dsL3NyYy9tYXRoL0V1bGVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFzRDtBQUNyQjtBQUVqQyxNQUFNRSxVQUFVLGFBQWEsR0FBRyxJQUFJRCwwQ0FBSUE7QUFFakMsTUFBTUUsY0FBY0M7SUFDdkJDLFlBQVlDLElBQUksQ0FBQyxFQUFFQyxJQUFJRCxDQUFDLEVBQUVFLElBQUlGLENBQUMsRUFBRUcsUUFBUSxLQUFLLENBQUU7UUFDNUMsS0FBSyxDQUFDSCxHQUFHQyxHQUFHQztRQUNaLElBQUksQ0FBQ0MsS0FBSyxHQUFHQTtRQUNiLElBQUksQ0FBQ0MsUUFBUSxHQUFHLEtBQU87UUFFdkIseUVBQXlFO1FBQ3pFLElBQUksQ0FBQ0MsT0FBTyxHQUFHLElBQUk7UUFFbkIsNkVBQTZFO1FBQzdFLE1BQU1DLGVBQWU7WUFBQztZQUFLO1lBQUs7U0FBSTtRQUNwQyxPQUFPLElBQUlDLE1BQU0sSUFBSSxFQUFFO1lBQ25CQyxLQUFJQyxNQUFNLEVBQUVDLFFBQVE7Z0JBQ2hCLE1BQU1DLFVBQVVDLFFBQVFKLEdBQUcsSUFBSUs7Z0JBQy9CLElBQUlGLFdBQVdMLGFBQWFRLFFBQVEsQ0FBQ0osV0FBV0QsT0FBT0wsUUFBUTtnQkFDL0QsT0FBT087WUFDWDtRQUNKO0lBQ0o7SUFFQSxJQUFJWCxJQUFJO1FBQ0osT0FBTyxJQUFJLENBQUMsRUFBRTtJQUNsQjtJQUVBLElBQUlDLElBQUk7UUFDSixPQUFPLElBQUksQ0FBQyxFQUFFO0lBQ2xCO0lBRUEsSUFBSUMsSUFBSTtRQUNKLE9BQU8sSUFBSSxDQUFDLEVBQUU7SUFDbEI7SUFFQSxJQUFJRixFQUFFZSxDQUFDLEVBQUU7UUFDTCxJQUFJLENBQUNWLE9BQU8sQ0FBQyxFQUFFLEdBQUdVO1FBQ2xCLElBQUksQ0FBQ1gsUUFBUTtJQUNqQjtJQUVBLElBQUlILEVBQUVjLENBQUMsRUFBRTtRQUNMLElBQUksQ0FBQ1YsT0FBTyxDQUFDLEVBQUUsR0FBR1U7UUFDbEIsSUFBSSxDQUFDWCxRQUFRO0lBQ2pCO0lBRUEsSUFBSUYsRUFBRWEsQ0FBQyxFQUFFO1FBQ0wsSUFBSSxDQUFDVixPQUFPLENBQUMsRUFBRSxHQUFHVTtRQUNsQixJQUFJLENBQUNYLFFBQVE7SUFDakI7SUFFQUksSUFBSVIsQ0FBQyxFQUFFQyxJQUFJRCxDQUFDLEVBQUVFLElBQUlGLENBQUMsRUFBRTtRQUNqQixJQUFJQSxFQUFFZ0IsTUFBTSxFQUFFLE9BQU8sSUFBSSxDQUFDQyxJQUFJLENBQUNqQjtRQUMvQixJQUFJLENBQUNLLE9BQU8sQ0FBQyxFQUFFLEdBQUdMO1FBQ2xCLElBQUksQ0FBQ0ssT0FBTyxDQUFDLEVBQUUsR0FBR0o7UUFDbEIsSUFBSSxDQUFDSSxPQUFPLENBQUMsRUFBRSxHQUFHSDtRQUNsQixJQUFJLENBQUNFLFFBQVE7UUFDYixPQUFPLElBQUk7SUFDZjtJQUVBYSxLQUFLRixDQUFDLEVBQUU7UUFDSixJQUFJLENBQUNWLE9BQU8sQ0FBQyxFQUFFLEdBQUdVLENBQUMsQ0FBQyxFQUFFO1FBQ3RCLElBQUksQ0FBQ1YsT0FBTyxDQUFDLEVBQUUsR0FBR1UsQ0FBQyxDQUFDLEVBQUU7UUFDdEIsSUFBSSxDQUFDVixPQUFPLENBQUMsRUFBRSxHQUFHVSxDQUFDLENBQUMsRUFBRTtRQUN0QixJQUFJLENBQUNYLFFBQVE7UUFDYixPQUFPLElBQUk7SUFDZjtJQUVBYyxRQUFRZixLQUFLLEVBQUU7UUFDWCxJQUFJLENBQUNFLE9BQU8sQ0FBQ0YsS0FBSyxHQUFHQTtRQUNyQixJQUFJLENBQUNDLFFBQVE7UUFDYixPQUFPLElBQUk7SUFDZjtJQUVBZSxtQkFBbUJDLENBQUMsRUFBRWpCLFFBQVEsSUFBSSxDQUFDQSxLQUFLLEVBQUU7UUFDdENULHVFQUE0QixDQUFDLElBQUksQ0FBQ1csT0FBTyxFQUFFZSxHQUFHakI7UUFDOUMsSUFBSSxDQUFDQyxRQUFRO1FBQ2IsT0FBTyxJQUFJO0lBQ2Y7SUFFQWlCLGVBQWVDLENBQUMsRUFBRW5CLFFBQVEsSUFBSSxDQUFDQSxLQUFLLEVBQUVvQixVQUFVLEVBQUU7UUFDOUMzQixRQUFReUIsY0FBYyxDQUFDQztRQUN2QixJQUFJLENBQUNqQixPQUFPLENBQUNjLGtCQUFrQixDQUFDdkIsU0FBU087UUFDekMsMkJBQTJCO1FBQzNCLElBQUksQ0FBQ29CLFlBQVksSUFBSSxDQUFDbkIsUUFBUTtRQUM5QixPQUFPLElBQUk7SUFDZjtJQUVBb0IsVUFBVUMsQ0FBQyxFQUFFQyxJQUFJLENBQUMsRUFBRTtRQUNoQixJQUFJLENBQUNyQixPQUFPLENBQUMsRUFBRSxHQUFHb0IsQ0FBQyxDQUFDQyxFQUFFO1FBQ3RCLElBQUksQ0FBQ3JCLE9BQU8sQ0FBQyxFQUFFLEdBQUdvQixDQUFDLENBQUNDLElBQUksRUFBRTtRQUMxQixJQUFJLENBQUNyQixPQUFPLENBQUMsRUFBRSxHQUFHb0IsQ0FBQyxDQUFDQyxJQUFJLEVBQUU7UUFDMUIsT0FBTyxJQUFJO0lBQ2Y7SUFFQUMsUUFBUUYsSUFBSSxFQUFFLEVBQUVDLElBQUksQ0FBQyxFQUFFO1FBQ25CRCxDQUFDLENBQUNDLEVBQUUsR0FBRyxJQUFJLENBQUMsRUFBRTtRQUNkRCxDQUFDLENBQUNDLElBQUksRUFBRSxHQUFHLElBQUksQ0FBQyxFQUFFO1FBQ2xCRCxDQUFDLENBQUNDLElBQUksRUFBRSxHQUFHLElBQUksQ0FBQyxFQUFFO1FBQ2xCLE9BQU9EO0lBQ1g7QUFDSiIsInNvdXJjZXMiOlsid2VicGFjazovL3BlcmNldmlhLy4vbm9kZV9tb2R1bGVzL29nbC9zcmMvbWF0aC9FdWxlci5qcz83Y2Y2Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIEV1bGVyRnVuYyBmcm9tICcuL2Z1bmN0aW9ucy9FdWxlckZ1bmMuanMnO1xuaW1wb3J0IHsgTWF0NCB9IGZyb20gJy4vTWF0NC5qcyc7XG5cbmNvbnN0IHRtcE1hdDQgPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hdDQoKTtcblxuZXhwb3J0IGNsYXNzIEV1bGVyIGV4dGVuZHMgQXJyYXkge1xuICAgIGNvbnN0cnVjdG9yKHggPSAwLCB5ID0geCwgeiA9IHgsIG9yZGVyID0gJ1lYWicpIHtcbiAgICAgICAgc3VwZXIoeCwgeSwgeik7XG4gICAgICAgIHRoaXMub3JkZXIgPSBvcmRlcjtcbiAgICAgICAgdGhpcy5vbkNoYW5nZSA9ICgpID0+IHt9O1xuXG4gICAgICAgIC8vIEtlZXAgcmVmZXJlbmNlIHRvIHByb3h5IHRhcmdldCB0byBhdm9pZCB0cmlnZ2VyaW5nIG9uQ2hhbmdlIGludGVybmFsbHlcbiAgICAgICAgdGhpcy5fdGFyZ2V0ID0gdGhpcztcblxuICAgICAgICAvLyBSZXR1cm4gYSBwcm94eSB0byB0cmlnZ2VyIG9uQ2hhbmdlIHdoZW4gYXJyYXkgZWxlbWVudHMgYXJlIGVkaXRlZCBkaXJlY3RseVxuICAgICAgICBjb25zdCB0cmlnZ2VyUHJvcHMgPSBbJzAnLCAnMScsICcyJ107XG4gICAgICAgIHJldHVybiBuZXcgUHJveHkodGhpcywge1xuICAgICAgICAgICAgc2V0KHRhcmdldCwgcHJvcGVydHkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzdWNjZXNzID0gUmVmbGVjdC5zZXQoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgICAgICAgICBpZiAoc3VjY2VzcyAmJiB0cmlnZ2VyUHJvcHMuaW5jbHVkZXMocHJvcGVydHkpKSB0YXJnZXQub25DaGFuZ2UoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3VjY2VzcztcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGdldCB4KCkge1xuICAgICAgICByZXR1cm4gdGhpc1swXTtcbiAgICB9XG5cbiAgICBnZXQgeSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNbMV07XG4gICAgfVxuXG4gICAgZ2V0IHooKSB7XG4gICAgICAgIHJldHVybiB0aGlzWzJdO1xuICAgIH1cblxuICAgIHNldCB4KHYpIHtcbiAgICAgICAgdGhpcy5fdGFyZ2V0WzBdID0gdjtcbiAgICAgICAgdGhpcy5vbkNoYW5nZSgpO1xuICAgIH1cblxuICAgIHNldCB5KHYpIHtcbiAgICAgICAgdGhpcy5fdGFyZ2V0WzFdID0gdjtcbiAgICAgICAgdGhpcy5vbkNoYW5nZSgpO1xuICAgIH1cblxuICAgIHNldCB6KHYpIHtcbiAgICAgICAgdGhpcy5fdGFyZ2V0WzJdID0gdjtcbiAgICAgICAgdGhpcy5vbkNoYW5nZSgpO1xuICAgIH1cblxuICAgIHNldCh4LCB5ID0geCwgeiA9IHgpIHtcbiAgICAgICAgaWYgKHgubGVuZ3RoKSByZXR1cm4gdGhpcy5jb3B5KHgpO1xuICAgICAgICB0aGlzLl90YXJnZXRbMF0gPSB4O1xuICAgICAgICB0aGlzLl90YXJnZXRbMV0gPSB5O1xuICAgICAgICB0aGlzLl90YXJnZXRbMl0gPSB6O1xuICAgICAgICB0aGlzLm9uQ2hhbmdlKCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGNvcHkodikge1xuICAgICAgICB0aGlzLl90YXJnZXRbMF0gPSB2WzBdO1xuICAgICAgICB0aGlzLl90YXJnZXRbMV0gPSB2WzFdO1xuICAgICAgICB0aGlzLl90YXJnZXRbMl0gPSB2WzJdO1xuICAgICAgICB0aGlzLm9uQ2hhbmdlKCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHJlb3JkZXIob3JkZXIpIHtcbiAgICAgICAgdGhpcy5fdGFyZ2V0Lm9yZGVyID0gb3JkZXI7XG4gICAgICAgIHRoaXMub25DaGFuZ2UoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZnJvbVJvdGF0aW9uTWF0cml4KG0sIG9yZGVyID0gdGhpcy5vcmRlcikge1xuICAgICAgICBFdWxlckZ1bmMuZnJvbVJvdGF0aW9uTWF0cml4KHRoaXMuX3RhcmdldCwgbSwgb3JkZXIpO1xuICAgICAgICB0aGlzLm9uQ2hhbmdlKCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGZyb21RdWF0ZXJuaW9uKHEsIG9yZGVyID0gdGhpcy5vcmRlciwgaXNJbnRlcm5hbCkge1xuICAgICAgICB0bXBNYXQ0LmZyb21RdWF0ZXJuaW9uKHEpO1xuICAgICAgICB0aGlzLl90YXJnZXQuZnJvbVJvdGF0aW9uTWF0cml4KHRtcE1hdDQsIG9yZGVyKTtcbiAgICAgICAgLy8gQXZvaWQgaW5maW5pdGUgcmVjdXJzaW9uXG4gICAgICAgIGlmICghaXNJbnRlcm5hbCkgdGhpcy5vbkNoYW5nZSgpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBmcm9tQXJyYXkoYSwgbyA9IDApIHtcbiAgICAgICAgdGhpcy5fdGFyZ2V0WzBdID0gYVtvXTtcbiAgICAgICAgdGhpcy5fdGFyZ2V0WzFdID0gYVtvICsgMV07XG4gICAgICAgIHRoaXMuX3RhcmdldFsyXSA9IGFbbyArIDJdO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICB0b0FycmF5KGEgPSBbXSwgbyA9IDApIHtcbiAgICAgICAgYVtvXSA9IHRoaXNbMF07XG4gICAgICAgIGFbbyArIDFdID0gdGhpc1sxXTtcbiAgICAgICAgYVtvICsgMl0gPSB0aGlzWzJdO1xuICAgICAgICByZXR1cm4gYTtcbiAgICB9XG59XG4iXSwibmFtZXMiOlsiRXVsZXJGdW5jIiwiTWF0NCIsInRtcE1hdDQiLCJFdWxlciIsIkFycmF5IiwiY29uc3RydWN0b3IiLCJ4IiwieSIsInoiLCJvcmRlciIsIm9uQ2hhbmdlIiwiX3RhcmdldCIsInRyaWdnZXJQcm9wcyIsIlByb3h5Iiwic2V0IiwidGFyZ2V0IiwicHJvcGVydHkiLCJzdWNjZXNzIiwiUmVmbGVjdCIsImFyZ3VtZW50cyIsImluY2x1ZGVzIiwidiIsImxlbmd0aCIsImNvcHkiLCJyZW9yZGVyIiwiZnJvbVJvdGF0aW9uTWF0cml4IiwibSIsImZyb21RdWF0ZXJuaW9uIiwicSIsImlzSW50ZXJuYWwiLCJmcm9tQXJyYXkiLCJhIiwibyIsInRvQXJyYXkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ogl/src/math/Euler.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ogl/src/math/Mat3.js":
/*!*******************************************!*\
  !*** ./node_modules/ogl/src/math/Mat3.js ***!
  \*******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Mat3: () => (/* binding */ Mat3)\n/* harmony export */ });\n/* harmony import */ var _functions_Mat3Func_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./functions/Mat3Func.js */ \"(ssr)/./node_modules/ogl/src/math/functions/Mat3Func.js\");\n\nclass Mat3 extends Array {\n    constructor(m00 = 1, m01 = 0, m02 = 0, m10 = 0, m11 = 1, m12 = 0, m20 = 0, m21 = 0, m22 = 1){\n        super(m00, m01, m02, m10, m11, m12, m20, m21, m22);\n        return this;\n    }\n    set(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n        if (m00.length) return this.copy(m00);\n        _functions_Mat3Func_js__WEBPACK_IMPORTED_MODULE_0__.set(this, m00, m01, m02, m10, m11, m12, m20, m21, m22);\n        return this;\n    }\n    translate(v, m = this) {\n        _functions_Mat3Func_js__WEBPACK_IMPORTED_MODULE_0__.translate(this, m, v);\n        return this;\n    }\n    rotate(v, m = this) {\n        _functions_Mat3Func_js__WEBPACK_IMPORTED_MODULE_0__.rotate(this, m, v);\n        return this;\n    }\n    scale(v, m = this) {\n        _functions_Mat3Func_js__WEBPACK_IMPORTED_MODULE_0__.scale(this, m, v);\n        return this;\n    }\n    multiply(ma, mb) {\n        if (mb) {\n            _functions_Mat3Func_js__WEBPACK_IMPORTED_MODULE_0__.multiply(this, ma, mb);\n        } else {\n            _functions_Mat3Func_js__WEBPACK_IMPORTED_MODULE_0__.multiply(this, this, ma);\n        }\n        return this;\n    }\n    identity() {\n        _functions_Mat3Func_js__WEBPACK_IMPORTED_MODULE_0__.identity(this);\n        return this;\n    }\n    copy(m) {\n        _functions_Mat3Func_js__WEBPACK_IMPORTED_MODULE_0__.copy(this, m);\n        return this;\n    }\n    fromMatrix4(m) {\n        _functions_Mat3Func_js__WEBPACK_IMPORTED_MODULE_0__.fromMat4(this, m);\n        return this;\n    }\n    fromQuaternion(q) {\n        _functions_Mat3Func_js__WEBPACK_IMPORTED_MODULE_0__.fromQuat(this, q);\n        return this;\n    }\n    fromBasis(vec3a, vec3b, vec3c) {\n        this.set(vec3a[0], vec3a[1], vec3a[2], vec3b[0], vec3b[1], vec3b[2], vec3c[0], vec3c[1], vec3c[2]);\n        return this;\n    }\n    inverse(m = this) {\n        _functions_Mat3Func_js__WEBPACK_IMPORTED_MODULE_0__.invert(this, m);\n        return this;\n    }\n    getNormalMatrix(m) {\n        _functions_Mat3Func_js__WEBPACK_IMPORTED_MODULE_0__.normalFromMat4(this, m);\n        return this;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb2dsL3NyYy9tYXRoL01hdDMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBb0Q7QUFFN0MsTUFBTUMsYUFBYUM7SUFDdEJDLFlBQVlDLE1BQU0sQ0FBQyxFQUFFQyxNQUFNLENBQUMsRUFBRUMsTUFBTSxDQUFDLEVBQUVDLE1BQU0sQ0FBQyxFQUFFQyxNQUFNLENBQUMsRUFBRUMsTUFBTSxDQUFDLEVBQUVDLE1BQU0sQ0FBQyxFQUFFQyxNQUFNLENBQUMsRUFBRUMsTUFBTSxDQUFDLENBQUU7UUFDekYsS0FBSyxDQUFDUixLQUFLQyxLQUFLQyxLQUFLQyxLQUFLQyxLQUFLQyxLQUFLQyxLQUFLQyxLQUFLQztRQUM5QyxPQUFPLElBQUk7SUFDZjtJQUVBQyxJQUFJVCxHQUFHLEVBQUVDLEdBQUcsRUFBRUMsR0FBRyxFQUFFQyxHQUFHLEVBQUVDLEdBQUcsRUFBRUMsR0FBRyxFQUFFQyxHQUFHLEVBQUVDLEdBQUcsRUFBRUMsR0FBRyxFQUFFO1FBQzdDLElBQUlSLElBQUlVLE1BQU0sRUFBRSxPQUFPLElBQUksQ0FBQ0MsSUFBSSxDQUFDWDtRQUNqQ0osdURBQVksQ0FBQyxJQUFJLEVBQUVJLEtBQUtDLEtBQUtDLEtBQUtDLEtBQUtDLEtBQUtDLEtBQUtDLEtBQUtDLEtBQUtDO1FBQzNELE9BQU8sSUFBSTtJQUNmO0lBRUFJLFVBQVVDLENBQUMsRUFBRUMsSUFBSSxJQUFJLEVBQUU7UUFDbkJsQiw2REFBa0IsQ0FBQyxJQUFJLEVBQUVrQixHQUFHRDtRQUM1QixPQUFPLElBQUk7SUFDZjtJQUVBRSxPQUFPRixDQUFDLEVBQUVDLElBQUksSUFBSSxFQUFFO1FBQ2hCbEIsMERBQWUsQ0FBQyxJQUFJLEVBQUVrQixHQUFHRDtRQUN6QixPQUFPLElBQUk7SUFDZjtJQUVBRyxNQUFNSCxDQUFDLEVBQUVDLElBQUksSUFBSSxFQUFFO1FBQ2ZsQix5REFBYyxDQUFDLElBQUksRUFBRWtCLEdBQUdEO1FBQ3hCLE9BQU8sSUFBSTtJQUNmO0lBRUFJLFNBQVNDLEVBQUUsRUFBRUMsRUFBRSxFQUFFO1FBQ2IsSUFBSUEsSUFBSTtZQUNKdkIsNERBQWlCLENBQUMsSUFBSSxFQUFFc0IsSUFBSUM7UUFDaEMsT0FBTztZQUNIdkIsNERBQWlCLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRXNCO1FBQ2xDO1FBQ0EsT0FBTyxJQUFJO0lBQ2Y7SUFFQUUsV0FBVztRQUNQeEIsNERBQWlCLENBQUMsSUFBSTtRQUN0QixPQUFPLElBQUk7SUFDZjtJQUVBZSxLQUFLRyxDQUFDLEVBQUU7UUFDSmxCLHdEQUFhLENBQUMsSUFBSSxFQUFFa0I7UUFDcEIsT0FBTyxJQUFJO0lBQ2Y7SUFFQU8sWUFBWVAsQ0FBQyxFQUFFO1FBQ1hsQiw0REFBaUIsQ0FBQyxJQUFJLEVBQUVrQjtRQUN4QixPQUFPLElBQUk7SUFDZjtJQUVBUyxlQUFlQyxDQUFDLEVBQUU7UUFDZDVCLDREQUFpQixDQUFDLElBQUksRUFBRTRCO1FBQ3hCLE9BQU8sSUFBSTtJQUNmO0lBRUFFLFVBQVVDLEtBQUssRUFBRUMsS0FBSyxFQUFFQyxLQUFLLEVBQUU7UUFDM0IsSUFBSSxDQUFDcEIsR0FBRyxDQUFDa0IsS0FBSyxDQUFDLEVBQUUsRUFBRUEsS0FBSyxDQUFDLEVBQUUsRUFBRUEsS0FBSyxDQUFDLEVBQUUsRUFBRUMsS0FBSyxDQUFDLEVBQUUsRUFBRUEsS0FBSyxDQUFDLEVBQUUsRUFBRUEsS0FBSyxDQUFDLEVBQUUsRUFBRUMsS0FBSyxDQUFDLEVBQUUsRUFBRUEsS0FBSyxDQUFDLEVBQUUsRUFBRUEsS0FBSyxDQUFDLEVBQUU7UUFDakcsT0FBTyxJQUFJO0lBQ2Y7SUFFQUMsUUFBUWhCLElBQUksSUFBSSxFQUFFO1FBQ2RsQiwwREFBZSxDQUFDLElBQUksRUFBRWtCO1FBQ3RCLE9BQU8sSUFBSTtJQUNmO0lBRUFrQixnQkFBZ0JsQixDQUFDLEVBQUU7UUFDZmxCLGtFQUF1QixDQUFDLElBQUksRUFBRWtCO1FBQzlCLE9BQU8sSUFBSTtJQUNmO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wZXJjZXZpYS8uL25vZGVfbW9kdWxlcy9vZ2wvc3JjL21hdGgvTWF0My5qcz9hODJjIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIE1hdDNGdW5jIGZyb20gJy4vZnVuY3Rpb25zL01hdDNGdW5jLmpzJztcblxuZXhwb3J0IGNsYXNzIE1hdDMgZXh0ZW5kcyBBcnJheSB7XG4gICAgY29uc3RydWN0b3IobTAwID0gMSwgbTAxID0gMCwgbTAyID0gMCwgbTEwID0gMCwgbTExID0gMSwgbTEyID0gMCwgbTIwID0gMCwgbTIxID0gMCwgbTIyID0gMSkge1xuICAgICAgICBzdXBlcihtMDAsIG0wMSwgbTAyLCBtMTAsIG0xMSwgbTEyLCBtMjAsIG0yMSwgbTIyKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgc2V0KG0wMCwgbTAxLCBtMDIsIG0xMCwgbTExLCBtMTIsIG0yMCwgbTIxLCBtMjIpIHtcbiAgICAgICAgaWYgKG0wMC5sZW5ndGgpIHJldHVybiB0aGlzLmNvcHkobTAwKTtcbiAgICAgICAgTWF0M0Z1bmMuc2V0KHRoaXMsIG0wMCwgbTAxLCBtMDIsIG0xMCwgbTExLCBtMTIsIG0yMCwgbTIxLCBtMjIpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICB0cmFuc2xhdGUodiwgbSA9IHRoaXMpIHtcbiAgICAgICAgTWF0M0Z1bmMudHJhbnNsYXRlKHRoaXMsIG0sIHYpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICByb3RhdGUodiwgbSA9IHRoaXMpIHtcbiAgICAgICAgTWF0M0Z1bmMucm90YXRlKHRoaXMsIG0sIHYpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBzY2FsZSh2LCBtID0gdGhpcykge1xuICAgICAgICBNYXQzRnVuYy5zY2FsZSh0aGlzLCBtLCB2KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgbXVsdGlwbHkobWEsIG1iKSB7XG4gICAgICAgIGlmIChtYikge1xuICAgICAgICAgICAgTWF0M0Z1bmMubXVsdGlwbHkodGhpcywgbWEsIG1iKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIE1hdDNGdW5jLm11bHRpcGx5KHRoaXMsIHRoaXMsIG1hKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBpZGVudGl0eSgpIHtcbiAgICAgICAgTWF0M0Z1bmMuaWRlbnRpdHkodGhpcyk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGNvcHkobSkge1xuICAgICAgICBNYXQzRnVuYy5jb3B5KHRoaXMsIG0pO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBmcm9tTWF0cml4NChtKSB7XG4gICAgICAgIE1hdDNGdW5jLmZyb21NYXQ0KHRoaXMsIG0pO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBmcm9tUXVhdGVybmlvbihxKSB7XG4gICAgICAgIE1hdDNGdW5jLmZyb21RdWF0KHRoaXMsIHEpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBmcm9tQmFzaXModmVjM2EsIHZlYzNiLCB2ZWMzYykge1xuICAgICAgICB0aGlzLnNldCh2ZWMzYVswXSwgdmVjM2FbMV0sIHZlYzNhWzJdLCB2ZWMzYlswXSwgdmVjM2JbMV0sIHZlYzNiWzJdLCB2ZWMzY1swXSwgdmVjM2NbMV0sIHZlYzNjWzJdKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgaW52ZXJzZShtID0gdGhpcykge1xuICAgICAgICBNYXQzRnVuYy5pbnZlcnQodGhpcywgbSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGdldE5vcm1hbE1hdHJpeChtKSB7XG4gICAgICAgIE1hdDNGdW5jLm5vcm1hbEZyb21NYXQ0KHRoaXMsIG0pO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG59XG4iXSwibmFtZXMiOlsiTWF0M0Z1bmMiLCJNYXQzIiwiQXJyYXkiLCJjb25zdHJ1Y3RvciIsIm0wMCIsIm0wMSIsIm0wMiIsIm0xMCIsIm0xMSIsIm0xMiIsIm0yMCIsIm0yMSIsIm0yMiIsInNldCIsImxlbmd0aCIsImNvcHkiLCJ0cmFuc2xhdGUiLCJ2IiwibSIsInJvdGF0ZSIsInNjYWxlIiwibXVsdGlwbHkiLCJtYSIsIm1iIiwiaWRlbnRpdHkiLCJmcm9tTWF0cml4NCIsImZyb21NYXQ0IiwiZnJvbVF1YXRlcm5pb24iLCJxIiwiZnJvbVF1YXQiLCJmcm9tQmFzaXMiLCJ2ZWMzYSIsInZlYzNiIiwidmVjM2MiLCJpbnZlcnNlIiwiaW52ZXJ0IiwiZ2V0Tm9ybWFsTWF0cml4Iiwibm9ybWFsRnJvbU1hdDQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ogl/src/math/Mat3.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ogl/src/math/Mat4.js":
/*!*******************************************!*\
  !*** ./node_modules/ogl/src/math/Mat4.js ***!
  \*******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Mat4: () => (/* binding */ Mat4)\n/* harmony export */ });\n/* harmony import */ var _functions_Mat4Func_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./functions/Mat4Func.js */ \"(ssr)/./node_modules/ogl/src/math/functions/Mat4Func.js\");\n\nclass Mat4 extends Array {\n    constructor(m00 = 1, m01 = 0, m02 = 0, m03 = 0, m10 = 0, m11 = 1, m12 = 0, m13 = 0, m20 = 0, m21 = 0, m22 = 1, m23 = 0, m30 = 0, m31 = 0, m32 = 0, m33 = 1){\n        super(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33);\n        return this;\n    }\n    get x() {\n        return this[12];\n    }\n    get y() {\n        return this[13];\n    }\n    get z() {\n        return this[14];\n    }\n    get w() {\n        return this[15];\n    }\n    set x(v) {\n        this[12] = v;\n    }\n    set y(v) {\n        this[13] = v;\n    }\n    set z(v) {\n        this[14] = v;\n    }\n    set w(v) {\n        this[15] = v;\n    }\n    set(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n        if (m00.length) return this.copy(m00);\n        _functions_Mat4Func_js__WEBPACK_IMPORTED_MODULE_0__.set(this, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33);\n        return this;\n    }\n    translate(v, m = this) {\n        _functions_Mat4Func_js__WEBPACK_IMPORTED_MODULE_0__.translate(this, m, v);\n        return this;\n    }\n    rotate(v, axis, m = this) {\n        _functions_Mat4Func_js__WEBPACK_IMPORTED_MODULE_0__.rotate(this, m, v, axis);\n        return this;\n    }\n    scale(v, m = this) {\n        _functions_Mat4Func_js__WEBPACK_IMPORTED_MODULE_0__.scale(this, m, typeof v === \"number\" ? [\n            v,\n            v,\n            v\n        ] : v);\n        return this;\n    }\n    add(ma, mb) {\n        if (mb) _functions_Mat4Func_js__WEBPACK_IMPORTED_MODULE_0__.add(this, ma, mb);\n        else _functions_Mat4Func_js__WEBPACK_IMPORTED_MODULE_0__.add(this, this, ma);\n        return this;\n    }\n    sub(ma, mb) {\n        if (mb) _functions_Mat4Func_js__WEBPACK_IMPORTED_MODULE_0__.subtract(this, ma, mb);\n        else _functions_Mat4Func_js__WEBPACK_IMPORTED_MODULE_0__.subtract(this, this, ma);\n        return this;\n    }\n    multiply(ma, mb) {\n        if (!ma.length) {\n            _functions_Mat4Func_js__WEBPACK_IMPORTED_MODULE_0__.multiplyScalar(this, this, ma);\n        } else if (mb) {\n            _functions_Mat4Func_js__WEBPACK_IMPORTED_MODULE_0__.multiply(this, ma, mb);\n        } else {\n            _functions_Mat4Func_js__WEBPACK_IMPORTED_MODULE_0__.multiply(this, this, ma);\n        }\n        return this;\n    }\n    identity() {\n        _functions_Mat4Func_js__WEBPACK_IMPORTED_MODULE_0__.identity(this);\n        return this;\n    }\n    copy(m) {\n        _functions_Mat4Func_js__WEBPACK_IMPORTED_MODULE_0__.copy(this, m);\n        return this;\n    }\n    fromPerspective({ fov, aspect, near, far } = {}) {\n        _functions_Mat4Func_js__WEBPACK_IMPORTED_MODULE_0__.perspective(this, fov, aspect, near, far);\n        return this;\n    }\n    fromOrthogonal({ left, right, bottom, top, near, far }) {\n        _functions_Mat4Func_js__WEBPACK_IMPORTED_MODULE_0__.ortho(this, left, right, bottom, top, near, far);\n        return this;\n    }\n    fromQuaternion(q) {\n        _functions_Mat4Func_js__WEBPACK_IMPORTED_MODULE_0__.fromQuat(this, q);\n        return this;\n    }\n    setPosition(v) {\n        this.x = v[0];\n        this.y = v[1];\n        this.z = v[2];\n        return this;\n    }\n    inverse(m = this) {\n        _functions_Mat4Func_js__WEBPACK_IMPORTED_MODULE_0__.invert(this, m);\n        return this;\n    }\n    compose(q, pos, scale) {\n        _functions_Mat4Func_js__WEBPACK_IMPORTED_MODULE_0__.compose(this, q, pos, scale);\n        return this;\n    }\n    decompose(q, pos, scale) {\n        _functions_Mat4Func_js__WEBPACK_IMPORTED_MODULE_0__.decompose(this, q, pos, scale);\n        return this;\n    }\n    getRotation(q) {\n        _functions_Mat4Func_js__WEBPACK_IMPORTED_MODULE_0__.getRotation(q, this);\n        return this;\n    }\n    getTranslation(pos) {\n        _functions_Mat4Func_js__WEBPACK_IMPORTED_MODULE_0__.getTranslation(pos, this);\n        return this;\n    }\n    getScaling(scale) {\n        _functions_Mat4Func_js__WEBPACK_IMPORTED_MODULE_0__.getScaling(scale, this);\n        return this;\n    }\n    getMaxScaleOnAxis() {\n        return _functions_Mat4Func_js__WEBPACK_IMPORTED_MODULE_0__.getMaxScaleOnAxis(this);\n    }\n    lookAt(eye, target, up) {\n        _functions_Mat4Func_js__WEBPACK_IMPORTED_MODULE_0__.targetTo(this, eye, target, up);\n        return this;\n    }\n    determinant() {\n        return _functions_Mat4Func_js__WEBPACK_IMPORTED_MODULE_0__.determinant(this);\n    }\n    fromArray(a, o = 0) {\n        this[0] = a[o];\n        this[1] = a[o + 1];\n        this[2] = a[o + 2];\n        this[3] = a[o + 3];\n        this[4] = a[o + 4];\n        this[5] = a[o + 5];\n        this[6] = a[o + 6];\n        this[7] = a[o + 7];\n        this[8] = a[o + 8];\n        this[9] = a[o + 9];\n        this[10] = a[o + 10];\n        this[11] = a[o + 11];\n        this[12] = a[o + 12];\n        this[13] = a[o + 13];\n        this[14] = a[o + 14];\n        this[15] = a[o + 15];\n        return this;\n    }\n    toArray(a = [], o = 0) {\n        a[o] = this[0];\n        a[o + 1] = this[1];\n        a[o + 2] = this[2];\n        a[o + 3] = this[3];\n        a[o + 4] = this[4];\n        a[o + 5] = this[5];\n        a[o + 6] = this[6];\n        a[o + 7] = this[7];\n        a[o + 8] = this[8];\n        a[o + 9] = this[9];\n        a[o + 10] = this[10];\n        a[o + 11] = this[11];\n        a[o + 12] = this[12];\n        a[o + 13] = this[13];\n        a[o + 14] = this[14];\n        a[o + 15] = this[15];\n        return a;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ogl/src/math/Mat4.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ogl/src/math/Quat.js":
/*!*******************************************!*\
  !*** ./node_modules/ogl/src/math/Quat.js ***!
  \*******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Quat: () => (/* binding */ Quat)\n/* harmony export */ });\n/* harmony import */ var _functions_QuatFunc_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./functions/QuatFunc.js */ \"(ssr)/./node_modules/ogl/src/math/functions/QuatFunc.js\");\n\nclass Quat extends Array {\n    constructor(x = 0, y = 0, z = 0, w = 1){\n        super(x, y, z, w);\n        this.onChange = ()=>{};\n        // Keep reference to proxy target to avoid triggering onChange internally\n        this._target = this;\n        // Return a proxy to trigger onChange when array elements are edited directly\n        const triggerProps = [\n            \"0\",\n            \"1\",\n            \"2\",\n            \"3\"\n        ];\n        return new Proxy(this, {\n            set (target, property) {\n                const success = Reflect.set(...arguments);\n                if (success && triggerProps.includes(property)) target.onChange();\n                return success;\n            }\n        });\n    }\n    get x() {\n        return this[0];\n    }\n    get y() {\n        return this[1];\n    }\n    get z() {\n        return this[2];\n    }\n    get w() {\n        return this[3];\n    }\n    set x(v) {\n        this._target[0] = v;\n        this.onChange();\n    }\n    set y(v) {\n        this._target[1] = v;\n        this.onChange();\n    }\n    set z(v) {\n        this._target[2] = v;\n        this.onChange();\n    }\n    set w(v) {\n        this._target[3] = v;\n        this.onChange();\n    }\n    identity() {\n        _functions_QuatFunc_js__WEBPACK_IMPORTED_MODULE_0__.identity(this._target);\n        this.onChange();\n        return this;\n    }\n    set(x, y, z, w) {\n        if (x.length) return this.copy(x);\n        _functions_QuatFunc_js__WEBPACK_IMPORTED_MODULE_0__.set(this._target, x, y, z, w);\n        this.onChange();\n        return this;\n    }\n    rotateX(a) {\n        _functions_QuatFunc_js__WEBPACK_IMPORTED_MODULE_0__.rotateX(this._target, this._target, a);\n        this.onChange();\n        return this;\n    }\n    rotateY(a) {\n        _functions_QuatFunc_js__WEBPACK_IMPORTED_MODULE_0__.rotateY(this._target, this._target, a);\n        this.onChange();\n        return this;\n    }\n    rotateZ(a) {\n        _functions_QuatFunc_js__WEBPACK_IMPORTED_MODULE_0__.rotateZ(this._target, this._target, a);\n        this.onChange();\n        return this;\n    }\n    inverse(q = this._target) {\n        _functions_QuatFunc_js__WEBPACK_IMPORTED_MODULE_0__.invert(this._target, q);\n        this.onChange();\n        return this;\n    }\n    conjugate(q = this._target) {\n        _functions_QuatFunc_js__WEBPACK_IMPORTED_MODULE_0__.conjugate(this._target, q);\n        this.onChange();\n        return this;\n    }\n    copy(q) {\n        _functions_QuatFunc_js__WEBPACK_IMPORTED_MODULE_0__.copy(this._target, q);\n        this.onChange();\n        return this;\n    }\n    normalize(q = this._target) {\n        _functions_QuatFunc_js__WEBPACK_IMPORTED_MODULE_0__.normalize(this._target, q);\n        this.onChange();\n        return this;\n    }\n    multiply(qA, qB) {\n        if (qB) {\n            _functions_QuatFunc_js__WEBPACK_IMPORTED_MODULE_0__.multiply(this._target, qA, qB);\n        } else {\n            _functions_QuatFunc_js__WEBPACK_IMPORTED_MODULE_0__.multiply(this._target, this._target, qA);\n        }\n        this.onChange();\n        return this;\n    }\n    dot(v) {\n        return _functions_QuatFunc_js__WEBPACK_IMPORTED_MODULE_0__.dot(this._target, v);\n    }\n    fromMatrix3(matrix3) {\n        _functions_QuatFunc_js__WEBPACK_IMPORTED_MODULE_0__.fromMat3(this._target, matrix3);\n        this.onChange();\n        return this;\n    }\n    fromEuler(euler, isInternal) {\n        _functions_QuatFunc_js__WEBPACK_IMPORTED_MODULE_0__.fromEuler(this._target, euler, euler.order);\n        // Avoid infinite recursion\n        if (!isInternal) this.onChange();\n        return this;\n    }\n    fromAxisAngle(axis, a) {\n        _functions_QuatFunc_js__WEBPACK_IMPORTED_MODULE_0__.setAxisAngle(this._target, axis, a);\n        this.onChange();\n        return this;\n    }\n    slerp(q, t) {\n        _functions_QuatFunc_js__WEBPACK_IMPORTED_MODULE_0__.slerp(this._target, this._target, q, t);\n        this.onChange();\n        return this;\n    }\n    fromArray(a, o = 0) {\n        this._target[0] = a[o];\n        this._target[1] = a[o + 1];\n        this._target[2] = a[o + 2];\n        this._target[3] = a[o + 3];\n        this.onChange();\n        return this;\n    }\n    toArray(a = [], o = 0) {\n        a[o] = this[0];\n        a[o + 1] = this[1];\n        a[o + 2] = this[2];\n        a[o + 3] = this[3];\n        return a;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ogl/src/math/Quat.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ogl/src/math/Vec3.js":
/*!*******************************************!*\
  !*** ./node_modules/ogl/src/math/Vec3.js ***!
  \*******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Vec3: () => (/* binding */ Vec3)\n/* harmony export */ });\n/* harmony import */ var _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./functions/Vec3Func.js */ \"(ssr)/./node_modules/ogl/src/math/functions/Vec3Func.js\");\n\nclass Vec3 extends Array {\n    constructor(x = 0, y = x, z = x){\n        super(x, y, z);\n        return this;\n    }\n    get x() {\n        return this[0];\n    }\n    get y() {\n        return this[1];\n    }\n    get z() {\n        return this[2];\n    }\n    set x(v) {\n        this[0] = v;\n    }\n    set y(v) {\n        this[1] = v;\n    }\n    set z(v) {\n        this[2] = v;\n    }\n    set(x, y = x, z = x) {\n        if (x.length) return this.copy(x);\n        _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.set(this, x, y, z);\n        return this;\n    }\n    copy(v) {\n        _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.copy(this, v);\n        return this;\n    }\n    add(va, vb) {\n        if (vb) _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.add(this, va, vb);\n        else _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.add(this, this, va);\n        return this;\n    }\n    sub(va, vb) {\n        if (vb) _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.subtract(this, va, vb);\n        else _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.subtract(this, this, va);\n        return this;\n    }\n    multiply(v) {\n        if (v.length) _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.multiply(this, this, v);\n        else _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.scale(this, this, v);\n        return this;\n    }\n    divide(v) {\n        if (v.length) _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.divide(this, this, v);\n        else _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.scale(this, this, 1 / v);\n        return this;\n    }\n    inverse(v = this) {\n        _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.inverse(this, v);\n        return this;\n    }\n    // Can't use 'length' as Array.prototype uses it\n    len() {\n        return _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.length(this);\n    }\n    distance(v) {\n        if (v) return _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.distance(this, v);\n        else return _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.length(this);\n    }\n    squaredLen() {\n        return _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.squaredLength(this);\n    }\n    squaredDistance(v) {\n        if (v) return _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.squaredDistance(this, v);\n        else return _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.squaredLength(this);\n    }\n    negate(v = this) {\n        _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.negate(this, v);\n        return this;\n    }\n    cross(va, vb) {\n        if (vb) _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.cross(this, va, vb);\n        else _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.cross(this, this, va);\n        return this;\n    }\n    scale(v) {\n        _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.scale(this, this, v);\n        return this;\n    }\n    normalize() {\n        _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.normalize(this, this);\n        return this;\n    }\n    dot(v) {\n        return _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.dot(this, v);\n    }\n    equals(v) {\n        return _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.exactEquals(this, v);\n    }\n    applyMatrix3(mat3) {\n        _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.transformMat3(this, this, mat3);\n        return this;\n    }\n    applyMatrix4(mat4) {\n        _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.transformMat4(this, this, mat4);\n        return this;\n    }\n    scaleRotateMatrix4(mat4) {\n        _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.scaleRotateMat4(this, this, mat4);\n        return this;\n    }\n    applyQuaternion(q) {\n        _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.transformQuat(this, this, q);\n        return this;\n    }\n    angle(v) {\n        return _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.angle(this, v);\n    }\n    lerp(v, t) {\n        _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.lerp(this, this, v, t);\n        return this;\n    }\n    smoothLerp(v, decay, dt) {\n        _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.smoothLerp(this, this, v, decay, dt);\n        return this;\n    }\n    clone() {\n        return new Vec3(this[0], this[1], this[2]);\n    }\n    fromArray(a, o = 0) {\n        this[0] = a[o];\n        this[1] = a[o + 1];\n        this[2] = a[o + 2];\n        return this;\n    }\n    toArray(a = [], o = 0) {\n        a[o] = this[0];\n        a[o + 1] = this[1];\n        a[o + 2] = this[2];\n        return a;\n    }\n    transformDirection(mat4) {\n        const x = this[0];\n        const y = this[1];\n        const z = this[2];\n        this[0] = mat4[0] * x + mat4[4] * y + mat4[8] * z;\n        this[1] = mat4[1] * x + mat4[5] * y + mat4[9] * z;\n        this[2] = mat4[2] * x + mat4[6] * y + mat4[10] * z;\n        return this.normalize();\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ogl/src/math/Vec3.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ogl/src/math/functions/EulerFunc.js":
/*!**********************************************************!*\
  !*** ./node_modules/ogl/src/math/functions/EulerFunc.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fromRotationMatrix: () => (/* binding */ fromRotationMatrix)\n/* harmony export */ });\n// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\nfunction fromRotationMatrix(out, m, order = \"YXZ\") {\n    if (order === \"XYZ\") {\n        out[1] = Math.asin(Math.min(Math.max(m[8], -1), 1));\n        if (Math.abs(m[8]) < 0.99999) {\n            out[0] = Math.atan2(-m[9], m[10]);\n            out[2] = Math.atan2(-m[4], m[0]);\n        } else {\n            out[0] = Math.atan2(m[6], m[5]);\n            out[2] = 0;\n        }\n    } else if (order === \"YXZ\") {\n        out[0] = Math.asin(-Math.min(Math.max(m[9], -1), 1));\n        if (Math.abs(m[9]) < 0.99999) {\n            out[1] = Math.atan2(m[8], m[10]);\n            out[2] = Math.atan2(m[1], m[5]);\n        } else {\n            out[1] = Math.atan2(-m[2], m[0]);\n            out[2] = 0;\n        }\n    } else if (order === \"ZXY\") {\n        out[0] = Math.asin(Math.min(Math.max(m[6], -1), 1));\n        if (Math.abs(m[6]) < 0.99999) {\n            out[1] = Math.atan2(-m[2], m[10]);\n            out[2] = Math.atan2(-m[4], m[5]);\n        } else {\n            out[1] = 0;\n            out[2] = Math.atan2(m[1], m[0]);\n        }\n    } else if (order === \"ZYX\") {\n        out[1] = Math.asin(-Math.min(Math.max(m[2], -1), 1));\n        if (Math.abs(m[2]) < 0.99999) {\n            out[0] = Math.atan2(m[6], m[10]);\n            out[2] = Math.atan2(m[1], m[0]);\n        } else {\n            out[0] = 0;\n            out[2] = Math.atan2(-m[4], m[5]);\n        }\n    } else if (order === \"YZX\") {\n        out[2] = Math.asin(Math.min(Math.max(m[1], -1), 1));\n        if (Math.abs(m[1]) < 0.99999) {\n            out[0] = Math.atan2(-m[9], m[5]);\n            out[1] = Math.atan2(-m[2], m[0]);\n        } else {\n            out[0] = 0;\n            out[1] = Math.atan2(m[8], m[10]);\n        }\n    } else if (order === \"XZY\") {\n        out[2] = Math.asin(-Math.min(Math.max(m[4], -1), 1));\n        if (Math.abs(m[4]) < 0.99999) {\n            out[0] = Math.atan2(m[6], m[5]);\n            out[1] = Math.atan2(m[8], m[0]);\n        } else {\n            out[0] = Math.atan2(-m[9], m[10]);\n            out[1] = 0;\n        }\n    }\n    return out;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb2dsL3NyYy9tYXRoL2Z1bmN0aW9ucy9FdWxlckZ1bmMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLHVFQUF1RTtBQUNoRSxTQUFTQSxtQkFBbUJDLEdBQUcsRUFBRUMsQ0FBQyxFQUFFQyxRQUFRLEtBQUs7SUFDcEQsSUFBSUEsVUFBVSxPQUFPO1FBQ2pCRixHQUFHLENBQUMsRUFBRSxHQUFHRyxLQUFLQyxJQUFJLENBQUNELEtBQUtFLEdBQUcsQ0FBQ0YsS0FBS0csR0FBRyxDQUFDTCxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSTtRQUNoRCxJQUFJRSxLQUFLSSxHQUFHLENBQUNOLENBQUMsQ0FBQyxFQUFFLElBQUksU0FBUztZQUMxQkQsR0FBRyxDQUFDLEVBQUUsR0FBR0csS0FBS0ssS0FBSyxDQUFDLENBQUNQLENBQUMsQ0FBQyxFQUFFLEVBQUVBLENBQUMsQ0FBQyxHQUFHO1lBQ2hDRCxHQUFHLENBQUMsRUFBRSxHQUFHRyxLQUFLSyxLQUFLLENBQUMsQ0FBQ1AsQ0FBQyxDQUFDLEVBQUUsRUFBRUEsQ0FBQyxDQUFDLEVBQUU7UUFDbkMsT0FBTztZQUNIRCxHQUFHLENBQUMsRUFBRSxHQUFHRyxLQUFLSyxLQUFLLENBQUNQLENBQUMsQ0FBQyxFQUFFLEVBQUVBLENBQUMsQ0FBQyxFQUFFO1lBQzlCRCxHQUFHLENBQUMsRUFBRSxHQUFHO1FBQ2I7SUFDSixPQUFPLElBQUlFLFVBQVUsT0FBTztRQUN4QkYsR0FBRyxDQUFDLEVBQUUsR0FBR0csS0FBS0MsSUFBSSxDQUFDLENBQUNELEtBQUtFLEdBQUcsQ0FBQ0YsS0FBS0csR0FBRyxDQUFDTCxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSTtRQUNqRCxJQUFJRSxLQUFLSSxHQUFHLENBQUNOLENBQUMsQ0FBQyxFQUFFLElBQUksU0FBUztZQUMxQkQsR0FBRyxDQUFDLEVBQUUsR0FBR0csS0FBS0ssS0FBSyxDQUFDUCxDQUFDLENBQUMsRUFBRSxFQUFFQSxD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RUFBRSxDQUFDLElBQUk7UUFDakQsSUFBSUUsS0FBS0ksR0FBRyxDQUFDTixDQUFDLENBQUMsRUFBRSxJQUFJLFNBQVM7WUFDMUJELEdBQUcsQ0FBQyxFQUFFLEdBQUdHLEtBQUtLLEtBQUssQ0FBQ1AsQ0FBQyxDQUFDLEVBQUUsRUFBRUEsQ0FBQyxDQUFDLEVBQUU7WUFDOUJELEdBQUcsQ0FBQyxFQUFFLEdBQUdHLEtBQUtLLEtBQUssQ0FBQ1AsQ0FBQyxDQUFDLEVBQUUsRUFBRUEsQ0FBQyxDQUFDLEVBQUU7UUFDbEMsT0FBTztZQUNIRCxHQUFHLENBQUMsRUFBRSxHQUFHRyxLQUFLSyxLQUFLLENBQUMsQ0FBQ1AsQ0FBQyxDQUFDLEVBQUUsRUFBRUEsQ0FBQyxDQUFDLEdBQUc7WUFDaENELEdBQUcsQ0FBQyxFQUFFLEdBQUc7UUFDYjtJQUNKO0lBRUEsT0FBT0E7QUFDWCIsInNvdXJjZXMiOlsid2VicGFjazovL3BlcmNldmlhLy4vbm9kZV9tb2R1bGVzL29nbC9zcmMvbWF0aC9mdW5jdGlvbnMvRXVsZXJGdW5jLmpzP2NiMzgiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gYXNzdW1lcyB0aGUgdXBwZXIgM3gzIG9mIG0gaXMgYSBwdXJlIHJvdGF0aW9uIG1hdHJpeCAoaS5lLCB1bnNjYWxlZClcbmV4cG9ydCBmdW5jdGlvbiBmcm9tUm90YXRpb25NYXRyaXgob3V0LCBtLCBvcmRlciA9ICdZWFonKSB7XG4gICAgaWYgKG9yZGVyID09PSAnWFlaJykge1xuICAgICAgICBvdXRbMV0gPSBNYXRoLmFzaW4oTWF0aC5taW4oTWF0aC5tYXgobVs4XSwgLTEpLCAxKSk7XG4gICAgICAgIGlmIChNYXRoLmFicyhtWzhdKSA8IDAuOTk5OTkpIHtcbiAgICAgICAgICAgIG91dFswXSA9IE1hdGguYXRhbjIoLW1bOV0sIG1bMTBdKTtcbiAgICAgICAgICAgIG91dFsyXSA9IE1hdGguYXRhbjIoLW1bNF0sIG1bMF0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgb3V0WzBdID0gTWF0aC5hdGFuMihtWzZdLCBtWzVdKTtcbiAgICAgICAgICAgIG91dFsyXSA9IDA7XG4gICAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG9yZGVyID09PSAnWVhaJykge1xuICAgICAgICBvdXRbMF0gPSBNYXRoLmFzaW4oLU1hdGgubWluKE1hdGgubWF4KG1bOV0sIC0xKSwgMSkpO1xuICAgICAgICBpZiAoTWF0aC5hYnMobVs5XSkgPCAwLjk5OTk5KSB7XG4gICAgICAgICAgICBvdXRbMV0gPSBNYXRoLmF0YW4yKG1bOF0sIG1bMTBdKTtcbiAgICAgICAgICAgIG91dFsyXSA9IE1hdGguYXRhbjIobVsxXSwgbVs1XSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvdXRbMV0gPSBNYXRoLmF0YW4yKC1tWzJdLCBtWzBdKTtcbiAgICAgICAgICAgIG91dFsyXSA9IDA7XG4gICAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG9yZGVyID09PSAnWlhZJykge1xuICAgICAgICBvdXRbMF0gPSBNYXRoLmFzaW4oTWF0aC5taW4oTWF0aC5tYXgobVs2XSwgLTEpLCAxKSk7XG4gICAgICAgIGlmIChNYXRoLmFicyhtWzZdKSA8IDAuOTk5OTkpIHtcbiAgICAgICAgICAgIG91dFsxXSA9IE1hdGguYXRhbjIoLW1bMl0sIG1bMTBdKTtcbiAgICAgICAgICAgIG91dFsyXSA9IE1hdGguYXRhbjIoLW1bNF0sIG1bNV0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgb3V0WzFdID0gMDtcbiAgICAgICAgICAgIG91dFsyXSA9IE1hdGguYXRhbjIobVsxXSwgbVswXSk7XG4gICAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG9yZGVyID09PSAnWllYJykge1xuICAgICAgICBvdXRbMV0gPSBNYXRoLmFzaW4oLU1hdGgubWluKE1hdGgubWF4KG1bMl0sIC0xKSwgMSkpO1xuICAgICAgICBpZiAoTWF0aC5hYnMobVsyXSkgPCAwLjk5OTk5KSB7XG4gICAgICAgICAgICBvdXRbMF0gPSBNYXRoLmF0YW4yKG1bNl0sIG1bMTBdKTtcbiAgICAgICAgICAgIG91dFsyXSA9IE1hdGguYXRhbjIobVsxXSwgbVswXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvdXRbMF0gPSAwO1xuICAgICAgICAgICAgb3V0WzJdID0gTWF0aC5hdGFuMigtbVs0XSwgbVs1XSk7XG4gICAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG9yZGVyID09PSAnWVpYJykge1xuICAgICAgICBvdXRbMl0gPSBNYXRoLmFzaW4oTWF0aC5taW4oTWF0aC5tYXgobVsxXSwgLTEpLCAxKSk7XG4gICAgICAgIGlmIChNYXRoLmFicyhtWzFdKSA8IDAuOTk5OTkpIHtcbiAgICAgICAgICAgIG91dFswXSA9IE1hdGguYXRhbjIoLW1bOV0sIG1bNV0pO1xuICAgICAgICAgICAgb3V0WzFdID0gTWF0aC5hdGFuMigtbVsyXSwgbVswXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvdXRbMF0gPSAwO1xuICAgICAgICAgICAgb3V0WzFdID0gTWF0aC5hdGFuMihtWzhdLCBtWzEwXSk7XG4gICAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG9yZGVyID09PSAnWFpZJykge1xuICAgICAgICBvdXRbMl0gPSBNYXRoLmFzaW4oLU1hdGgubWluKE1hdGgubWF4KG1bNF0sIC0xKSwgMSkpO1xuICAgICAgICBpZiAoTWF0aC5hYnMobVs0XSkgPCAwLjk5OTk5KSB7XG4gICAgICAgICAgICBvdXRbMF0gPSBNYXRoLmF0YW4yKG1bNl0sIG1bNV0pO1xuICAgICAgICAgICAgb3V0WzFdID0gTWF0aC5hdGFuMihtWzhdLCBtWzBdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG91dFswXSA9IE1hdGguYXRhbjIoLW1bOV0sIG1bMTBdKTtcbiAgICAgICAgICAgIG91dFsxXSA9IDA7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gb3V0O1xufVxuIl0sIm5hbWVzIjpbImZyb21Sb3RhdGlvbk1hdHJpeCIsIm91dCIsIm0iLCJvcmRlciIsIk1hdGgiLCJhc2luIiwibWluIiwibWF4IiwiYWJzIiwiYXRhbjIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ogl/src/math/functions/EulerFunc.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ogl/src/math/functions/Mat3Func.js":
/*!*********************************************************!*\
  !*** ./node_modules/ogl/src/math/functions/Mat3Func.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   add: () => (/* binding */ add),\n/* harmony export */   copy: () => (/* binding */ copy),\n/* harmony export */   determinant: () => (/* binding */ determinant),\n/* harmony export */   fromMat4: () => (/* binding */ fromMat4),\n/* harmony export */   fromQuat: () => (/* binding */ fromQuat),\n/* harmony export */   identity: () => (/* binding */ identity),\n/* harmony export */   invert: () => (/* binding */ invert),\n/* harmony export */   multiply: () => (/* binding */ multiply),\n/* harmony export */   multiplyScalar: () => (/* binding */ multiplyScalar),\n/* harmony export */   normalFromMat4: () => (/* binding */ normalFromMat4),\n/* harmony export */   projection: () => (/* binding */ projection),\n/* harmony export */   rotate: () => (/* binding */ rotate),\n/* harmony export */   scale: () => (/* binding */ scale),\n/* harmony export */   set: () => (/* binding */ set),\n/* harmony export */   subtract: () => (/* binding */ subtract),\n/* harmony export */   translate: () => (/* binding */ translate),\n/* harmony export */   transpose: () => (/* binding */ transpose)\n/* harmony export */ });\nconst EPSILON = 0.000001;\n/**\n * Copies the upper-left 3x3 values into the given mat3.\n *\n * @param {mat3} out the receiving 3x3 matrix\n * @param {mat4} a   the source 4x4 matrix\n * @returns {mat3} out\n */ function fromMat4(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[4];\n    out[4] = a[5];\n    out[5] = a[6];\n    out[6] = a[8];\n    out[7] = a[9];\n    out[8] = a[10];\n    return out;\n}\n/**\n * Calculates a 3x3 matrix from the given quaternion\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {quat} q Quaternion to create matrix from\n *\n * @returns {mat3} out\n */ function fromQuat(out, q) {\n    let x = q[0], y = q[1], z = q[2], w = q[3];\n    let x2 = x + x;\n    let y2 = y + y;\n    let z2 = z + z;\n    let xx = x * x2;\n    let yx = y * x2;\n    let yy = y * y2;\n    let zx = z * x2;\n    let zy = z * y2;\n    let zz = z * z2;\n    let wx = w * x2;\n    let wy = w * y2;\n    let wz = w * z2;\n    out[0] = 1 - yy - zz;\n    out[3] = yx - wz;\n    out[6] = zx + wy;\n    out[1] = yx + wz;\n    out[4] = 1 - xx - zz;\n    out[7] = zy - wx;\n    out[2] = zx - wy;\n    out[5] = zy + wx;\n    out[8] = 1 - xx - yy;\n    return out;\n}\n/**\n * Copy the values from one mat3 to another\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */ function copy(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    return out;\n}\n/**\n * Set the components of a mat3 to the given values\n *\n * @param {mat3} out the receiving matrix\n * @returns {mat3} out\n */ function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n    out[0] = m00;\n    out[1] = m01;\n    out[2] = m02;\n    out[3] = m10;\n    out[4] = m11;\n    out[5] = m12;\n    out[6] = m20;\n    out[7] = m21;\n    out[8] = m22;\n    return out;\n}\n/**\n * Set a mat3 to the identity matrix\n *\n * @param {mat3} out the receiving matrix\n * @returns {mat3} out\n */ function identity(out) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 1;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 1;\n    return out;\n}\n/**\n * Transpose the values of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */ function transpose(out, a) {\n    // If we are transposing ourselves we can skip a few steps but have to cache some values\n    if (out === a) {\n        let a01 = a[1], a02 = a[2], a12 = a[5];\n        out[1] = a[3];\n        out[2] = a[6];\n        out[3] = a01;\n        out[5] = a[7];\n        out[6] = a02;\n        out[7] = a12;\n    } else {\n        out[0] = a[0];\n        out[1] = a[3];\n        out[2] = a[6];\n        out[3] = a[1];\n        out[4] = a[4];\n        out[5] = a[7];\n        out[6] = a[2];\n        out[7] = a[5];\n        out[8] = a[8];\n    }\n    return out;\n}\n/**\n * Inverts a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */ function invert(out, a) {\n    let a00 = a[0], a01 = a[1], a02 = a[2];\n    let a10 = a[3], a11 = a[4], a12 = a[5];\n    let a20 = a[6], a21 = a[7], a22 = a[8];\n    let b01 = a22 * a11 - a12 * a21;\n    let b11 = -a22 * a10 + a12 * a20;\n    let b21 = a21 * a10 - a11 * a20;\n    // Calculate the determinant\n    let det = a00 * b01 + a01 * b11 + a02 * b21;\n    if (!det) {\n        return null;\n    }\n    det = 1.0 / det;\n    out[0] = b01 * det;\n    out[1] = (-a22 * a01 + a02 * a21) * det;\n    out[2] = (a12 * a01 - a02 * a11) * det;\n    out[3] = b11 * det;\n    out[4] = (a22 * a00 - a02 * a20) * det;\n    out[5] = (-a12 * a00 + a02 * a10) * det;\n    out[6] = b21 * det;\n    out[7] = (-a21 * a00 + a01 * a20) * det;\n    out[8] = (a11 * a00 - a01 * a10) * det;\n    return out;\n}\n/**\n * Calculates the determinant of a mat3\n *\n * @param {mat3} a the source matrix\n * @returns {Number} determinant of a\n */ function determinant(a) {\n    let a00 = a[0], a01 = a[1], a02 = a[2];\n    let a10 = a[3], a11 = a[4], a12 = a[5];\n    let a20 = a[6], a21 = a[7], a22 = a[8];\n    return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n}\n/**\n * Multiplies two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */ function multiply(out, a, b) {\n    let a00 = a[0], a01 = a[1], a02 = a[2];\n    let a10 = a[3], a11 = a[4], a12 = a[5];\n    let a20 = a[6], a21 = a[7], a22 = a[8];\n    let b00 = b[0], b01 = b[1], b02 = b[2];\n    let b10 = b[3], b11 = b[4], b12 = b[5];\n    let b20 = b[6], b21 = b[7], b22 = b[8];\n    out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n    out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n    out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n    out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n    out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n    out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n    out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n    out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n    out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n    return out;\n}\n/**\n * Translate a mat3 by the given vector\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to translate\n * @param {vec2} v vector to translate by\n * @returns {mat3} out\n */ function translate(out, a, v) {\n    let a00 = a[0], a01 = a[1], a02 = a[2], a10 = a[3], a11 = a[4], a12 = a[5], a20 = a[6], a21 = a[7], a22 = a[8], x = v[0], y = v[1];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a10;\n    out[4] = a11;\n    out[5] = a12;\n    out[6] = x * a00 + y * a10 + a20;\n    out[7] = x * a01 + y * a11 + a21;\n    out[8] = x * a02 + y * a12 + a22;\n    return out;\n}\n/**\n * Rotates a mat3 by the given angle\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */ function rotate(out, a, rad) {\n    let a00 = a[0], a01 = a[1], a02 = a[2], a10 = a[3], a11 = a[4], a12 = a[5], a20 = a[6], a21 = a[7], a22 = a[8], s = Math.sin(rad), c = Math.cos(rad);\n    out[0] = c * a00 + s * a10;\n    out[1] = c * a01 + s * a11;\n    out[2] = c * a02 + s * a12;\n    out[3] = c * a10 - s * a00;\n    out[4] = c * a11 - s * a01;\n    out[5] = c * a12 - s * a02;\n    out[6] = a20;\n    out[7] = a21;\n    out[8] = a22;\n    return out;\n}\n/**\n * Scales the mat3 by the dimensions in the given vec2\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to rotate\n * @param {vec2} v the vec2 to scale the matrix by\n * @returns {mat3} out\n **/ function scale(out, a, v) {\n    let x = v[0], y = v[1];\n    out[0] = x * a[0];\n    out[1] = x * a[1];\n    out[2] = x * a[2];\n    out[3] = y * a[3];\n    out[4] = y * a[4];\n    out[5] = y * a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    return out;\n}\n/**\n * Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {mat4} a Mat4 to derive the normal matrix from\n *\n * @returns {mat3} out\n */ function normalFromMat4(out, a) {\n    let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n    let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n    let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n    let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n    let b00 = a00 * a11 - a01 * a10;\n    let b01 = a00 * a12 - a02 * a10;\n    let b02 = a00 * a13 - a03 * a10;\n    let b03 = a01 * a12 - a02 * a11;\n    let b04 = a01 * a13 - a03 * a11;\n    let b05 = a02 * a13 - a03 * a12;\n    let b06 = a20 * a31 - a21 * a30;\n    let b07 = a20 * a32 - a22 * a30;\n    let b08 = a20 * a33 - a23 * a30;\n    let b09 = a21 * a32 - a22 * a31;\n    let b10 = a21 * a33 - a23 * a31;\n    let b11 = a22 * a33 - a23 * a32;\n    // Calculate the determinant\n    let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n    if (!det) {\n        return null;\n    }\n    det = 1.0 / det;\n    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n    out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n    out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n    out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n    out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n    out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n    out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n    out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n    out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n    return out;\n}\n/**\n * Generates a 2D projection matrix with the given bounds\n *\n * @param {mat3} out mat3 frustum matrix will be written into\n * @param {number} width Width of your gl context\n * @param {number} height Height of gl context\n * @returns {mat3} out\n */ function projection(out, width, height) {\n    out[0] = 2 / width;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = -2 / height;\n    out[5] = 0;\n    out[6] = -1;\n    out[7] = 1;\n    out[8] = 1;\n    return out;\n}\n/**\n * Adds two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */ function add(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    out[4] = a[4] + b[4];\n    out[5] = a[5] + b[5];\n    out[6] = a[6] + b[6];\n    out[7] = a[7] + b[7];\n    out[8] = a[8] + b[8];\n    return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */ function subtract(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    out[3] = a[3] - b[3];\n    out[4] = a[4] - b[4];\n    out[5] = a[5] - b[5];\n    out[6] = a[6] - b[6];\n    out[7] = a[7] - b[7];\n    out[8] = a[8] - b[8];\n    return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat3} out\n */ function multiplyScalar(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    out[4] = a[4] * b;\n    out[5] = a[5] * b;\n    out[6] = a[6] * b;\n    out[7] = a[7] * b;\n    out[8] = a[8] * b;\n    return out;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ogl/src/math/functions/Mat3Func.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ogl/src/math/functions/Mat4Func.js":
/*!*********************************************************!*\
  !*** ./node_modules/ogl/src/math/functions/Mat4Func.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   add: () => (/* binding */ add),\n/* harmony export */   compose: () => (/* binding */ compose),\n/* harmony export */   copy: () => (/* binding */ copy),\n/* harmony export */   decompose: () => (/* binding */ decompose),\n/* harmony export */   determinant: () => (/* binding */ determinant),\n/* harmony export */   fromQuat: () => (/* binding */ fromQuat),\n/* harmony export */   fromRotationTranslationScale: () => (/* binding */ fromRotationTranslationScale),\n/* harmony export */   getMaxScaleOnAxis: () => (/* binding */ getMaxScaleOnAxis),\n/* harmony export */   getRotation: () => (/* binding */ getRotation),\n/* harmony export */   getScaling: () => (/* binding */ getScaling),\n/* harmony export */   getTranslation: () => (/* binding */ getTranslation),\n/* harmony export */   identity: () => (/* binding */ identity),\n/* harmony export */   invert: () => (/* binding */ invert),\n/* harmony export */   multiply: () => (/* binding */ multiply),\n/* harmony export */   multiplyScalar: () => (/* binding */ multiplyScalar),\n/* harmony export */   ortho: () => (/* binding */ ortho),\n/* harmony export */   perspective: () => (/* binding */ perspective),\n/* harmony export */   rotate: () => (/* binding */ rotate),\n/* harmony export */   scale: () => (/* binding */ scale),\n/* harmony export */   set: () => (/* binding */ set),\n/* harmony export */   subtract: () => (/* binding */ subtract),\n/* harmony export */   targetTo: () => (/* binding */ targetTo),\n/* harmony export */   translate: () => (/* binding */ translate),\n/* harmony export */   transpose: () => (/* binding */ transpose)\n/* harmony export */ });\n/* harmony import */ var _Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Vec3Func.js */ \"(ssr)/./node_modules/ogl/src/math/functions/Vec3Func.js\");\n\nconst EPSILON = 0.000001;\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */ function copy(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n    return out;\n}\n/**\n * Set the components of a mat4 to the given values\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */ function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n    out[0] = m00;\n    out[1] = m01;\n    out[2] = m02;\n    out[3] = m03;\n    out[4] = m10;\n    out[5] = m11;\n    out[6] = m12;\n    out[7] = m13;\n    out[8] = m20;\n    out[9] = m21;\n    out[10] = m22;\n    out[11] = m23;\n    out[12] = m30;\n    out[13] = m31;\n    out[14] = m32;\n    out[15] = m33;\n    return out;\n}\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */ function identity(out) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = 1;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 1;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n}\n/**\n * Transpose the values of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */ function transpose(out, a) {\n    // If we are transposing ourselves we can skip a few steps but have to cache some values\n    if (out === a) {\n        let a01 = a[1], a02 = a[2], a03 = a[3];\n        let a12 = a[6], a13 = a[7];\n        let a23 = a[11];\n        out[1] = a[4];\n        out[2] = a[8];\n        out[3] = a[12];\n        out[4] = a01;\n        out[6] = a[9];\n        out[7] = a[13];\n        out[8] = a02;\n        out[9] = a12;\n        out[11] = a[14];\n        out[12] = a03;\n        out[13] = a13;\n        out[14] = a23;\n    } else {\n        out[0] = a[0];\n        out[1] = a[4];\n        out[2] = a[8];\n        out[3] = a[12];\n        out[4] = a[1];\n        out[5] = a[5];\n        out[6] = a[9];\n        out[7] = a[13];\n        out[8] = a[2];\n        out[9] = a[6];\n        out[10] = a[10];\n        out[11] = a[14];\n        out[12] = a[3];\n        out[13] = a[7];\n        out[14] = a[11];\n        out[15] = a[15];\n    }\n    return out;\n}\n/**\n * Inverts a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */ function invert(out, a) {\n    let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n    let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n    let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n    let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n    let b00 = a00 * a11 - a01 * a10;\n    let b01 = a00 * a12 - a02 * a10;\n    let b02 = a00 * a13 - a03 * a10;\n    let b03 = a01 * a12 - a02 * a11;\n    let b04 = a01 * a13 - a03 * a11;\n    let b05 = a02 * a13 - a03 * a12;\n    let b06 = a20 * a31 - a21 * a30;\n    let b07 = a20 * a32 - a22 * a30;\n    let b08 = a20 * a33 - a23 * a30;\n    let b09 = a21 * a32 - a22 * a31;\n    let b10 = a21 * a33 - a23 * a31;\n    let b11 = a22 * a33 - a23 * a32;\n    // Calculate the determinant\n    let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n    if (!det) {\n        return null;\n    }\n    det = 1.0 / det;\n    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n    out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n    out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n    out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n    out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n    out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n    out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n    out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n    out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n    out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n    out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n    out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n    out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n    out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n    out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n    out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n    return out;\n}\n/**\n * Calculates the determinant of a mat4\n *\n * @param {mat4} a the source matrix\n * @returns {Number} determinant of a\n */ function determinant(a) {\n    let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n    let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n    let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n    let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n    let b00 = a00 * a11 - a01 * a10;\n    let b01 = a00 * a12 - a02 * a10;\n    let b02 = a00 * a13 - a03 * a10;\n    let b03 = a01 * a12 - a02 * a11;\n    let b04 = a01 * a13 - a03 * a11;\n    let b05 = a02 * a13 - a03 * a12;\n    let b06 = a20 * a31 - a21 * a30;\n    let b07 = a20 * a32 - a22 * a30;\n    let b08 = a20 * a33 - a23 * a30;\n    let b09 = a21 * a32 - a22 * a31;\n    let b10 = a21 * a33 - a23 * a31;\n    let b11 = a22 * a33 - a23 * a32;\n    // Calculate the determinant\n    return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\n * Multiplies two mat4s\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */ function multiply(out, a, b) {\n    let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n    let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n    let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n    let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n    // Cache only the current line of the second matrix\n    let b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n    out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n    b0 = b[4];\n    b1 = b[5];\n    b2 = b[6];\n    b3 = b[7];\n    out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n    b0 = b[8];\n    b1 = b[9];\n    b2 = b[10];\n    b3 = b[11];\n    out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n    b0 = b[12];\n    b1 = b[13];\n    b2 = b[14];\n    b3 = b[15];\n    out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n    return out;\n}\n/**\n * Translate a mat4 by the given vector\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to translate\n * @param {vec3} v vector to translate by\n * @returns {mat4} out\n */ function translate(out, a, v) {\n    let x = v[0], y = v[1], z = v[2];\n    let a00, a01, a02, a03;\n    let a10, a11, a12, a13;\n    let a20, a21, a22, a23;\n    if (a === out) {\n        out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n        out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n        out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n        out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n    } else {\n        a00 = a[0];\n        a01 = a[1];\n        a02 = a[2];\n        a03 = a[3];\n        a10 = a[4];\n        a11 = a[5];\n        a12 = a[6];\n        a13 = a[7];\n        a20 = a[8];\n        a21 = a[9];\n        a22 = a[10];\n        a23 = a[11];\n        out[0] = a00;\n        out[1] = a01;\n        out[2] = a02;\n        out[3] = a03;\n        out[4] = a10;\n        out[5] = a11;\n        out[6] = a12;\n        out[7] = a13;\n        out[8] = a20;\n        out[9] = a21;\n        out[10] = a22;\n        out[11] = a23;\n        out[12] = a00 * x + a10 * y + a20 * z + a[12];\n        out[13] = a01 * x + a11 * y + a21 * z + a[13];\n        out[14] = a02 * x + a12 * y + a22 * z + a[14];\n        out[15] = a03 * x + a13 * y + a23 * z + a[15];\n    }\n    return out;\n}\n/**\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {vec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/ function scale(out, a, v) {\n    let x = v[0], y = v[1], z = v[2];\n    out[0] = a[0] * x;\n    out[1] = a[1] * x;\n    out[2] = a[2] * x;\n    out[3] = a[3] * x;\n    out[4] = a[4] * y;\n    out[5] = a[5] * y;\n    out[6] = a[6] * y;\n    out[7] = a[7] * y;\n    out[8] = a[8] * z;\n    out[9] = a[9] * z;\n    out[10] = a[10] * z;\n    out[11] = a[11] * z;\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n    return out;\n}\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {vec3} axis the axis to rotate around\n * @returns {mat4} out\n */ function rotate(out, a, rad, axis) {\n    let x = axis[0], y = axis[1], z = axis[2];\n    let len = Math.hypot(x, y, z);\n    let s, c, t;\n    let a00, a01, a02, a03;\n    let a10, a11, a12, a13;\n    let a20, a21, a22, a23;\n    let b00, b01, b02;\n    let b10, b11, b12;\n    let b20, b21, b22;\n    if (Math.abs(len) < EPSILON) {\n        return null;\n    }\n    len = 1 / len;\n    x *= len;\n    y *= len;\n    z *= len;\n    s = Math.sin(rad);\n    c = Math.cos(rad);\n    t = 1 - c;\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    // Construct the elements of the rotation matrix\n    b00 = x * x * t + c;\n    b01 = y * x * t + z * s;\n    b02 = z * x * t - y * s;\n    b10 = x * y * t - z * s;\n    b11 = y * y * t + c;\n    b12 = z * y * t + x * s;\n    b20 = x * z * t + y * s;\n    b21 = y * z * t - x * s;\n    b22 = z * z * t + c;\n    // Perform rotation-specific matrix multiplication\n    out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n    out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n    out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n    out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n    out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n    out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n    out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n    out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n    out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n    out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n    out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n    out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n    if (a !== out) {\n        // If the source and destination differ, copy the unchanged last row\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    }\n    return out;\n}\n/**\n * Returns the translation vector component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslation,\n *  the returned vector will be the same as the translation vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive translation component\n * @param  {mat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */ function getTranslation(out, mat) {\n    out[0] = mat[12];\n    out[1] = mat[13];\n    out[2] = mat[14];\n    return out;\n}\n/**\n * Returns the scaling factor component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslationScale\n *  with a normalized Quaternion paramter, the returned vector will be\n *  the same as the scaling vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive scaling factor component\n * @param  {mat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */ function getScaling(out, mat) {\n    let m11 = mat[0];\n    let m12 = mat[1];\n    let m13 = mat[2];\n    let m21 = mat[4];\n    let m22 = mat[5];\n    let m23 = mat[6];\n    let m31 = mat[8];\n    let m32 = mat[9];\n    let m33 = mat[10];\n    out[0] = Math.hypot(m11, m12, m13);\n    out[1] = Math.hypot(m21, m22, m23);\n    out[2] = Math.hypot(m31, m32, m33);\n    return out;\n}\nfunction getMaxScaleOnAxis(mat) {\n    let m11 = mat[0];\n    let m12 = mat[1];\n    let m13 = mat[2];\n    let m21 = mat[4];\n    let m22 = mat[5];\n    let m23 = mat[6];\n    let m31 = mat[8];\n    let m32 = mat[9];\n    let m33 = mat[10];\n    const x = m11 * m11 + m12 * m12 + m13 * m13;\n    const y = m21 * m21 + m22 * m22 + m23 * m23;\n    const z = m31 * m31 + m32 * m32 + m33 * m33;\n    return Math.sqrt(Math.max(x, y, z));\n}\n/**\n * Returns a quaternion representing the rotational component\n *  of a transformation matrix. If a matrix is built with\n *  fromRotationTranslation, the returned quaternion will be the\n *  same as the quaternion originally supplied.\n * @param {quat} out Quaternion to receive the rotation component\n * @param {mat4} mat Matrix to be decomposed (input)\n * @return {quat} out\n */ const getRotation = function() {\n    const temp = [\n        1,\n        1,\n        1\n    ];\n    return function(out, mat) {\n        let scaling = temp;\n        getScaling(scaling, mat);\n        let is1 = 1 / scaling[0];\n        let is2 = 1 / scaling[1];\n        let is3 = 1 / scaling[2];\n        let sm11 = mat[0] * is1;\n        let sm12 = mat[1] * is2;\n        let sm13 = mat[2] * is3;\n        let sm21 = mat[4] * is1;\n        let sm22 = mat[5] * is2;\n        let sm23 = mat[6] * is3;\n        let sm31 = mat[8] * is1;\n        let sm32 = mat[9] * is2;\n        let sm33 = mat[10] * is3;\n        let trace = sm11 + sm22 + sm33;\n        let S = 0;\n        if (trace > 0) {\n            S = Math.sqrt(trace + 1.0) * 2;\n            out[3] = 0.25 * S;\n            out[0] = (sm23 - sm32) / S;\n            out[1] = (sm31 - sm13) / S;\n            out[2] = (sm12 - sm21) / S;\n        } else if (sm11 > sm22 && sm11 > sm33) {\n            S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n            out[3] = (sm23 - sm32) / S;\n            out[0] = 0.25 * S;\n            out[1] = (sm12 + sm21) / S;\n            out[2] = (sm31 + sm13) / S;\n        } else if (sm22 > sm33) {\n            S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n            out[3] = (sm31 - sm13) / S;\n            out[0] = (sm12 + sm21) / S;\n            out[1] = 0.25 * S;\n            out[2] = (sm23 + sm32) / S;\n        } else {\n            S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n            out[3] = (sm12 - sm21) / S;\n            out[0] = (sm31 + sm13) / S;\n            out[1] = (sm23 + sm32) / S;\n            out[2] = 0.25 * S;\n        }\n        return out;\n    };\n}();\n/**\n * From glTF-Transform\n * https://github.com/donmccurdy/glTF-Transform/blob/main/packages/core/src/utils/math-utils.ts\n *\n * Decompose a mat4 to TRS properties.\n *\n * Equivalent to the Matrix4 decompose() method in three.js, and intentionally not using the\n * gl-matrix version. See: https://github.com/toji/gl-matrix/issues/408\n *\n * @param {mat4} srcMat Matrix element, to be decomposed to TRS properties.\n * @param {quat4} dstRotation Rotation element, to be overwritten.\n * @param {vec3} dstTranslation Translation element, to be overwritten.\n * @param {vec3} dstScale Scale element, to be overwritten\n */ function decompose(srcMat, dstRotation, dstTranslation, dstScale) {\n    let sx = _Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.length([\n        srcMat[0],\n        srcMat[1],\n        srcMat[2]\n    ]);\n    const sy = _Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.length([\n        srcMat[4],\n        srcMat[5],\n        srcMat[6]\n    ]);\n    const sz = _Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.length([\n        srcMat[8],\n        srcMat[9],\n        srcMat[10]\n    ]);\n    // if determine is negative, we need to invert one scale\n    const det = determinant(srcMat);\n    if (det < 0) sx = -sx;\n    dstTranslation[0] = srcMat[12];\n    dstTranslation[1] = srcMat[13];\n    dstTranslation[2] = srcMat[14];\n    // scale the rotation part\n    const _m1 = srcMat.slice();\n    const invSX = 1 / sx;\n    const invSY = 1 / sy;\n    const invSZ = 1 / sz;\n    _m1[0] *= invSX;\n    _m1[1] *= invSX;\n    _m1[2] *= invSX;\n    _m1[4] *= invSY;\n    _m1[5] *= invSY;\n    _m1[6] *= invSY;\n    _m1[8] *= invSZ;\n    _m1[9] *= invSZ;\n    _m1[10] *= invSZ;\n    getRotation(dstRotation, _m1);\n    dstScale[0] = sx;\n    dstScale[1] = sy;\n    dstScale[2] = sz;\n}\n/**\n * From glTF-Transform\n * https://github.com/donmccurdy/glTF-Transform/blob/main/packages/core/src/utils/math-utils.ts\n *\n * Compose TRS properties to a mat4.\n *\n * Equivalent to the Matrix4 compose() method in three.js, and intentionally not using the\n * gl-matrix version. See: https://github.com/toji/gl-matrix/issues/408\n *\n * @param {mat4} dstMat Matrix element, to be modified and returned.\n * @param {quat4} srcRotation Rotation element of matrix.\n * @param {vec3} srcTranslation Translation element of matrix.\n * @param {vec3} srcScale Scale element of matrix.\n * @returns {mat4} dstMat, overwritten to mat4 equivalent of given TRS properties.\n */ function compose(dstMat, srcRotation, srcTranslation, srcScale) {\n    const te = dstMat;\n    const x = srcRotation[0], y = srcRotation[1], z = srcRotation[2], w = srcRotation[3];\n    const x2 = x + x, y2 = y + y, z2 = z + z;\n    const xx = x * x2, xy = x * y2, xz = x * z2;\n    const yy = y * y2, yz = y * z2, zz = z * z2;\n    const wx = w * x2, wy = w * y2, wz = w * z2;\n    const sx = srcScale[0], sy = srcScale[1], sz = srcScale[2];\n    te[0] = (1 - (yy + zz)) * sx;\n    te[1] = (xy + wz) * sx;\n    te[2] = (xz - wy) * sx;\n    te[3] = 0;\n    te[4] = (xy - wz) * sy;\n    te[5] = (1 - (xx + zz)) * sy;\n    te[6] = (yz + wx) * sy;\n    te[7] = 0;\n    te[8] = (xz + wy) * sz;\n    te[9] = (yz - wx) * sz;\n    te[10] = (1 - (xx + yy)) * sz;\n    te[11] = 0;\n    te[12] = srcTranslation[0];\n    te[13] = srcTranslation[1];\n    te[14] = srcTranslation[2];\n    te[15] = 1;\n    return te;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @param {vec3} s Scaling vector\n * @returns {mat4} out\n */ function fromRotationTranslationScale(out, q, v, s) {\n    // Quaternion math\n    let x = q[0], y = q[1], z = q[2], w = q[3];\n    let x2 = x + x;\n    let y2 = y + y;\n    let z2 = z + z;\n    let xx = x * x2;\n    let xy = x * y2;\n    let xz = x * z2;\n    let yy = y * y2;\n    let yz = y * z2;\n    let zz = z * z2;\n    let wx = w * x2;\n    let wy = w * y2;\n    let wz = w * z2;\n    let sx = s[0];\n    let sy = s[1];\n    let sz = s[2];\n    out[0] = (1 - (yy + zz)) * sx;\n    out[1] = (xy + wz) * sx;\n    out[2] = (xz - wy) * sx;\n    out[3] = 0;\n    out[4] = (xy - wz) * sy;\n    out[5] = (1 - (xx + zz)) * sy;\n    out[6] = (yz + wx) * sy;\n    out[7] = 0;\n    out[8] = (xz + wy) * sz;\n    out[9] = (yz - wx) * sz;\n    out[10] = (1 - (xx + yy)) * sz;\n    out[11] = 0;\n    out[12] = v[0];\n    out[13] = v[1];\n    out[14] = v[2];\n    out[15] = 1;\n    return out;\n}\n/**\n * Calculates a 4x4 matrix from the given quaternion\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat} q Quaternion to create matrix from\n *\n * @returns {mat4} out\n */ function fromQuat(out, q) {\n    let x = q[0], y = q[1], z = q[2], w = q[3];\n    let x2 = x + x;\n    let y2 = y + y;\n    let z2 = z + z;\n    let xx = x * x2;\n    let yx = y * x2;\n    let yy = y * y2;\n    let zx = z * x2;\n    let zy = z * y2;\n    let zz = z * z2;\n    let wx = w * x2;\n    let wy = w * y2;\n    let wz = w * z2;\n    out[0] = 1 - yy - zz;\n    out[1] = yx + wz;\n    out[2] = zx - wy;\n    out[3] = 0;\n    out[4] = yx - wz;\n    out[5] = 1 - xx - zz;\n    out[6] = zy + wx;\n    out[7] = 0;\n    out[8] = zx + wy;\n    out[9] = zy - wx;\n    out[10] = 1 - xx - yy;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n}\n/**\n * Generates a perspective projection matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */ function perspective(out, fovy, aspect, near, far) {\n    let f = 1.0 / Math.tan(fovy / 2);\n    let nf = 1 / (near - far);\n    out[0] = f / aspect;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = f;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = (far + near) * nf;\n    out[11] = -1;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 2 * far * near * nf;\n    out[15] = 0;\n    return out;\n}\n/**\n * Generates a orthogonal projection matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */ function ortho(out, left, right, bottom, top, near, far) {\n    let lr = 1 / (left - right);\n    let bt = 1 / (bottom - top);\n    let nf = 1 / (near - far);\n    out[0] = -2 * lr;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = -2 * bt;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 2 * nf;\n    out[11] = 0;\n    out[12] = (left + right) * lr;\n    out[13] = (top + bottom) * bt;\n    out[14] = (far + near) * nf;\n    out[15] = 1;\n    return out;\n}\n/**\n * Generates a matrix that makes something look at something else.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {vec3} eye Position of the viewer\n * @param {vec3} target Point the viewer is looking at\n * @param {vec3} up vec3 pointing up\n * @returns {mat4} out\n */ function targetTo(out, eye, target, up) {\n    let eyex = eye[0], eyey = eye[1], eyez = eye[2], upx = up[0], upy = up[1], upz = up[2];\n    let z0 = eyex - target[0], z1 = eyey - target[1], z2 = eyez - target[2];\n    let len = z0 * z0 + z1 * z1 + z2 * z2;\n    if (len === 0) {\n        // eye and target are in the same position\n        z2 = 1;\n    } else {\n        len = 1 / Math.sqrt(len);\n        z0 *= len;\n        z1 *= len;\n        z2 *= len;\n    }\n    let x0 = upy * z2 - upz * z1, x1 = upz * z0 - upx * z2, x2 = upx * z1 - upy * z0;\n    len = x0 * x0 + x1 * x1 + x2 * x2;\n    if (len === 0) {\n        // up and z are parallel\n        if (upz) {\n            upx += 1e-6;\n        } else if (upy) {\n            upz += 1e-6;\n        } else {\n            upy += 1e-6;\n        }\n        x0 = upy * z2 - upz * z1, x1 = upz * z0 - upx * z2, x2 = upx * z1 - upy * z0;\n        len = x0 * x0 + x1 * x1 + x2 * x2;\n    }\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n    out[0] = x0;\n    out[1] = x1;\n    out[2] = x2;\n    out[3] = 0;\n    out[4] = z1 * x2 - z2 * x1;\n    out[5] = z2 * x0 - z0 * x2;\n    out[6] = z0 * x1 - z1 * x0;\n    out[7] = 0;\n    out[8] = z0;\n    out[9] = z1;\n    out[10] = z2;\n    out[11] = 0;\n    out[12] = eyex;\n    out[13] = eyey;\n    out[14] = eyez;\n    out[15] = 1;\n    return out;\n}\n/**\n * Adds two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */ function add(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    out[4] = a[4] + b[4];\n    out[5] = a[5] + b[5];\n    out[6] = a[6] + b[6];\n    out[7] = a[7] + b[7];\n    out[8] = a[8] + b[8];\n    out[9] = a[9] + b[9];\n    out[10] = a[10] + b[10];\n    out[11] = a[11] + b[11];\n    out[12] = a[12] + b[12];\n    out[13] = a[13] + b[13];\n    out[14] = a[14] + b[14];\n    out[15] = a[15] + b[15];\n    return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */ function subtract(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    out[3] = a[3] - b[3];\n    out[4] = a[4] - b[4];\n    out[5] = a[5] - b[5];\n    out[6] = a[6] - b[6];\n    out[7] = a[7] - b[7];\n    out[8] = a[8] - b[8];\n    out[9] = a[9] - b[9];\n    out[10] = a[10] - b[10];\n    out[11] = a[11] - b[11];\n    out[12] = a[12] - b[12];\n    out[13] = a[13] - b[13];\n    out[14] = a[14] - b[14];\n    out[15] = a[15] - b[15];\n    return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat4} out\n */ function multiplyScalar(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    out[4] = a[4] * b;\n    out[5] = a[5] * b;\n    out[6] = a[6] * b;\n    out[7] = a[7] * b;\n    out[8] = a[8] * b;\n    out[9] = a[9] * b;\n    out[10] = a[10] * b;\n    out[11] = a[11] * b;\n    out[12] = a[12] * b;\n    out[13] = a[13] * b;\n    out[14] = a[14] * b;\n    out[15] = a[15] * b;\n    return out;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ogl/src/math/functions/Mat4Func.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ogl/src/math/functions/QuatFunc.js":
/*!*********************************************************!*\
  !*** ./node_modules/ogl/src/math/functions/QuatFunc.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   add: () => (/* binding */ add),\n/* harmony export */   conjugate: () => (/* binding */ conjugate),\n/* harmony export */   copy: () => (/* binding */ copy),\n/* harmony export */   dot: () => (/* binding */ dot),\n/* harmony export */   fromEuler: () => (/* binding */ fromEuler),\n/* harmony export */   fromMat3: () => (/* binding */ fromMat3),\n/* harmony export */   identity: () => (/* binding */ identity),\n/* harmony export */   invert: () => (/* binding */ invert),\n/* harmony export */   length: () => (/* binding */ length),\n/* harmony export */   lerp: () => (/* binding */ lerp),\n/* harmony export */   multiply: () => (/* binding */ multiply),\n/* harmony export */   normalize: () => (/* binding */ normalize),\n/* harmony export */   rotateX: () => (/* binding */ rotateX),\n/* harmony export */   rotateY: () => (/* binding */ rotateY),\n/* harmony export */   rotateZ: () => (/* binding */ rotateZ),\n/* harmony export */   scale: () => (/* binding */ scale),\n/* harmony export */   set: () => (/* binding */ set),\n/* harmony export */   setAxisAngle: () => (/* binding */ setAxisAngle),\n/* harmony export */   slerp: () => (/* binding */ slerp)\n/* harmony export */ });\n/* harmony import */ var _Vec4Func_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Vec4Func.js */ \"(ssr)/./node_modules/ogl/src/math/functions/Vec4Func.js\");\n\n/**\n * Set a quat to the identity quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */ function identity(out) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    return out;\n}\n/**\n * Sets a quat from the given angle and rotation axis,\n * then returns it.\n *\n * @param {quat} out the receiving quaternion\n * @param {vec3} axis the axis around which to rotate\n * @param {Number} rad the angle in radians\n * @returns {quat} out\n **/ function setAxisAngle(out, axis, rad) {\n    rad = rad * 0.5;\n    let s = Math.sin(rad);\n    out[0] = s * axis[0];\n    out[1] = s * axis[1];\n    out[2] = s * axis[2];\n    out[3] = Math.cos(rad);\n    return out;\n}\n/**\n * Multiplies two quats\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {quat} out\n */ function multiply(out, a, b) {\n    let ax = a[0], ay = a[1], az = a[2], aw = a[3];\n    let bx = b[0], by = b[1], bz = b[2], bw = b[3];\n    out[0] = ax * bw + aw * bx + ay * bz - az * by;\n    out[1] = ay * bw + aw * by + az * bx - ax * bz;\n    out[2] = az * bw + aw * bz + ax * by - ay * bx;\n    out[3] = aw * bw - ax * bx - ay * by - az * bz;\n    return out;\n}\n/**\n * Rotates a quaternion by the given angle about the X axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */ function rotateX(out, a, rad) {\n    rad *= 0.5;\n    let ax = a[0], ay = a[1], az = a[2], aw = a[3];\n    let bx = Math.sin(rad), bw = Math.cos(rad);\n    out[0] = ax * bw + aw * bx;\n    out[1] = ay * bw + az * bx;\n    out[2] = az * bw - ay * bx;\n    out[3] = aw * bw - ax * bx;\n    return out;\n}\n/**\n * Rotates a quaternion by the given angle about the Y axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */ function rotateY(out, a, rad) {\n    rad *= 0.5;\n    let ax = a[0], ay = a[1], az = a[2], aw = a[3];\n    let by = Math.sin(rad), bw = Math.cos(rad);\n    out[0] = ax * bw - az * by;\n    out[1] = ay * bw + aw * by;\n    out[2] = az * bw + ax * by;\n    out[3] = aw * bw - ay * by;\n    return out;\n}\n/**\n * Rotates a quaternion by the given angle about the Z axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */ function rotateZ(out, a, rad) {\n    rad *= 0.5;\n    let ax = a[0], ay = a[1], az = a[2], aw = a[3];\n    let bz = Math.sin(rad), bw = Math.cos(rad);\n    out[0] = ax * bw + ay * bz;\n    out[1] = ay * bw - ax * bz;\n    out[2] = az * bw + aw * bz;\n    out[3] = aw * bw - az * bz;\n    return out;\n}\n/**\n * Performs a spherical linear interpolation between two quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {quat} out\n */ function slerp(out, a, b, t) {\n    // benchmarks:\n    //    http://jsperf.com/quaternion-slerp-implementations\n    let ax = a[0], ay = a[1], az = a[2], aw = a[3];\n    let bx = b[0], by = b[1], bz = b[2], bw = b[3];\n    let omega, cosom, sinom, scale0, scale1;\n    // calc cosine\n    cosom = ax * bx + ay * by + az * bz + aw * bw;\n    // adjust signs (if necessary)\n    if (cosom < 0.0) {\n        cosom = -cosom;\n        bx = -bx;\n        by = -by;\n        bz = -bz;\n        bw = -bw;\n    }\n    // calculate coefficients\n    if (1.0 - cosom > 0.000001) {\n        // standard case (slerp)\n        omega = Math.acos(cosom);\n        sinom = Math.sin(omega);\n        scale0 = Math.sin((1.0 - t) * omega) / sinom;\n        scale1 = Math.sin(t * omega) / sinom;\n    } else {\n        // \"from\" and \"to\" quaternions are very close\n        //  ... so we can do a linear interpolation\n        scale0 = 1.0 - t;\n        scale1 = t;\n    }\n    // calculate final values\n    out[0] = scale0 * ax + scale1 * bx;\n    out[1] = scale0 * ay + scale1 * by;\n    out[2] = scale0 * az + scale1 * bz;\n    out[3] = scale0 * aw + scale1 * bw;\n    return out;\n}\n/**\n * Calculates the inverse of a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate inverse of\n * @returns {quat} out\n */ function invert(out, a) {\n    let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n    let dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\n    let invDot = dot ? 1.0 / dot : 0;\n    // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n    out[0] = -a0 * invDot;\n    out[1] = -a1 * invDot;\n    out[2] = -a2 * invDot;\n    out[3] = a3 * invDot;\n    return out;\n}\n/**\n * Calculates the conjugate of a quat\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate conjugate of\n * @returns {quat} out\n */ function conjugate(out, a) {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    out[2] = -a[2];\n    out[3] = a[3];\n    return out;\n}\n/**\n * Creates a quaternion from the given 3x3 rotation matrix.\n *\n * NOTE: The resultant quaternion is not normalized, so you should be sure\n * to renormalize the quaternion yourself where necessary.\n *\n * @param {quat} out the receiving quaternion\n * @param {mat3} m rotation matrix\n * @returns {quat} out\n * @function\n */ function fromMat3(out, m) {\n    // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n    // article \"Quaternion Calculus and Fast Animation\".\n    let fTrace = m[0] + m[4] + m[8];\n    let fRoot;\n    if (fTrace > 0.0) {\n        // |w| > 1/2, may as well choose w > 1/2\n        fRoot = Math.sqrt(fTrace + 1.0); // 2w\n        out[3] = 0.5 * fRoot;\n        fRoot = 0.5 / fRoot; // 1/(4w)\n        out[0] = (m[5] - m[7]) * fRoot;\n        out[1] = (m[6] - m[2]) * fRoot;\n        out[2] = (m[1] - m[3]) * fRoot;\n    } else {\n        // |w| <= 1/2\n        let i = 0;\n        if (m[4] > m[0]) i = 1;\n        if (m[8] > m[i * 3 + i]) i = 2;\n        let j = (i + 1) % 3;\n        let k = (i + 2) % 3;\n        fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);\n        out[i] = 0.5 * fRoot;\n        fRoot = 0.5 / fRoot;\n        out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;\n        out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\n        out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\n    }\n    return out;\n}\n/**\n * Creates a quaternion from the given euler angle x, y, z.\n *\n * @param {quat} out the receiving quaternion\n * @param {vec3} euler Angles to rotate around each axis in degrees.\n * @param {String} order detailing order of operations. Default 'XYZ'.\n * @returns {quat} out\n * @function\n */ function fromEuler(out, euler, order = \"YXZ\") {\n    let sx = Math.sin(euler[0] * 0.5);\n    let cx = Math.cos(euler[0] * 0.5);\n    let sy = Math.sin(euler[1] * 0.5);\n    let cy = Math.cos(euler[1] * 0.5);\n    let sz = Math.sin(euler[2] * 0.5);\n    let cz = Math.cos(euler[2] * 0.5);\n    if (order === \"XYZ\") {\n        out[0] = sx * cy * cz + cx * sy * sz;\n        out[1] = cx * sy * cz - sx * cy * sz;\n        out[2] = cx * cy * sz + sx * sy * cz;\n        out[3] = cx * cy * cz - sx * sy * sz;\n    } else if (order === \"YXZ\") {\n        out[0] = sx * cy * cz + cx * sy * sz;\n        out[1] = cx * sy * cz - sx * cy * sz;\n        out[2] = cx * cy * sz - sx * sy * cz;\n        out[3] = cx * cy * cz + sx * sy * sz;\n    } else if (order === \"ZXY\") {\n        out[0] = sx * cy * cz - cx * sy * sz;\n        out[1] = cx * sy * cz + sx * cy * sz;\n        out[2] = cx * cy * sz + sx * sy * cz;\n        out[3] = cx * cy * cz - sx * sy * sz;\n    } else if (order === \"ZYX\") {\n        out[0] = sx * cy * cz - cx * sy * sz;\n        out[1] = cx * sy * cz + sx * cy * sz;\n        out[2] = cx * cy * sz - sx * sy * cz;\n        out[3] = cx * cy * cz + sx * sy * sz;\n    } else if (order === \"YZX\") {\n        out[0] = sx * cy * cz + cx * sy * sz;\n        out[1] = cx * sy * cz + sx * cy * sz;\n        out[2] = cx * cy * sz - sx * sy * cz;\n        out[3] = cx * cy * cz - sx * sy * sz;\n    } else if (order === \"XZY\") {\n        out[0] = sx * cy * cz - cx * sy * sz;\n        out[1] = cx * sy * cz - sx * cy * sz;\n        out[2] = cx * cy * sz + sx * sy * cz;\n        out[3] = cx * cy * cz + sx * sy * sz;\n    }\n    return out;\n}\n/**\n * Copy the values from one quat to another\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the source quaternion\n * @returns {quat} out\n * @function\n */ const copy = _Vec4Func_js__WEBPACK_IMPORTED_MODULE_0__.copy;\n/**\n * Set the components of a quat to the given values\n *\n * @param {quat} out the receiving quaternion\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} out\n * @function\n */ const set = _Vec4Func_js__WEBPACK_IMPORTED_MODULE_0__.set;\n/**\n * Adds two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {quat} out\n * @function\n */ const add = _Vec4Func_js__WEBPACK_IMPORTED_MODULE_0__.add;\n/**\n * Scales a quat by a scalar number\n *\n * @param {quat} out the receiving vector\n * @param {quat} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {quat} out\n * @function\n */ const scale = _Vec4Func_js__WEBPACK_IMPORTED_MODULE_0__.scale;\n/**\n * Calculates the dot product of two quat's\n *\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {Number} dot product of a and b\n * @function\n */ const dot = _Vec4Func_js__WEBPACK_IMPORTED_MODULE_0__.dot;\n/**\n * Performs a linear interpolation between two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {quat} out\n * @function\n */ const lerp = _Vec4Func_js__WEBPACK_IMPORTED_MODULE_0__.lerp;\n/**\n * Calculates the length of a quat\n *\n * @param {quat} a vector to calculate length of\n * @returns {Number} length of a\n */ const length = _Vec4Func_js__WEBPACK_IMPORTED_MODULE_0__.length;\n/**\n * Normalize a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quaternion to normalize\n * @returns {quat} out\n * @function\n */ const normalize = _Vec4Func_js__WEBPACK_IMPORTED_MODULE_0__.normalize;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb2dsL3NyYy9tYXRoL2Z1bmN0aW9ucy9RdWF0RnVuYy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFzQztBQUV0Qzs7Ozs7Q0FLQyxHQUNNLFNBQVNDLFNBQVNDLEdBQUc7SUFDeEJBLEdBQUcsQ0FBQyxFQUFFLEdBQUc7SUFDVEEsR0FBRyxDQUFDLEVBQUUsR0FBRztJQUNUQSxHQUFHLENBQUMsRUFBRSxHQUFHO0lBQ1RBLEdBQUcsQ0FBQyxFQUFFLEdBQUc7SUFDVCxPQUFPQTtBQUNYO0FBRUE7Ozs7Ozs7O0VBUUUsR0FDSyxTQUFTQyxhQUFhRCxHQUFHLEVBQUVFLElBQUksRUFBRUMsR0FBRztJQUN2Q0EsTUFBTUEsTUFBTTtJQUNaLElBQUlDLElBQUlDLEtBQUtDLEdBQUcsQ0FBQ0g7SUFDakJILEdBQUcsQ0FBQyxFQUFFLEdBQUdJLElBQUlGLElBQUksQ0FBQyxFQUFFO0lBQ3BCRixHQUFHLENBQUMsRUFBRSxHQUFHSSxJQUFJRixJQUFJLENBQUMsRUFBRTtJQUNwQkYsR0FBRyxDQUFDLEVBQUUsR0FBR0ksSUFBSUYsSUFBSSxDQUFDLEVBQUU7SUFDcEJGLEdBQUcsQ0FBQyxFQUFFLEdBQUdLLEtBQUtFLEdBQUcsQ0FBQ0o7SUFDbEIsT0FBT0g7QUFDWDtBQUVBOzs7Ozs7O0NBT0MsR0FDTSxTQUFTUSxTQUFTUixHQUFHLEVBQUVTLENBQUMsRUFBRUMsQ0FBQztJQUM5QixJQUFJQyxLQUFLRixDQUFDLENBQUMsRUFBRSxFQUNURyxLQUFLSCxDQUFDLENBQUMsRUFBRSxFQUNUSSxLQUFLSixDQUFDLENBQUMsRUFBRSxFQUNUSyxLQUFLTCxDQUFDLENBQUMsRUFBRTtJQUNiLElBQUlNLEtBQUtMLENBQUMsQ0FBQyxFQUFFLEVBQ1RNLEtBQUtOLENBQUMsQ0FBQyxFQUFFLEVBQ1RPLEtBQUtQLENBQUMsQ0FBQyxFQUFFLEVBQ1RRLEtBQUtSLENBQUMsQ0FBQyxFQUFFO0lBRWJWLEdBQUcsQ0FB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QmhELEdBQUcsQ0FBQyxFQUFFLEdBQUdpRCxLQUFLRyxLQUFLRSxLQUFLSixLQUFLQyxLQUFLRTtRQUNsQ3JELEdBQUcsQ0FBQyxFQUFFLEdBQUdrRCxLQUFLQyxLQUFLRyxLQUFLTCxLQUFLRyxLQUFLQztRQUNsQ3JELEdBQUcsQ0FBQyxFQUFFLEdBQUdrRCxLQUFLRSxLQUFLQyxLQUFLSixLQUFLRSxLQUFLRztRQUNsQ3RELEdBQUcsQ0FBQyxFQUFFLEdBQUdrRCxLQUFLRSxLQUFLRSxLQUFLTCxLQUFLRSxLQUFLRTtJQUN0QyxPQUFPLElBQUlMLFVBQVUsT0FBTztRQUN4QmhELEdBQUcsQ0FBQyxFQUFFLEdBQUdpRCxLQUFLRyxLQUFLRSxLQUFLSixLQUFLQyxLQUFLRTtRQUNsQ3JELEdBQUcsQ0FBQyxFQUFFLEdBQUdrRCxLQUFLQyxLQUFLRyxLQUFLTCxLQUFLRyxLQUFLQztRQUNsQ3JELEdBQUcsQ0FBQyxFQUFFLEdBQUdrRCxLQUFLRSxLQUFLQyxLQUFLSixLQUFLRSxLQUFLRztRQUNsQ3RELEdBQUcsQ0FBQyxFQUFFLEdBQUdrRCxLQUFLRSxLQUFLRSxLQUFLTCxLQUFLRSxLQUFLRTtJQUN0QyxPQUFPLElBQUlMLFVBQVUsT0FBTztRQUN4QmhELEdBQUcsQ0FBQyxFQUFFLEdBQUdpRCxLQUFLRyxLQUFLRSxLQUFLSixLQUFLQyxLQUFLRTtRQUNsQ3JELEdBQUcsQ0FBQyxFQUFFLEdBQUdrRCxLQUFLQyxLQUFLRyxLQUFLTCxLQUFLRyxLQUFLQztRQUNsQ3JELEdBQUcsQ0FBQyxFQUFFLEdBQUdrRCxLQUFLRSxLQUFLQyxLQUFLSixLQUFLRSxLQUFLRztRQUNsQ3RELEdBQUcsQ0FBQyxFQUFFLEdBQUdrRCxLQUFLRSxLQUFLRSxLQUFLTCxLQUFLRSxLQUFLRTtJQUN0QyxPQUFPLElBQUlMLFVBQVUsT0FBTztRQUN4QmhELEdBQUcsQ0FBQyxFQUFFLEdBQUdpRCxLQUFLRyxLQUFLRSxLQUFLSixLQUFLQyxLQUFLRTtRQUNsQ3JELEdBQUcsQ0FBQyxFQUFFLEdBQUdrRCxLQUFLQyxLQUFLRyxLQUFLTCxLQUFLRyxLQUFLQztRQUNsQ3JELEdBQUcsQ0FBQyxFQUFFLEdBQUdrRCxLQUFLRSxLQUFLQyxLQUFLSixLQUFLRSxLQUFLRztRQUNsQ3RELEdBQUcsQ0FBQyxFQUFFLEdBQUdrRCxLQUFLRSxLQUFLRSxLQUFLTCxLQUFLRSxLQUFLRTtJQUN0QyxPQUFPLElBQUlMLFVBQVUsT0FBTztRQUN4QmhELEdBQUcsQ0FBQyxFQUFFLEdBQUdpRCxLQUFLRyxLQUFLRSxLQUFLSixLQUFLQyxLQUFLRTtRQUNsQ3JELEdBQUcsQ0FBQyxFQUFFLEdBQUdrRCxLQUFLQyxLQUFLRyxLQUFLTCxLQUFLRyxLQUFLQztRQUNsQ3JELEdBQUcsQ0FBQyxFQUFFLEdBQUdrRCxLQUFLRSxLQUFLQyxLQUFLSixLQUFLRSxLQUFLRztRQUNsQ3RELEdBQUcsQ0FBQyxFQUFFLEdBQUdrRCxLQUFLRSxLQUFLRSxLQUFLTCxLQUFLRSxLQUFLRTtJQUN0QztJQUVBLE9BQU9yRDtBQUNYO0FBRUE7Ozs7Ozs7Q0FPQyxHQUNNLE1BQU11RCxPQUFPekQsOENBQVMsQ0FBQztBQUU5Qjs7Ozs7Ozs7OztDQVVDLEdBQ00sTUFBTTBELE1BQU0xRCw2Q0FBUSxDQUFDO0FBRTVCOzs7Ozs7OztDQVFDLEdBQ00sTUFBTTJELE1BQU0zRCw2Q0FBUSxDQUFDO0FBRTVCOzs7Ozs7OztDQVFDLEdBQ00sTUFBTTRELFFBQVE1RCwrQ0FBVSxDQUFDO0FBRWhDOzs7Ozs7O0NBT0MsR0FDTSxNQUFNcUMsTUFBTXJDLDZDQUFRLENBQUM7QUFFNUI7Ozs7Ozs7OztDQVNDLEdBQ00sTUFBTTZELE9BQU83RCw4Q0FBUyxDQUFDO0FBRTlCOzs7OztDQUtDLEdBQ00sTUFBTThELFNBQVM5RCxnREFBVyxDQUFDO0FBRWxDOzs7Ozs7O0NBT0MsR0FDTSxNQUFNK0QsWUFBWS9ELG1EQUFjLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wZXJjZXZpYS8uL25vZGVfbW9kdWxlcy9vZ2wvc3JjL21hdGgvZnVuY3Rpb25zL1F1YXRGdW5jLmpzP2JjMDAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgdmVjNCBmcm9tICcuL1ZlYzRGdW5jLmpzJztcblxuLyoqXG4gKiBTZXQgYSBxdWF0IHRvIHRoZSBpZGVudGl0eSBxdWF0ZXJuaW9uXG4gKlxuICogQHBhcmFtIHtxdWF0fSBvdXQgdGhlIHJlY2VpdmluZyBxdWF0ZXJuaW9uXG4gKiBAcmV0dXJucyB7cXVhdH0gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpZGVudGl0eShvdXQpIHtcbiAgICBvdXRbMF0gPSAwO1xuICAgIG91dFsxXSA9IDA7XG4gICAgb3V0WzJdID0gMDtcbiAgICBvdXRbM10gPSAxO1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogU2V0cyBhIHF1YXQgZnJvbSB0aGUgZ2l2ZW4gYW5nbGUgYW5kIHJvdGF0aW9uIGF4aXMsXG4gKiB0aGVuIHJldHVybnMgaXQuXG4gKlxuICogQHBhcmFtIHtxdWF0fSBvdXQgdGhlIHJlY2VpdmluZyBxdWF0ZXJuaW9uXG4gKiBAcGFyYW0ge3ZlYzN9IGF4aXMgdGhlIGF4aXMgYXJvdW5kIHdoaWNoIHRvIHJvdGF0ZVxuICogQHBhcmFtIHtOdW1iZXJ9IHJhZCB0aGUgYW5nbGUgaW4gcmFkaWFuc1xuICogQHJldHVybnMge3F1YXR9IG91dFxuICoqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldEF4aXNBbmdsZShvdXQsIGF4aXMsIHJhZCkge1xuICAgIHJhZCA9IHJhZCAqIDAuNTtcbiAgICBsZXQgcyA9IE1hdGguc2luKHJhZCk7XG4gICAgb3V0WzBdID0gcyAqIGF4aXNbMF07XG4gICAgb3V0WzFdID0gcyAqIGF4aXNbMV07XG4gICAgb3V0WzJdID0gcyAqIGF4aXNbMl07XG4gICAgb3V0WzNdID0gTWF0aC5jb3MocmFkKTtcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIE11bHRpcGxpZXMgdHdvIHF1YXRzXG4gKlxuICogQHBhcmFtIHtxdWF0fSBvdXQgdGhlIHJlY2VpdmluZyBxdWF0ZXJuaW9uXG4gKiBAcGFyYW0ge3F1YXR9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7cXVhdH0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHtxdWF0fSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG11bHRpcGx5KG91dCwgYSwgYikge1xuICAgIGxldCBheCA9IGFbMF0sXG4gICAgICAgIGF5ID0gYVsxXSxcbiAgICAgICAgYXogPSBhWzJdLFxuICAgICAgICBhdyA9IGFbM107XG4gICAgbGV0IGJ4ID0gYlswXSxcbiAgICAgICAgYnkgPSBiWzFdLFxuICAgICAgICBieiA9IGJbMl0sXG4gICAgICAgIGJ3ID0gYlszXTtcblxuICAgIG91dFswXSA9IGF4ICogYncgKyBhdyAqIGJ4ICsgYXkgKiBieiAtIGF6ICogYnk7XG4gICAgb3V0WzFdID0gYXkgKiBidyArIGF3ICogYnkgKyBheiAqIGJ4IC0gYXggKiBiejtcbiAgICBvdXRbMl0gPSBheiAqIGJ3ICsgYXcgKiBieiArIGF4ICogYnkgLSBheSAqIGJ4O1xuICAgIG91dFszXSA9IGF3ICogYncgLSBheCAqIGJ4IC0gYXkgKiBieSAtIGF6ICogYno7XG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBSb3RhdGVzIGEgcXVhdGVybmlvbiBieSB0aGUgZ2l2ZW4gYW5nbGUgYWJvdXQgdGhlIFggYXhpc1xuICpcbiAqIEBwYXJhbSB7cXVhdH0gb3V0IHF1YXQgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcbiAqIEBwYXJhbSB7cXVhdH0gYSBxdWF0IHRvIHJvdGF0ZVxuICogQHBhcmFtIHtudW1iZXJ9IHJhZCBhbmdsZSAoaW4gcmFkaWFucykgdG8gcm90YXRlXG4gKiBAcmV0dXJucyB7cXVhdH0gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByb3RhdGVYKG91dCwgYSwgcmFkKSB7XG4gICAgcmFkICo9IDAuNTtcblxuICAgIGxldCBheCA9IGFbMF0sXG4gICAgICAgIGF5ID0gYVsxXSxcbiAgICAgICAgYXogPSBhWzJdLFxuICAgICAgICBhdyA9IGFbM107XG4gICAgbGV0IGJ4ID0gTWF0aC5zaW4ocmFkKSxcbiAgICAgICAgYncgPSBNYXRoLmNvcyhyYWQpO1xuXG4gICAgb3V0WzBdID0gYXggKiBidyArIGF3ICogYng7XG4gICAgb3V0WzFdID0gYXkgKiBidyArIGF6ICogYng7XG4gICAgb3V0WzJdID0gYXogKiBidyAtIGF5ICogYng7XG4gICAgb3V0WzNdID0gYXcgKiBidyAtIGF4ICogYng7XG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBSb3RhdGVzIGEgcXVhdGVybmlvbiBieSB0aGUgZ2l2ZW4gYW5nbGUgYWJvdXQgdGhlIFkgYXhpc1xuICpcbiAqIEBwYXJhbSB7cXVhdH0gb3V0IHF1YXQgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcbiAqIEBwYXJhbSB7cXVhdH0gYSBxdWF0IHRvIHJvdGF0ZVxuICogQHBhcmFtIHtudW1iZXJ9IHJhZCBhbmdsZSAoaW4gcmFkaWFucykgdG8gcm90YXRlXG4gKiBAcmV0dXJucyB7cXVhdH0gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByb3RhdGVZKG91dCwgYSwgcmFkKSB7XG4gICAgcmFkICo9IDAuNTtcblxuICAgIGxldCBheCA9IGFbMF0sXG4gICAgICAgIGF5ID0gYVsxXSxcbiAgICAgICAgYXogPSBhWzJdLFxuICAgICAgICBhdyA9IGFbM107XG4gICAgbGV0IGJ5ID0gTWF0aC5zaW4ocmFkKSxcbiAgICAgICAgYncgPSBNYXRoLmNvcyhyYWQpO1xuXG4gICAgb3V0WzBdID0gYXggKiBidyAtIGF6ICogYnk7XG4gICAgb3V0WzFdID0gYXkgKiBidyArIGF3ICogYnk7XG4gICAgb3V0WzJdID0gYXogKiBidyArIGF4ICogYnk7XG4gICAgb3V0WzNdID0gYXcgKiBidyAtIGF5ICogYnk7XG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBSb3RhdGVzIGEgcXVhdGVybmlvbiBieSB0aGUgZ2l2ZW4gYW5nbGUgYWJvdXQgdGhlIFogYXhpc1xuICpcbiAqIEBwYXJhbSB7cXVhdH0gb3V0IHF1YXQgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcbiAqIEBwYXJhbSB7cXVhdH0gYSBxdWF0IHRvIHJvdGF0ZVxuICogQHBhcmFtIHtudW1iZXJ9IHJhZCBhbmdsZSAoaW4gcmFkaWFucykgdG8gcm90YXRlXG4gKiBAcmV0dXJucyB7cXVhdH0gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByb3RhdGVaKG91dCwgYSwgcmFkKSB7XG4gICAgcmFkICo9IDAuNTtcblxuICAgIGxldCBheCA9IGFbMF0sXG4gICAgICAgIGF5ID0gYVsxXSxcbiAgICAgICAgYXogPSBhWzJdLFxuICAgICAgICBhdyA9IGFbM107XG4gICAgbGV0IGJ6ID0gTWF0aC5zaW4ocmFkKSxcbiAgICAgICAgYncgPSBNYXRoLmNvcyhyYWQpO1xuXG4gICAgb3V0WzBdID0gYXggKiBidyArIGF5ICogYno7XG4gICAgb3V0WzFdID0gYXkgKiBidyAtIGF4ICogYno7XG4gICAgb3V0WzJdID0gYXogKiBidyArIGF3ICogYno7XG4gICAgb3V0WzNdID0gYXcgKiBidyAtIGF6ICogYno7XG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBQZXJmb3JtcyBhIHNwaGVyaWNhbCBsaW5lYXIgaW50ZXJwb2xhdGlvbiBiZXR3ZWVuIHR3byBxdWF0XG4gKlxuICogQHBhcmFtIHtxdWF0fSBvdXQgdGhlIHJlY2VpdmluZyBxdWF0ZXJuaW9uXG4gKiBAcGFyYW0ge3F1YXR9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7cXVhdH0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEBwYXJhbSB7TnVtYmVyfSB0IGludGVycG9sYXRpb24gYW1vdW50IGJldHdlZW4gdGhlIHR3byBpbnB1dHNcbiAqIEByZXR1cm5zIHtxdWF0fSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNsZXJwKG91dCwgYSwgYiwgdCkge1xuICAgIC8vIGJlbmNobWFya3M6XG4gICAgLy8gICAgaHR0cDovL2pzcGVyZi5jb20vcXVhdGVybmlvbi1zbGVycC1pbXBsZW1lbnRhdGlvbnNcbiAgICBsZXQgYXggPSBhWzBdLFxuICAgICAgICBheSA9IGFbMV0sXG4gICAgICAgIGF6ID0gYVsyXSxcbiAgICAgICAgYXcgPSBhWzNdO1xuICAgIGxldCBieCA9IGJbMF0sXG4gICAgICAgIGJ5ID0gYlsxXSxcbiAgICAgICAgYnogPSBiWzJdLFxuICAgICAgICBidyA9IGJbM107XG5cbiAgICBsZXQgb21lZ2EsIGNvc29tLCBzaW5vbSwgc2NhbGUwLCBzY2FsZTE7XG5cbiAgICAvLyBjYWxjIGNvc2luZVxuICAgIGNvc29tID0gYXggKiBieCArIGF5ICogYnkgKyBheiAqIGJ6ICsgYXcgKiBidztcbiAgICAvLyBhZGp1c3Qgc2lnbnMgKGlmIG5lY2Vzc2FyeSlcbiAgICBpZiAoY29zb20gPCAwLjApIHtcbiAgICAgICAgY29zb20gPSAtY29zb207XG4gICAgICAgIGJ4ID0gLWJ4O1xuICAgICAgICBieSA9IC1ieTtcbiAgICAgICAgYnogPSAtYno7XG4gICAgICAgIGJ3ID0gLWJ3O1xuICAgIH1cbiAgICAvLyBjYWxjdWxhdGUgY29lZmZpY2llbnRzXG4gICAgaWYgKDEuMCAtIGNvc29tID4gMC4wMDAwMDEpIHtcbiAgICAgICAgLy8gc3RhbmRhcmQgY2FzZSAoc2xlcnApXG4gICAgICAgIG9tZWdhID0gTWF0aC5hY29zKGNvc29tKTtcbiAgICAgICAgc2lub20gPSBNYXRoLnNpbihvbWVnYSk7XG4gICAgICAgIHNjYWxlMCA9IE1hdGguc2luKCgxLjAgLSB0KSAqIG9tZWdhKSAvIHNpbm9tO1xuICAgICAgICBzY2FsZTEgPSBNYXRoLnNpbih0ICogb21lZ2EpIC8gc2lub207XG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gXCJmcm9tXCIgYW5kIFwidG9cIiBxdWF0ZXJuaW9ucyBhcmUgdmVyeSBjbG9zZVxuICAgICAgICAvLyAgLi4uIHNvIHdlIGNhbiBkbyBhIGxpbmVhciBpbnRlcnBvbGF0aW9uXG4gICAgICAgIHNjYWxlMCA9IDEuMCAtIHQ7XG4gICAgICAgIHNjYWxlMSA9IHQ7XG4gICAgfVxuICAgIC8vIGNhbGN1bGF0ZSBmaW5hbCB2YWx1ZXNcbiAgICBvdXRbMF0gPSBzY2FsZTAgKiBheCArIHNjYWxlMSAqIGJ4O1xuICAgIG91dFsxXSA9IHNjYWxlMCAqIGF5ICsgc2NhbGUxICogYnk7XG4gICAgb3V0WzJdID0gc2NhbGUwICogYXogKyBzY2FsZTEgKiBiejtcbiAgICBvdXRbM10gPSBzY2FsZTAgKiBhdyArIHNjYWxlMSAqIGJ3O1xuXG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBpbnZlcnNlIG9mIGEgcXVhdFxuICpcbiAqIEBwYXJhbSB7cXVhdH0gb3V0IHRoZSByZWNlaXZpbmcgcXVhdGVybmlvblxuICogQHBhcmFtIHtxdWF0fSBhIHF1YXQgdG8gY2FsY3VsYXRlIGludmVyc2Ugb2ZcbiAqIEByZXR1cm5zIHtxdWF0fSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGludmVydChvdXQsIGEpIHtcbiAgICBsZXQgYTAgPSBhWzBdLFxuICAgICAgICBhMSA9IGFbMV0sXG4gICAgICAgIGEyID0gYVsyXSxcbiAgICAgICAgYTMgPSBhWzNdO1xuICAgIGxldCBkb3QgPSBhMCAqIGEwICsgYTEgKiBhMSArIGEyICogYTIgKyBhMyAqIGEzO1xuICAgIGxldCBpbnZEb3QgPSBkb3QgPyAxLjAgLyBkb3QgOiAwO1xuXG4gICAgLy8gVE9ETzogV291bGQgYmUgZmFzdGVyIHRvIHJldHVybiBbMCwwLDAsMF0gaW1tZWRpYXRlbHkgaWYgZG90ID09IDBcblxuICAgIG91dFswXSA9IC1hMCAqIGludkRvdDtcbiAgICBvdXRbMV0gPSAtYTEgKiBpbnZEb3Q7XG4gICAgb3V0WzJdID0gLWEyICogaW52RG90O1xuICAgIG91dFszXSA9IGEzICogaW52RG90O1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgY29uanVnYXRlIG9mIGEgcXVhdFxuICogSWYgdGhlIHF1YXRlcm5pb24gaXMgbm9ybWFsaXplZCwgdGhpcyBmdW5jdGlvbiBpcyBmYXN0ZXIgdGhhbiBxdWF0LmludmVyc2UgYW5kIHByb2R1Y2VzIHRoZSBzYW1lIHJlc3VsdC5cbiAqXG4gKiBAcGFyYW0ge3F1YXR9IG91dCB0aGUgcmVjZWl2aW5nIHF1YXRlcm5pb25cbiAqIEBwYXJhbSB7cXVhdH0gYSBxdWF0IHRvIGNhbGN1bGF0ZSBjb25qdWdhdGUgb2ZcbiAqIEByZXR1cm5zIHtxdWF0fSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbmp1Z2F0ZShvdXQsIGEpIHtcbiAgICBvdXRbMF0gPSAtYVswXTtcbiAgICBvdXRbMV0gPSAtYVsxXTtcbiAgICBvdXRbMl0gPSAtYVsyXTtcbiAgICBvdXRbM10gPSBhWzNdO1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIHF1YXRlcm5pb24gZnJvbSB0aGUgZ2l2ZW4gM3gzIHJvdGF0aW9uIG1hdHJpeC5cbiAqXG4gKiBOT1RFOiBUaGUgcmVzdWx0YW50IHF1YXRlcm5pb24gaXMgbm90IG5vcm1hbGl6ZWQsIHNvIHlvdSBzaG91bGQgYmUgc3VyZVxuICogdG8gcmVub3JtYWxpemUgdGhlIHF1YXRlcm5pb24geW91cnNlbGYgd2hlcmUgbmVjZXNzYXJ5LlxuICpcbiAqIEBwYXJhbSB7cXVhdH0gb3V0IHRoZSByZWNlaXZpbmcgcXVhdGVybmlvblxuICogQHBhcmFtIHttYXQzfSBtIHJvdGF0aW9uIG1hdHJpeFxuICogQHJldHVybnMge3F1YXR9IG91dFxuICogQGZ1bmN0aW9uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmcm9tTWF0MyhvdXQsIG0pIHtcbiAgICAvLyBBbGdvcml0aG0gaW4gS2VuIFNob2VtYWtlJ3MgYXJ0aWNsZSBpbiAxOTg3IFNJR0dSQVBIIGNvdXJzZSBub3Rlc1xuICAgIC8vIGFydGljbGUgXCJRdWF0ZXJuaW9uIENhbGN1bHVzIGFuZCBGYXN0IEFuaW1hdGlvblwiLlxuICAgIGxldCBmVHJhY2UgPSBtWzBdICsgbVs0XSArIG1bOF07XG4gICAgbGV0IGZSb290O1xuXG4gICAgaWYgKGZUcmFjZSA+IDAuMCkge1xuICAgICAgICAvLyB8d3wgPiAxLzIsIG1heSBhcyB3ZWxsIGNob29zZSB3ID4gMS8yXG4gICAgICAgIGZSb290ID0gTWF0aC5zcXJ0KGZUcmFjZSArIDEuMCk7IC8vIDJ3XG4gICAgICAgIG91dFszXSA9IDAuNSAqIGZSb290O1xuICAgICAgICBmUm9vdCA9IDAuNSAvIGZSb290OyAvLyAxLyg0dylcbiAgICAgICAgb3V0WzBdID0gKG1bNV0gLSBtWzddKSAqIGZSb290O1xuICAgICAgICBvdXRbMV0gPSAobVs2XSAtIG1bMl0pICogZlJvb3Q7XG4gICAgICAgIG91dFsyXSA9IChtWzFdIC0gbVszXSkgKiBmUm9vdDtcbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyB8d3wgPD0gMS8yXG4gICAgICAgIGxldCBpID0gMDtcbiAgICAgICAgaWYgKG1bNF0gPiBtWzBdKSBpID0gMTtcbiAgICAgICAgaWYgKG1bOF0gPiBtW2kgKiAzICsgaV0pIGkgPSAyO1xuICAgICAgICBsZXQgaiA9IChpICsgMSkgJSAzO1xuICAgICAgICBsZXQgayA9IChpICsgMikgJSAzO1xuXG4gICAgICAgIGZSb290ID0gTWF0aC5zcXJ0KG1baSAqIDMgKyBpXSAtIG1baiAqIDMgKyBqXSAtIG1bayAqIDMgKyBrXSArIDEuMCk7XG4gICAgICAgIG91dFtpXSA9IDAuNSAqIGZSb290O1xuICAgICAgICBmUm9vdCA9IDAuNSAvIGZSb290O1xuICAgICAgICBvdXRbM10gPSAobVtqICogMyArIGtdIC0gbVtrICogMyArIGpdKSAqIGZSb290O1xuICAgICAgICBvdXRbal0gPSAobVtqICogMyArIGldICsgbVtpICogMyArIGpdKSAqIGZSb290O1xuICAgICAgICBvdXRba10gPSAobVtrICogMyArIGldICsgbVtpICogMyArIGtdKSAqIGZSb290O1xuICAgIH1cblxuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIHF1YXRlcm5pb24gZnJvbSB0aGUgZ2l2ZW4gZXVsZXIgYW5nbGUgeCwgeSwgei5cbiAqXG4gKiBAcGFyYW0ge3F1YXR9IG91dCB0aGUgcmVjZWl2aW5nIHF1YXRlcm5pb25cbiAqIEBwYXJhbSB7dmVjM30gZXVsZXIgQW5nbGVzIHRvIHJvdGF0ZSBhcm91bmQgZWFjaCBheGlzIGluIGRlZ3JlZXMuXG4gKiBAcGFyYW0ge1N0cmluZ30gb3JkZXIgZGV0YWlsaW5nIG9yZGVyIG9mIG9wZXJhdGlvbnMuIERlZmF1bHQgJ1hZWicuXG4gKiBAcmV0dXJucyB7cXVhdH0gb3V0XG4gKiBAZnVuY3Rpb25cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZyb21FdWxlcihvdXQsIGV1bGVyLCBvcmRlciA9ICdZWFonKSB7XG4gICAgbGV0IHN4ID0gTWF0aC5zaW4oZXVsZXJbMF0gKiAwLjUpO1xuICAgIGxldCBjeCA9IE1hdGguY29zKGV1bGVyWzBdICogMC41KTtcbiAgICBsZXQgc3kgPSBNYXRoLnNpbihldWxlclsxXSAqIDAuNSk7XG4gICAgbGV0IGN5ID0gTWF0aC5jb3MoZXVsZXJbMV0gKiAwLjUpO1xuICAgIGxldCBzeiA9IE1hdGguc2luKGV1bGVyWzJdICogMC41KTtcbiAgICBsZXQgY3ogPSBNYXRoLmNvcyhldWxlclsyXSAqIDAuNSk7XG5cbiAgICBpZiAob3JkZXIgPT09ICdYWVonKSB7XG4gICAgICAgIG91dFswXSA9IHN4ICogY3kgKiBjeiArIGN4ICogc3kgKiBzejtcbiAgICAgICAgb3V0WzFdID0gY3ggKiBzeSAqIGN6IC0gc3ggKiBjeSAqIHN6O1xuICAgICAgICBvdXRbMl0gPSBjeCAqIGN5ICogc3ogKyBzeCAqIHN5ICogY3o7XG4gICAgICAgIG91dFszXSA9IGN4ICogY3kgKiBjeiAtIHN4ICogc3kgKiBzejtcbiAgICB9IGVsc2UgaWYgKG9yZGVyID09PSAnWVhaJykge1xuICAgICAgICBvdXRbMF0gPSBzeCAqIGN5ICogY3ogKyBjeCAqIHN5ICogc3o7XG4gICAgICAgIG91dFsxXSA9IGN4ICogc3kgKiBjeiAtIHN4ICogY3kgKiBzejtcbiAgICAgICAgb3V0WzJdID0gY3ggKiBjeSAqIHN6IC0gc3ggKiBzeSAqIGN6O1xuICAgICAgICBvdXRbM10gPSBjeCAqIGN5ICogY3ogKyBzeCAqIHN5ICogc3o7XG4gICAgfSBlbHNlIGlmIChvcmRlciA9PT0gJ1pYWScpIHtcbiAgICAgICAgb3V0WzBdID0gc3ggKiBjeSAqIGN6IC0gY3ggKiBzeSAqIHN6O1xuICAgICAgICBvdXRbMV0gPSBjeCAqIHN5ICogY3ogKyBzeCAqIGN5ICogc3o7XG4gICAgICAgIG91dFsyXSA9IGN4ICogY3kgKiBzeiArIHN4ICogc3kgKiBjejtcbiAgICAgICAgb3V0WzNdID0gY3ggKiBjeSAqIGN6IC0gc3ggKiBzeSAqIHN6O1xuICAgIH0gZWxzZSBpZiAob3JkZXIgPT09ICdaWVgnKSB7XG4gICAgICAgIG91dFswXSA9IHN4ICogY3kgKiBjeiAtIGN4ICogc3kgKiBzejtcbiAgICAgICAgb3V0WzFdID0gY3ggKiBzeSAqIGN6ICsgc3ggKiBjeSAqIHN6O1xuICAgICAgICBvdXRbMl0gPSBjeCAqIGN5ICogc3ogLSBzeCAqIHN5ICogY3o7XG4gICAgICAgIG91dFszXSA9IGN4ICogY3kgKiBjeiArIHN4ICogc3kgKiBzejtcbiAgICB9IGVsc2UgaWYgKG9yZGVyID09PSAnWVpYJykge1xuICAgICAgICBvdXRbMF0gPSBzeCAqIGN5ICogY3ogKyBjeCAqIHN5ICogc3o7XG4gICAgICAgIG91dFsxXSA9IGN4ICogc3kgKiBjeiArIHN4ICogY3kgKiBzejtcbiAgICAgICAgb3V0WzJdID0gY3ggKiBjeSAqIHN6IC0gc3ggKiBzeSAqIGN6O1xuICAgICAgICBvdXRbM10gPSBjeCAqIGN5ICogY3ogLSBzeCAqIHN5ICogc3o7XG4gICAgfSBlbHNlIGlmIChvcmRlciA9PT0gJ1haWScpIHtcbiAgICAgICAgb3V0WzBdID0gc3ggKiBjeSAqIGN6IC0gY3ggKiBzeSAqIHN6O1xuICAgICAgICBvdXRbMV0gPSBjeCAqIHN5ICogY3ogLSBzeCAqIGN5ICogc3o7XG4gICAgICAgIG91dFsyXSA9IGN4ICogY3kgKiBzeiArIHN4ICogc3kgKiBjejtcbiAgICAgICAgb3V0WzNdID0gY3ggKiBjeSAqIGN6ICsgc3ggKiBzeSAqIHN6O1xuICAgIH1cblxuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogQ29weSB0aGUgdmFsdWVzIGZyb20gb25lIHF1YXQgdG8gYW5vdGhlclxuICpcbiAqIEBwYXJhbSB7cXVhdH0gb3V0IHRoZSByZWNlaXZpbmcgcXVhdGVybmlvblxuICogQHBhcmFtIHtxdWF0fSBhIHRoZSBzb3VyY2UgcXVhdGVybmlvblxuICogQHJldHVybnMge3F1YXR9IG91dFxuICogQGZ1bmN0aW9uXG4gKi9cbmV4cG9ydCBjb25zdCBjb3B5ID0gdmVjNC5jb3B5O1xuXG4vKipcbiAqIFNldCB0aGUgY29tcG9uZW50cyBvZiBhIHF1YXQgdG8gdGhlIGdpdmVuIHZhbHVlc1xuICpcbiAqIEBwYXJhbSB7cXVhdH0gb3V0IHRoZSByZWNlaXZpbmcgcXVhdGVybmlvblxuICogQHBhcmFtIHtOdW1iZXJ9IHggWCBjb21wb25lbnRcbiAqIEBwYXJhbSB7TnVtYmVyfSB5IFkgY29tcG9uZW50XG4gKiBAcGFyYW0ge051bWJlcn0geiBaIGNvbXBvbmVudFxuICogQHBhcmFtIHtOdW1iZXJ9IHcgVyBjb21wb25lbnRcbiAqIEByZXR1cm5zIHtxdWF0fSBvdXRcbiAqIEBmdW5jdGlvblxuICovXG5leHBvcnQgY29uc3Qgc2V0ID0gdmVjNC5zZXQ7XG5cbi8qKlxuICogQWRkcyB0d28gcXVhdCdzXG4gKlxuICogQHBhcmFtIHtxdWF0fSBvdXQgdGhlIHJlY2VpdmluZyBxdWF0ZXJuaW9uXG4gKiBAcGFyYW0ge3F1YXR9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7cXVhdH0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHtxdWF0fSBvdXRcbiAqIEBmdW5jdGlvblxuICovXG5leHBvcnQgY29uc3QgYWRkID0gdmVjNC5hZGQ7XG5cbi8qKlxuICogU2NhbGVzIGEgcXVhdCBieSBhIHNjYWxhciBudW1iZXJcbiAqXG4gKiBAcGFyYW0ge3F1YXR9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHtxdWF0fSBhIHRoZSB2ZWN0b3IgdG8gc2NhbGVcbiAqIEBwYXJhbSB7TnVtYmVyfSBiIGFtb3VudCB0byBzY2FsZSB0aGUgdmVjdG9yIGJ5XG4gKiBAcmV0dXJucyB7cXVhdH0gb3V0XG4gKiBAZnVuY3Rpb25cbiAqL1xuZXhwb3J0IGNvbnN0IHNjYWxlID0gdmVjNC5zY2FsZTtcblxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBkb3QgcHJvZHVjdCBvZiB0d28gcXVhdCdzXG4gKlxuICogQHBhcmFtIHtxdWF0fSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge3F1YXR9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBkb3QgcHJvZHVjdCBvZiBhIGFuZCBiXG4gKiBAZnVuY3Rpb25cbiAqL1xuZXhwb3J0IGNvbnN0IGRvdCA9IHZlYzQuZG90O1xuXG4vKipcbiAqIFBlcmZvcm1zIGEgbGluZWFyIGludGVycG9sYXRpb24gYmV0d2VlbiB0d28gcXVhdCdzXG4gKlxuICogQHBhcmFtIHtxdWF0fSBvdXQgdGhlIHJlY2VpdmluZyBxdWF0ZXJuaW9uXG4gKiBAcGFyYW0ge3F1YXR9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7cXVhdH0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEBwYXJhbSB7TnVtYmVyfSB0IGludGVycG9sYXRpb24gYW1vdW50IGJldHdlZW4gdGhlIHR3byBpbnB1dHNcbiAqIEByZXR1cm5zIHtxdWF0fSBvdXRcbiAqIEBmdW5jdGlvblxuICovXG5leHBvcnQgY29uc3QgbGVycCA9IHZlYzQubGVycDtcblxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBsZW5ndGggb2YgYSBxdWF0XG4gKlxuICogQHBhcmFtIHtxdWF0fSBhIHZlY3RvciB0byBjYWxjdWxhdGUgbGVuZ3RoIG9mXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBsZW5ndGggb2YgYVxuICovXG5leHBvcnQgY29uc3QgbGVuZ3RoID0gdmVjNC5sZW5ndGg7XG5cbi8qKlxuICogTm9ybWFsaXplIGEgcXVhdFxuICpcbiAqIEBwYXJhbSB7cXVhdH0gb3V0IHRoZSByZWNlaXZpbmcgcXVhdGVybmlvblxuICogQHBhcmFtIHtxdWF0fSBhIHF1YXRlcm5pb24gdG8gbm9ybWFsaXplXG4gKiBAcmV0dXJucyB7cXVhdH0gb3V0XG4gKiBAZnVuY3Rpb25cbiAqL1xuZXhwb3J0IGNvbnN0IG5vcm1hbGl6ZSA9IHZlYzQubm9ybWFsaXplO1xuIl0sIm5hbWVzIjpbInZlYzQiLCJpZGVudGl0eSIsIm91dCIsInNldEF4aXNBbmdsZSIsImF4aXMiLCJyYWQiLCJzIiwiTWF0aCIsInNpbiIsImNvcyIsIm11bHRpcGx5IiwiYSIsImIiLCJheCIsImF5IiwiYXoiLCJhdyIsImJ4IiwiYnkiLCJieiIsImJ3Iiwicm90YXRlWCIsInJvdGF0ZVkiLCJyb3RhdGVaIiwic2xlcnAiLCJ0Iiwib21lZ2EiLCJjb3NvbSIsInNpbm9tIiwic2NhbGUwIiwic2NhbGUxIiwiYWNvcyIsImludmVydCIsImEwIiwiYTEiLCJhMiIsImEzIiwiZG90IiwiaW52RG90IiwiY29uanVnYXRlIiwiZnJvbU1hdDMiLCJtIiwiZlRyYWNlIiwiZlJvb3QiLCJzcXJ0IiwiaSIsImoiLCJrIiwiZnJvbUV1bGVyIiwiZXVsZXIiLCJvcmRlciIsInN4IiwiY3giLCJzeSIsImN5Iiwic3oiLCJjeiIsImNvcHkiLCJzZXQiLCJhZGQiLCJzY2FsZSIsImxlcnAiLCJsZW5ndGgiLCJub3JtYWxpemUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ogl/src/math/functions/QuatFunc.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ogl/src/math/functions/Vec3Func.js":
/*!*********************************************************!*\
  !*** ./node_modules/ogl/src/math/functions/Vec3Func.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   add: () => (/* binding */ add),\n/* harmony export */   angle: () => (/* binding */ angle),\n/* harmony export */   copy: () => (/* binding */ copy),\n/* harmony export */   cross: () => (/* binding */ cross),\n/* harmony export */   distance: () => (/* binding */ distance),\n/* harmony export */   divide: () => (/* binding */ divide),\n/* harmony export */   dot: () => (/* binding */ dot),\n/* harmony export */   exactEquals: () => (/* binding */ exactEquals),\n/* harmony export */   inverse: () => (/* binding */ inverse),\n/* harmony export */   length: () => (/* binding */ length),\n/* harmony export */   lerp: () => (/* binding */ lerp),\n/* harmony export */   multiply: () => (/* binding */ multiply),\n/* harmony export */   negate: () => (/* binding */ negate),\n/* harmony export */   normalize: () => (/* binding */ normalize),\n/* harmony export */   scale: () => (/* binding */ scale),\n/* harmony export */   scaleRotateMat4: () => (/* binding */ scaleRotateMat4),\n/* harmony export */   set: () => (/* binding */ set),\n/* harmony export */   smoothLerp: () => (/* binding */ smoothLerp),\n/* harmony export */   squaredDistance: () => (/* binding */ squaredDistance),\n/* harmony export */   squaredLength: () => (/* binding */ squaredLength),\n/* harmony export */   subtract: () => (/* binding */ subtract),\n/* harmony export */   transformMat3: () => (/* binding */ transformMat3),\n/* harmony export */   transformMat4: () => (/* binding */ transformMat4),\n/* harmony export */   transformQuat: () => (/* binding */ transformQuat)\n/* harmony export */ });\nconst EPSILON = 0.000001;\n/**\n * Calculates the length of a vec3\n *\n * @param {vec3} a vector to calculate length of\n * @returns {Number} length of a\n */ function length(a) {\n    let x = a[0];\n    let y = a[1];\n    let z = a[2];\n    return Math.sqrt(x * x + y * y + z * z);\n}\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the source vector\n * @returns {vec3} out\n */ function copy(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    return out;\n}\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */ function set(out, x, y, z) {\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    return out;\n}\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */ function add(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */ function subtract(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    return out;\n}\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */ function multiply(out, a, b) {\n    out[0] = a[0] * b[0];\n    out[1] = a[1] * b[1];\n    out[2] = a[2] * b[2];\n    return out;\n}\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */ function divide(out, a, b) {\n    out[0] = a[0] / b[0];\n    out[1] = a[1] / b[1];\n    out[2] = a[2] / b[2];\n    return out;\n}\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */ function scale(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    return out;\n}\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} distance between a and b\n */ function distance(a, b) {\n    let x = b[0] - a[0];\n    let y = b[1] - a[1];\n    let z = b[2] - a[2];\n    return Math.sqrt(x * x + y * y + z * z);\n}\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} squared distance between a and b\n */ function squaredDistance(a, b) {\n    let x = b[0] - a[0];\n    let y = b[1] - a[1];\n    let z = b[2] - a[2];\n    return x * x + y * y + z * z;\n}\n/**\n * Calculates the squared length of a vec3\n *\n * @param {vec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */ function squaredLength(a) {\n    let x = a[0];\n    let y = a[1];\n    let z = a[2];\n    return x * x + y * y + z * z;\n}\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to negate\n * @returns {vec3} out\n */ function negate(out, a) {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    out[2] = -a[2];\n    return out;\n}\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to invert\n * @returns {vec3} out\n */ function inverse(out, a) {\n    out[0] = 1.0 / a[0];\n    out[1] = 1.0 / a[1];\n    out[2] = 1.0 / a[2];\n    return out;\n}\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to normalize\n * @returns {vec3} out\n */ function normalize(out, a) {\n    let x = a[0];\n    let y = a[1];\n    let z = a[2];\n    let len = x * x + y * y + z * z;\n    if (len > 0) {\n        //TODO: evaluate use of glm_invsqrt here?\n        len = 1 / Math.sqrt(len);\n    }\n    out[0] = a[0] * len;\n    out[1] = a[1] * len;\n    out[2] = a[2] * len;\n    return out;\n}\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} dot product of a and b\n */ function dot(a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */ function cross(out, a, b) {\n    let ax = a[0], ay = a[1], az = a[2];\n    let bx = b[0], by = b[1], bz = b[2];\n    out[0] = ay * bz - az * by;\n    out[1] = az * bx - ax * bz;\n    out[2] = ax * by - ay * bx;\n    return out;\n}\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec3} out\n */ function lerp(out, a, b, t) {\n    let ax = a[0];\n    let ay = a[1];\n    let az = a[2];\n    out[0] = ax + t * (b[0] - ax);\n    out[1] = ay + t * (b[1] - ay);\n    out[2] = az + t * (b[2] - az);\n    return out;\n}\n/**\n * Performs a frame rate independant, linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {Number} decay decay constant for interpolation. useful range between 1 and 25, from slow to fast.\n * @param {Number} dt delta time\n * @returns {vec3} out\n */ function smoothLerp(out, a, b, decay, dt) {\n    const exp = Math.exp(-decay * dt);\n    let ax = a[0];\n    let ay = a[1];\n    let az = a[2];\n    out[0] = b[0] + (ax - b[0]) * exp;\n    out[1] = b[1] + (ay - b[1]) * exp;\n    out[2] = b[2] + (az - b[2]) * exp;\n    return out;\n}\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec3} out\n */ function transformMat4(out, a, m) {\n    let x = a[0], y = a[1], z = a[2];\n    let w = m[3] * x + m[7] * y + m[11] * z + m[15];\n    w = w || 1.0;\n    out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n    out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n    out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n    return out;\n}\n/**\n * Same as above but doesn't apply translation.\n * Useful for rays.\n */ function scaleRotateMat4(out, a, m) {\n    let x = a[0], y = a[1], z = a[2];\n    let w = m[3] * x + m[7] * y + m[11] * z + m[15];\n    w = w || 1.0;\n    out[0] = (m[0] * x + m[4] * y + m[8] * z) / w;\n    out[1] = (m[1] * x + m[5] * y + m[9] * z) / w;\n    out[2] = (m[2] * x + m[6] * y + m[10] * z) / w;\n    return out;\n}\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {mat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */ function transformMat3(out, a, m) {\n    let x = a[0], y = a[1], z = a[2];\n    out[0] = x * m[0] + y * m[3] + z * m[6];\n    out[1] = x * m[1] + y * m[4] + z * m[7];\n    out[2] = x * m[2] + y * m[5] + z * m[8];\n    return out;\n}\n/**\n * Transforms the vec3 with a quat\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {quat} q quaternion to transform with\n * @returns {vec3} out\n */ function transformQuat(out, a, q) {\n    // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n    let x = a[0], y = a[1], z = a[2];\n    let qx = q[0], qy = q[1], qz = q[2], qw = q[3];\n    let uvx = qy * z - qz * y;\n    let uvy = qz * x - qx * z;\n    let uvz = qx * y - qy * x;\n    let uuvx = qy * uvz - qz * uvy;\n    let uuvy = qz * uvx - qx * uvz;\n    let uuvz = qx * uvy - qy * uvx;\n    let w2 = qw * 2;\n    uvx *= w2;\n    uvy *= w2;\n    uvz *= w2;\n    uuvx *= 2;\n    uuvy *= 2;\n    uuvz *= 2;\n    out[0] = x + uvx + uuvx;\n    out[1] = y + uvy + uuvy;\n    out[2] = z + uvz + uuvz;\n    return out;\n}\n/**\n * Get the angle between two 3D vectors\n * @param {vec3} a The first operand\n * @param {vec3} b The second operand\n * @returns {Number} The angle in radians\n */ const angle = function() {\n    const tempA = [\n        0,\n        0,\n        0\n    ];\n    const tempB = [\n        0,\n        0,\n        0\n    ];\n    return function(a, b) {\n        copy(tempA, a);\n        copy(tempB, b);\n        normalize(tempA, tempA);\n        normalize(tempB, tempB);\n        let cosine = dot(tempA, tempB);\n        if (cosine > 1.0) {\n            return 0;\n        } else if (cosine < -1.0) {\n            return Math.PI;\n        } else {\n            return Math.acos(cosine);\n        }\n    };\n}();\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {vec3} a The first vector.\n * @param {vec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */ function exactEquals(a, b) {\n    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ogl/src/math/functions/Vec3Func.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ogl/src/math/functions/Vec4Func.js":
/*!*********************************************************!*\
  !*** ./node_modules/ogl/src/math/functions/Vec4Func.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   add: () => (/* binding */ add),\n/* harmony export */   copy: () => (/* binding */ copy),\n/* harmony export */   dot: () => (/* binding */ dot),\n/* harmony export */   length: () => (/* binding */ length),\n/* harmony export */   lerp: () => (/* binding */ lerp),\n/* harmony export */   normalize: () => (/* binding */ normalize),\n/* harmony export */   scale: () => (/* binding */ scale),\n/* harmony export */   set: () => (/* binding */ set)\n/* harmony export */ });\nconst EPSILON = 0.000001;\n/**\n * Copy the values from one vec4 to another\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the source vector\n * @returns {vec4} out\n */ function copy(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    return out;\n}\n/**\n * Set the components of a vec4 to the given values\n *\n * @param {vec4} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} out\n */ function set(out, x, y, z, w) {\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    out[3] = w;\n    return out;\n}\n/**\n * Adds two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */ function add(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    return out;\n}\n/**\n * Scales a vec4 by a scalar number\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec4} out\n */ function scale(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    return out;\n}\n/**\n * Calculates the length of a vec4\n *\n * @param {vec4} a vector to calculate length of\n * @returns {Number} length of a\n */ function length(a) {\n    let x = a[0];\n    let y = a[1];\n    let z = a[2];\n    let w = a[3];\n    return Math.sqrt(x * x + y * y + z * z + w * w);\n}\n/**\n * Normalize a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to normalize\n * @returns {vec4} out\n */ function normalize(out, a) {\n    let x = a[0];\n    let y = a[1];\n    let z = a[2];\n    let w = a[3];\n    let len = x * x + y * y + z * z + w * w;\n    if (len > 0) {\n        len = 1 / Math.sqrt(len);\n    }\n    out[0] = x * len;\n    out[1] = y * len;\n    out[2] = z * len;\n    out[3] = w * len;\n    return out;\n}\n/**\n * Calculates the dot product of two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} dot product of a and b\n */ function dot(a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n/**\n * Performs a linear interpolation between two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec4} out\n */ function lerp(out, a, b, t) {\n    let ax = a[0];\n    let ay = a[1];\n    let az = a[2];\n    let aw = a[3];\n    out[0] = ax + t * (b[0] - ax);\n    out[1] = ay + t * (b[1] - ay);\n    out[2] = az + t * (b[2] - az);\n    out[3] = aw + t * (b[3] - aw);\n    return out;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb2dsL3NyYy9tYXRoL2Z1bmN0aW9ucy9WZWM0RnVuYy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBLE1BQU1BLFVBQVU7QUFFaEI7Ozs7OztDQU1DLEdBQ00sU0FBU0MsS0FBS0MsR0FBRyxFQUFFQyxDQUFDO0lBQ3ZCRCxHQUFHLENBQUMsRUFBRSxHQUFHQyxDQUFDLENBQUMsRUFBRTtJQUNiRCxHQUFHLENBQUMsRUFBRSxHQUFHQyxDQUFDLENBQUMsRUFBRTtJQUNiRCxHQUFHLENBQUMsRUFBRSxHQUFHQyxDQUFDLENBQUMsRUFBRTtJQUNiRCxHQUFHLENBQUMsRUFBRSxHQUFHQyxDQUFDLENBQUMsRUFBRTtJQUNiLE9BQU9EO0FBQ1g7QUFFQTs7Ozs7Ozs7O0NBU0MsR0FDTSxTQUFTRSxJQUFJRixHQUFHLEVBQUVHLENBQUMsRUFBRUMsQ0FBQyxFQUFFQyxDQUFDLEVBQUVDLENBQUM7SUFDL0JOLEdBQUcsQ0FBQyxFQUFFLEdBQUdHO0lBQ1RILEdBQUcsQ0FBQyxFQUFFLEdBQUdJO0lBQ1RKLEdBQUcsQ0FBQyxFQUFFLEdBQUdLO0lBQ1RMLEdBQUcsQ0FBQyxFQUFFLEdBQUdNO0lBQ1QsT0FBT047QUFDWDtBQUVBOzs7Ozs7O0NBT0MsR0FDTSxTQUFTTyxJQUFJUCxHQUFHLEVBQUVDLENBQUMsRUFBRU8sQ0FBQztJQUN6QlIsR0FBRyxDQUFDLEVBQUUsR0FBR0MsQ0FBQyxDQUFDLEVBQUUsR0FBR08sQ0FBQyxDQUFDLEVBQUU7SUFDcEJSLEdBQUcsQ0FBQyxFQUFFLEdBQUdDLENBQUMsQ0FBQyxFQUFFLEdBQUdPLENBQUMsQ0FBQyxFQUFFO0lBQ3BCUixHQUFHLENBQUMsRUFBRSxHQUFHQyxDQUFDLENBQUMsRUFBRSxHQUFHTyxDQUFDLENBQUMsRUFBRTtJQUNwQlIsR0FBRyxDQUFDLEVBQUUsR0FBR0MsQ0FBQyxDQUFDLEVBQUUsR0FBR08sQ0FBQyxDQUFDLEVBQUU7SUFDcEIsT0FBT1I7QUFDWDtBQUVBOzs7Ozs7O0NBT0MsR0FDTSxTQUFTUyxNQUFNVCxHQUFHLEVBQUVDLENBQUMsRUFBRU8sQ0FBQztJQUMzQlIsR0FBRyxDQUFDLEVBQUUsR0FBR0MsQ0FBQyxDQUFDLEVBQUUsR0FBR087SUFDaEJSLEdBQUcsQ0FBQyxFQUFFLEdBQUdDLENBQUMsQ0FBQyxFQUFFLEdBQUdPO0lBQ2hCUixHQUFHLENBQUMsRUFBRSxHQUFHQyxDQUFDLENBQUMsRUFBRSxHQUFHTztJQUNoQlIsR0FBRyxDQUFDLEVBQUUsR0FBR0MsQ0FBQyxDQUFDLEVBQUUsR0FBR087SUFDaEIsT0FBT1I7QUFDWDtBQUVBOzs7OztDQUtDLEdBQ00sU0FBU1UsT0FBT1QsQ0FBQztJQUNwQixJQUFJRSxJQUFJRixDQUFDLENBQUMsRUFBRTtJQUNaLElBQUlHLElBQUlILENBQUMsQ0FBQyxFQUFFO0lBQ1osSUFBSUksSUFBSUosQ0FBQyxDQUFDLEVBQUU7SUFDWixJQUFJSyxJQUFJTCxDQUFDLENBQUMsRUFBRTtJQUNaLE9BQU9VLEtBQUtDLElBQUksQ0FBQ1QsSUFBSUEsSUFBSUMsSUFBSUEsSUFBSUMsSUFBSUEsSUFBSUMsSUFBSUE7QUFDakQ7QUFFQTs7Ozs7O0NBTUMsR0FDTSxTQUFTTyxVQUFVYixHQUFHLEVBQUVDLENBQUM7SUFDNUIsSUFBSUUsSUFBSUYsQ0FBQyxDQUFDLEVBQUU7SUFDWixJQUFJRyxJQUFJSCxDQUFDLENBQUMsRUFBRTtJQUNaLElBQUlJLElBQUlKLENBQUMsQ0FBQyxFQUFFO0lBQ1osSUFBSUssSUFBSUwsQ0FBQyxDQUFDLEVBQUU7SUFDWixJQUFJYSxNQUFNWCxJQUFJQSxJQUFJQyxJQUFJQSxJQUFJQyxJQUFJQSxJQUFJQyxJQUFJQTtJQUN0QyxJQUFJUSxNQUFNLEdBQUc7UUFDVEEsTUFBTSxJQUFJSCxLQUFLQyxJQUFJLENBQUNFO0lBQ3hCO0lBQ0FkLEdBQUcsQ0FBQyxFQUFFLEdBQUdHLElBQUlXO0lBQ2JkLEdBQUcsQ0FBQyxFQUFFLEdBQUdJLElBQUlVO0lBQ2JkLEdBQUcsQ0FBQyxFQUFFLEdBQUdLLElBQUlTO0lBQ2JkLEdBQUcsQ0FBQyxFQUFFLEdBQUdNLElBQUlRO0lBQ2IsT0FBT2Q7QUFDWDtBQUVBOzs7Ozs7Q0FNQyxHQUNNLFNBQVNlLElBQUlkLENBQUMsRUFBRU8sQ0FBQztJQUNwQixPQUFPUCxDQUFDLENBQUMsRUFBRSxHQUFHTyxDQUFDLENBQUMsRUFBRSxHQUFHUCxDQUFDLENBQUMsRUFBRSxHQUFHTyxDQUFDLENBQUMsRUFBRSxHQUFHUCxDQUFDLENBQUMsRUFBRSxHQUFHTyxDQUFDLENBQUMsRUFBRSxHQUFHUCxDQUFDLENBQUMsRUFBRSxHQUFHTyxDQUFDLENBQUMsRUFBRTtBQUNoRTtBQUVBOzs7Ozs7OztDQVFDLEdBQ00sU0FBU1EsS0FBS2hCLEdBQUcsRUFBRUMsQ0FBQyxFQUFFTyxDQUFDLEVBQUVTLENBQUM7SUFDN0IsSUFBSUMsS0FBS2pCLENBQUMsQ0FBQyxFQUFFO0lBQ2IsSUFBSWtCLEtBQUtsQixDQUFDLENBQUMsRUFBRTtJQUNiLElBQUltQixLQUFLbkIsQ0FBQyxDQUFDLEVBQUU7SUFDYixJQUFJb0IsS0FBS3BCLENBQUMsQ0FBQyxFQUFFO0lBQ2JELEdBQUcsQ0FBQyxFQUFFLEdBQUdrQixLQUFLRCxJQUFLVCxDQUFBQSxDQUFDLENBQUMsRUFBRSxHQUFHVSxFQUFDO0lBQzNCbEIsR0FBRyxDQUFDLEVBQUUsR0FBR21CLEtBQUtGLElBQUtULENBQUFBLENBQUMsQ0FBQyxFQUFFLEdBQUdXLEVBQUM7SUFDM0JuQixHQUFHLENBQUMsRUFBRSxHQUFHb0IsS0FBS0gsSUFBS1QsQ0FBQUEsQ0FBQyxDQUFDLEVBQUUsR0FBR1ksRUFBQztJQUMzQnBCLEdBQUcsQ0FBQyxFQUFFLEdBQUdxQixLQUFLSixJQUFLVCxDQUFBQSxDQUFDLENBQUMsRUFBRSxHQUFHYSxFQUFDO0lBQzNCLE9BQU9yQjtBQUNYIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcGVyY2V2aWEvLi9ub2RlX21vZHVsZXMvb2dsL3NyYy9tYXRoL2Z1bmN0aW9ucy9WZWM0RnVuYy5qcz84YWQ0Il0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IEVQU0lMT04gPSAwLjAwMDAwMTtcblxuLyoqXG4gKiBDb3B5IHRoZSB2YWx1ZXMgZnJvbSBvbmUgdmVjNCB0byBhbm90aGVyXG4gKlxuICogQHBhcmFtIHt2ZWM0fSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7dmVjNH0gYSB0aGUgc291cmNlIHZlY3RvclxuICogQHJldHVybnMge3ZlYzR9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gY29weShvdXQsIGEpIHtcbiAgICBvdXRbMF0gPSBhWzBdO1xuICAgIG91dFsxXSA9IGFbMV07XG4gICAgb3V0WzJdID0gYVsyXTtcbiAgICBvdXRbM10gPSBhWzNdO1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogU2V0IHRoZSBjb21wb25lbnRzIG9mIGEgdmVjNCB0byB0aGUgZ2l2ZW4gdmFsdWVzXG4gKlxuICogQHBhcmFtIHt2ZWM0fSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7TnVtYmVyfSB4IFggY29tcG9uZW50XG4gKiBAcGFyYW0ge051bWJlcn0geSBZIGNvbXBvbmVudFxuICogQHBhcmFtIHtOdW1iZXJ9IHogWiBjb21wb25lbnRcbiAqIEBwYXJhbSB7TnVtYmVyfSB3IFcgY29tcG9uZW50XG4gKiBAcmV0dXJucyB7dmVjNH0gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXQob3V0LCB4LCB5LCB6LCB3KSB7XG4gICAgb3V0WzBdID0geDtcbiAgICBvdXRbMV0gPSB5O1xuICAgIG91dFsyXSA9IHo7XG4gICAgb3V0WzNdID0gdztcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIEFkZHMgdHdvIHZlYzQnc1xuICpcbiAqIEBwYXJhbSB7dmVjNH0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge3ZlYzR9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7dmVjNH0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHt2ZWM0fSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFkZChvdXQsIGEsIGIpIHtcbiAgICBvdXRbMF0gPSBhWzBdICsgYlswXTtcbiAgICBvdXRbMV0gPSBhWzFdICsgYlsxXTtcbiAgICBvdXRbMl0gPSBhWzJdICsgYlsyXTtcbiAgICBvdXRbM10gPSBhWzNdICsgYlszXTtcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIFNjYWxlcyBhIHZlYzQgYnkgYSBzY2FsYXIgbnVtYmVyXG4gKlxuICogQHBhcmFtIHt2ZWM0fSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7dmVjNH0gYSB0aGUgdmVjdG9yIHRvIHNjYWxlXG4gKiBAcGFyYW0ge051bWJlcn0gYiBhbW91bnQgdG8gc2NhbGUgdGhlIHZlY3RvciBieVxuICogQHJldHVybnMge3ZlYzR9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gc2NhbGUob3V0LCBhLCBiKSB7XG4gICAgb3V0WzBdID0gYVswXSAqIGI7XG4gICAgb3V0WzFdID0gYVsxXSAqIGI7XG4gICAgb3V0WzJdID0gYVsyXSAqIGI7XG4gICAgb3V0WzNdID0gYVszXSAqIGI7XG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBsZW5ndGggb2YgYSB2ZWM0XG4gKlxuICogQHBhcmFtIHt2ZWM0fSBhIHZlY3RvciB0byBjYWxjdWxhdGUgbGVuZ3RoIG9mXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBsZW5ndGggb2YgYVxuICovXG5leHBvcnQgZnVuY3Rpb24gbGVuZ3RoKGEpIHtcbiAgICBsZXQgeCA9IGFbMF07XG4gICAgbGV0IHkgPSBhWzFdO1xuICAgIGxldCB6ID0gYVsyXTtcbiAgICBsZXQgdyA9IGFbM107XG4gICAgcmV0dXJuIE1hdGguc3FydCh4ICogeCArIHkgKiB5ICsgeiAqIHogKyB3ICogdyk7XG59XG5cbi8qKlxuICogTm9ybWFsaXplIGEgdmVjNFxuICpcbiAqIEBwYXJhbSB7dmVjNH0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge3ZlYzR9IGEgdmVjdG9yIHRvIG5vcm1hbGl6ZVxuICogQHJldHVybnMge3ZlYzR9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gbm9ybWFsaXplKG91dCwgYSkge1xuICAgIGxldCB4ID0gYVswXTtcbiAgICBsZXQgeSA9IGFbMV07XG4gICAgbGV0IHogPSBhWzJdO1xuICAgIGxldCB3ID0gYVszXTtcbiAgICBsZXQgbGVuID0geCAqIHggKyB5ICogeSArIHogKiB6ICsgdyAqIHc7XG4gICAgaWYgKGxlbiA+IDApIHtcbiAgICAgICAgbGVuID0gMSAvIE1hdGguc3FydChsZW4pO1xuICAgIH1cbiAgICBvdXRbMF0gPSB4ICogbGVuO1xuICAgIG91dFsxXSA9IHkgKiBsZW47XG4gICAgb3V0WzJdID0geiAqIGxlbjtcbiAgICBvdXRbM10gPSB3ICogbGVuO1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgZG90IHByb2R1Y3Qgb2YgdHdvIHZlYzQnc1xuICpcbiAqIEBwYXJhbSB7dmVjNH0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHt2ZWM0fSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge051bWJlcn0gZG90IHByb2R1Y3Qgb2YgYSBhbmQgYlxuICovXG5leHBvcnQgZnVuY3Rpb24gZG90KGEsIGIpIHtcbiAgICByZXR1cm4gYVswXSAqIGJbMF0gKyBhWzFdICogYlsxXSArIGFbMl0gKiBiWzJdICsgYVszXSAqIGJbM107XG59XG5cbi8qKlxuICogUGVyZm9ybXMgYSBsaW5lYXIgaW50ZXJwb2xhdGlvbiBiZXR3ZWVuIHR3byB2ZWM0J3NcbiAqXG4gKiBAcGFyYW0ge3ZlYzR9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHt2ZWM0fSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge3ZlYzR9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcGFyYW0ge051bWJlcn0gdCBpbnRlcnBvbGF0aW9uIGFtb3VudCBiZXR3ZWVuIHRoZSB0d28gaW5wdXRzXG4gKiBAcmV0dXJucyB7dmVjNH0gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBsZXJwKG91dCwgYSwgYiwgdCkge1xuICAgIGxldCBheCA9IGFbMF07XG4gICAgbGV0IGF5ID0gYVsxXTtcbiAgICBsZXQgYXogPSBhWzJdO1xuICAgIGxldCBhdyA9IGFbM107XG4gICAgb3V0WzBdID0gYXggKyB0ICogKGJbMF0gLSBheCk7XG4gICAgb3V0WzFdID0gYXkgKyB0ICogKGJbMV0gLSBheSk7XG4gICAgb3V0WzJdID0gYXogKyB0ICogKGJbMl0gLSBheik7XG4gICAgb3V0WzNdID0gYXcgKyB0ICogKGJbM10gLSBhdyk7XG4gICAgcmV0dXJuIG91dDtcbn1cbiJdLCJuYW1lcyI6WyJFUFNJTE9OIiwiY29weSIsIm91dCIsImEiLCJzZXQiLCJ4IiwieSIsInoiLCJ3IiwiYWRkIiwiYiIsInNjYWxlIiwibGVuZ3RoIiwiTWF0aCIsInNxcnQiLCJub3JtYWxpemUiLCJsZW4iLCJkb3QiLCJsZXJwIiwidCIsImF4IiwiYXkiLCJheiIsImF3Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ogl/src/math/functions/Vec4Func.js\n");

/***/ })

};
;